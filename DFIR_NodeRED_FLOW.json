[
    {
        "id": "f8d31b3f79add29b",
        "type": "tab",
        "label": "Triage Artefact Processor",
        "disabled": false,
        "info": ""
    },
    {
        "id": "adaa3f44094f3fb5",
        "type": "tab",
        "label": "Malware Analysis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "661e7f7a151d4072",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2c32c57ee0c89b2b",
        "type": "tab",
        "label": "Domain / URL Analysis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "610fd5cf8138bd6d",
        "type": "tab",
        "label": "Cloud Forensic Analysis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "44cf1917690496d8",
        "type": "tab",
        "label": "Log Analysis Tooling Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d75898983a7b91b1",
        "type": "tab",
        "label": "Chainsaw Brainmap",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "018a08567380648f",
        "type": "tab",
        "label": "E01 Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ff0d2698d578dcb2",
        "type": "tab",
        "label": "VHD Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a3bca09fa64d5135",
        "type": "tab",
        "label": "VMDK Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bb185f14c626bdfb",
        "type": "tab",
        "label": "VHDX Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7fd75b92004ac098",
        "type": "tab",
        "label": "Detect Archive & Integrity Check",
        "disabled": false,
        "info": "This workflow identifies different types of archive types and runs integrity checks based on the archiving tool",
        "env": []
    },
    {
        "id": "bc372fc61e93398a",
        "type": "tab",
        "label": "Decompress Archive",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9583b8de.96bc48",
        "type": "tab",
        "label": "Basic Dashboard Elements",
        "disabled": false,
        "info": ""
    },
    {
        "id": "90da6d14.cc65d8",
        "type": "tab",
        "label": "CPU Dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9b46958.ce6a368",
        "type": "tab",
        "label": "Space Station update",
        "disabled": false,
        "info": ""
    },
    {
        "id": "21f1b2aeb83d507c",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "29d4eba357840193",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5fde894cc9253f03",
        "type": "tab",
        "label": "Flow 7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eb4902f354a3b11b",
        "type": "tab",
        "label": "v2.0 File Upload",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ce54a2c5ab584757",
        "type": "tab",
        "label": "v1.0 File Upload",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7e96772c649e1a24",
        "type": "tab",
        "label": "v2.0 File Upload",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "32cfc6ae564d5d0d",
        "type": "subflow",
        "name": "v1.0 File Upload Process",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "f9aa871be7506a0d",
                        "port": 0
                    },
                    {
                        "id": "985830e636916d66",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "43f940ed9ce785ce",
        "type": "subflow",
        "name": "v1.0 File Upload List Files",
        "info": "# List files\n\nWill list files in a directory.\n\nPath can be set in `msg.payload` or by setting the `DIRECTORY` environment variable.\n\nExtensions can be filtered by settings the `EXTENSIONS` environment variable to an Array of extensions.\n",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "0ac5932d31551059"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 40,
                "wires": [
                    {
                        "id": "8d85c2e96df8e084",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DIRECTORY",
                "type": "str",
                "value": ""
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1f05e4b7e53a7b3c",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "b14d67d724b5880d",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f7c3b33825b0828a",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4e8d638d79fad479",
        "type": "ui_group",
        "name": "Default",
        "tab": "b14d67d724b5880d",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2fb9c205.dae50e",
        "type": "ui_group",
        "name": "Button",
        "tab": "de296677.584f4",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "122a9c51.bdf31c",
        "type": "ui_group",
        "name": "Analog",
        "tab": "de296677.584f4",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "de296677.584f4",
        "type": "ui_tab",
        "name": "Basic Dashboard",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "baa4830e.d51ff",
        "type": "ui_group",
        "name": "Sense Hat Simulator ",
        "tab": "262952a9.f1dcbe",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "6d02446b.841c64",
        "type": "ui_group",
        "name": "CPU On/Off",
        "tab": "262952a9.f1dcbe",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false
    },
    {
        "id": "3d630fa8.8d0d68",
        "type": "ui_group",
        "name": "CPU Gauges",
        "tab": "262952a9.f1dcbe",
        "order": 3,
        "disp": true,
        "width": "3"
    },
    {
        "id": "262952a9.f1dcbe",
        "type": "ui_tab",
        "name": "CPU Dashboard",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9813997d.68df88",
        "type": "ui_group",
        "name": "Start/Stop",
        "tab": "c1fc79b.7049e88",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false
    },
    {
        "id": "66464e0a.235a1",
        "type": "ui_group",
        "z": "9b46958.ce6a368",
        "name": "Space Station",
        "tab": "c1fc79b.7049e88",
        "order": 2,
        "disp": true,
        "width": "20"
    },
    {
        "id": "c1fc79b.7049e88",
        "type": "ui_tab",
        "z": "9b46958.ce6a368",
        "name": "International Space Station Location 2",
        "icon": "fa-space-shuttle",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "dd8d2662278f4f72",
        "type": "ui-page",
        "name": "Data Entry New",
        "ui": "cb79bc4520925e32",
        "path": "/entry",
        "icon": "note-multiple",
        "layout": "grid",
        "theme": "0d92c765bfad87e6",
        "order": 7,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "44010f4b04014d29",
        "type": "ui-group",
        "name": "Binary Upload",
        "page": "dd8d2662278f4f72",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "0d92c765bfad87e6",
        "type": "ui-theme",
        "name": "Basic Blue Theme",
        "colors": {
            "surface": "#4d58ff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "cb79bc4520925e32",
        "type": "ui-base",
        "name": "My UI",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false
    },
    {
        "id": "f5c2b7111eeb7ab2",
        "type": "ui-group",
        "name": "Group Name",
        "page": "1ac8f0dc6af762b8",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "0d8bb4422190121d",
        "type": "ui-group",
        "name": "Task List",
        "page": "abf2f56d637dd7e2",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "b362eb01162ac195",
        "type": "ui-group",
        "name": "Tasks List",
        "page": "9ddbd8b53184555c",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "22b17110c0d4f034",
        "type": "ui-group",
        "name": "Raspberry Pi Data",
        "page": "621b72a71b7fea3c",
        "width": "3",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6541a2e358dbd499",
        "type": "ui-group",
        "name": "CO2 Levels",
        "page": "621b72a71b7fea3c",
        "width": "4",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "1ac8f0dc6af762b8",
        "type": "ui-page",
        "name": "Task Submission",
        "ui": "cb79bc4520925e32",
        "path": "/submit-data",
        "icon": "form-textbox",
        "layout": "notebook",
        "theme": "5ae8613757b62f89",
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "abf2f56d637dd7e2",
        "type": "ui-page",
        "name": "Admin View",
        "ui": "cb79bc4520925e32",
        "path": "/admin",
        "icon": "lock",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 6,
        "className": "",
        "visible": false,
        "disabled": "false"
    },
    {
        "id": "9ddbd8b53184555c",
        "type": "ui-page",
        "name": "Your Tasks",
        "ui": "cb79bc4520925e32",
        "path": "/tasks",
        "icon": "view-list-outline",
        "layout": "grid",
        "theme": "5ae8613757b62f89",
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "621b72a71b7fea3c",
        "type": "ui-page",
        "name": "Data Dashboard",
        "ui": "cb79bc4520925e32",
        "path": "/data",
        "icon": "gauge",
        "layout": "grid",
        "theme": "5ae8613757b62f89",
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5ae8613757b62f89",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "a70602e73bbb2a95",
        "type": "ui-theme",
        "name": "Admin Theme",
        "colors": {
            "surface": "#454545",
            "primary": "#d47e1c",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "ea5c3d2dcfb3462e",
        "type": "ui-group",
        "name": "Group Name",
        "page": "76f6b77509a74a17",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": ""
    },
    {
        "id": "76f6b77509a74a17",
        "type": "ui-page",
        "name": "Page Name",
        "ui": "cb79bc4520925e32",
        "path": "/",
        "icon": "",
        "layout": "grid",
        "theme": "c5ed292f3032aa43",
        "order": 2,
        "className": ""
    },
    {
        "id": "b73dc5151c8cd587",
        "type": "ui-group",
        "name": "CSV Table",
        "page": "76f6b77509a74a17",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": ""
    },
    {
        "id": "c5ed292f3032aa43",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        }
    },
    {
        "id": "c49126a1122b81c2",
        "type": "ui-page",
        "name": "Upload New",
        "ui": "cb79bc4520925e32",
        "path": "/page7",
        "icon": "home",
        "layout": "grid",
        "theme": "a70602e73bbb2a95",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "b754f85f5adaf50c",
        "type": "ui-group",
        "name": "Upload New",
        "page": "c49126a1122b81c2",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "4178bf61.05d97",
        "type": "ui_group",
        "name": "File upload",
        "tab": "f1b5a1b6.543fd8",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f1b5a1b6.543fd8",
        "type": "ui_tab",
        "name": "File Upload",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "8c2f073fced364da",
        "type": "http in",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "b64b15cc50e1bca7",
                "ba64aa097970c358",
                "b9832061d3220afb"
            ]
        ]
    },
    {
        "id": "f4cc32ee41e7d54a",
        "type": "http response",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "5cb99ae26a548b44",
        "type": "ui_template",
        "z": "32cfc6ae564d5d0d",
        "group": "4178bf61.05d97",
        "name": "Upload",
        "order": 1,
        "width": "6",
        "height": "3",
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "b9832061d3220afb"
            ]
        ]
    },
    {
        "id": "def0da21f80d8325",
        "type": "ui_dropdown",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "4178bf61.05d97",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "46e1d43e335b8127"
            ]
        ]
    },
    {
        "id": "a5160bea005632e9",
        "type": "link in",
        "z": "32cfc6ae564d5d0d",
        "name": "refreshFileDropdown",
        "links": [
            "4bbb79f5dace631e",
            "3c66394f7ddb4596"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "d7efdaa53ff9f955"
            ]
        ]
    },
    {
        "id": "288a3a4b384d757a",
        "type": "ui_button",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "group": "4178bf61.05d97",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "a5078173b932a519"
            ]
        ]
    },
    {
        "id": "46e1d43e335b8127",
        "type": "change",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b64b15cc50e1bca7",
        "type": "change",
        "z": "32cfc6ae564d5d0d",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "c72d748572251434",
                "b9832061d3220afb"
            ]
        ]
    },
    {
        "id": "1766bef9ac2e4b93",
        "type": "file",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "f9aa871be7506a0d",
                "b9832061d3220afb"
            ]
        ]
    },
    {
        "id": "9e56cb6802490ebf",
        "type": "inject",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "d7efdaa53ff9f955"
            ]
        ]
    },
    {
        "id": "a5078173b932a519",
        "type": "change",
        "z": "32cfc6ae564d5d0d",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "84713b0c20d9a64d"
            ]
        ]
    },
    {
        "id": "985830e636916d66",
        "type": "file",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "3c66394f7ddb4596"
            ]
        ]
    },
    {
        "id": "84713b0c20d9a64d",
        "type": "ui_toast",
        "z": "32cfc6ae564d5d0d",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "ab717de0d09a8b50"
            ]
        ]
    },
    {
        "id": "ab717de0d09a8b50",
        "type": "switch",
        "z": "32cfc6ae564d5d0d",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "985830e636916d66"
            ]
        ]
    },
    {
        "id": "a99a9bed99fddd26",
        "type": "catch",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "f25a83ec11a27499"
            ]
        ]
    },
    {
        "id": "4b7b954d1dd1276a",
        "type": "ui_toast",
        "z": "32cfc6ae564d5d0d",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "f25a83ec11a27499",
        "type": "change",
        "z": "32cfc6ae564d5d0d",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "4b7b954d1dd1276a",
                "b9832061d3220afb"
            ]
        ]
    },
    {
        "id": "3c66394f7ddb4596",
        "type": "link out",
        "z": "32cfc6ae564d5d0d",
        "name": "refreshAfterDelete",
        "links": [
            "a5160bea005632e9"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "4bbb79f5dace631e",
        "type": "link out",
        "z": "32cfc6ae564d5d0d",
        "name": "refreshAfterUpload",
        "links": [
            "a5160bea005632e9"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "ba64aa097970c358",
        "type": "change",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "f4cc32ee41e7d54a",
                "b9832061d3220afb"
            ]
        ]
    },
    {
        "id": "d7efdaa53ff9f955",
        "type": "delay",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "3bdf1765878817b4",
        "type": "watch",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "d7efdaa53ff9f955"
            ]
        ]
    },
    {
        "id": "3aeb97c792268a6d",
        "type": "change",
        "z": "32cfc6ae564d5d0d",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "def0da21f80d8325"
            ]
        ]
    },
    {
        "id": "c72d748572251434",
        "type": "switch",
        "z": "32cfc6ae564d5d0d",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "1766bef9ac2e4b93",
                "b9832061d3220afb"
            ],
            [
                "51db31d03d052a4d",
                "b9832061d3220afb"
            ]
        ]
    },
    {
        "id": "51db31d03d052a4d",
        "type": "function",
        "z": "32cfc6ae564d5d0d",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "f9aa871be7506a0d",
        "type": "change",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "4bbb79f5dace631e"
            ]
        ]
    },
    {
        "id": "d522e234a3d99724",
        "type": "watch",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 740,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "b9832061d3220afb",
        "type": "debug",
        "z": "32cfc6ae564d5d0d",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "26976fbec36d23c0",
        "type": "http in",
        "z": "32cfc6ae564d5d0d",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "41984c7ffa881733",
        "type": "exec",
        "z": "43f940ed9ce785ce",
        "command": "ls",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 510,
        "y": 60,
        "wires": [
            [
                "8d85c2e96df8e084"
            ],
            [],
            []
        ]
    },
    {
        "id": "8d85c2e96df8e084",
        "type": "change",
        "z": "43f940ed9ce785ce",
        "name": "split and filter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t    $files := [$split(payload, '\\n')[$ != \"\"]];\t    $count($env('EXTENSIONS')) = 0 ? [$files] : [$files[$split($, '.')[-1] in $env('EXTENSIONS')]];\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "0ac5932d31551059",
        "type": "switch",
        "z": "43f940ed9ce785ce",
        "name": "",
        "property": "$env('DIRECTORY')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 80,
        "wires": [
            [
                "41984c7ffa881733"
            ],
            [
                "a2f56e0c16b7b910"
            ]
        ]
    },
    {
        "id": "a2f56e0c16b7b910",
        "type": "change",
        "z": "43f940ed9ce785ce",
        "name": "DIRECTORY",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DIRECTORY",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "41984c7ffa881733"
            ]
        ]
    },
    {
        "id": "e8c9dac0b45ce024",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "Set-Log2timeline CLI params",
        "func": "var plasodir = \"/cases/plaso/\";\nvar plasoname = msg.dirname.replace('processor', 'plaso');\nmsg.l2tcli = \"log2timeline.py --status_view none --parsers \\\"filestat,winreg,esedb,binary_cookies,chrome_cache,chrome_preferences,custom_destinations,czip,firefox_cache,firefox_cache2,java_idx,jsonl,lnk,mcafee_protection,msiecf,olecf,opera_global,opera_typed_history,pe,prefetch,recycle_bin,recycle_bin_info2,sqlite,symantec_scanlog,text,trendmicro_url,trendmicro_vd,windefender_history,winevt,winevtx,winjob\\\" --storage-file\" + \" \" + plasoname + \".plaso\" + \" \" + msg.unzipdir;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 920,
        "wires": [
            [
                "da0236f64e679945"
            ]
        ]
    },
    {
        "id": "da0236f64e679945",
        "type": "exec",
        "z": "f8d31b3f79add29b",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 720,
        "y": 920,
        "wires": [
            [],
            [],
            [
                "aef29c2f6fb1ae0e"
            ]
        ]
    },
    {
        "id": "2b3a6c9be610f3ec",
        "type": "exec",
        "z": "f8d31b3f79add29b",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 940,
        "y": 1120,
        "wires": [
            [],
            [],
            [
                "381d356754cbd5b7"
            ]
        ]
    },
    {
        "id": "a1ed6bf3ca374590",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "Timesketch CLI params",
        "func": "var plasofullpath = \"/cases/plaso/\"+ msg.plasofname + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.plasofname + \"-triage\" + \" --sketch_id \" + \"1\" + \" \" + plasofullpath;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1120,
        "wires": [
            [
                "2b3a6c9be610f3ec"
            ]
        ]
    },
    {
        "id": "97c8951a9e7c5bec",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c40feb7825e478d4",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "1) Monitored Directory /cases/processor (ZIP/Image)",
        "info": "",
        "x": 270,
        "y": 180,
        "wires": []
    },
    {
        "id": "1dc2e40229cf819f",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "Double click on Queue Zips to the adjust bulk processing value",
        "info": "Tweak the value to configure how many archives to process at any given time",
        "x": 1680,
        "y": 100,
        "wires": []
    },
    {
        "id": "e0658d835205bc43",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 2060,
        "y": 840,
        "wires": []
    },
    {
        "id": "eeafbc27927a5598",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "Change Timesketch CLI params here",
        "info": "",
        "x": 630,
        "y": 1080,
        "wires": []
    },
    {
        "id": "381d356754cbd5b7",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1240,
        "y": 1120,
        "wires": [
            [
                "0abb6da646da8e2a"
            ],
            [
                "97c8951a9e7c5bec",
                "0abb6da646da8e2a"
            ]
        ]
    },
    {
        "id": "c223eba39864f63e",
        "type": "exec",
        "z": "f8d31b3f79add29b",
        "command": "rm -rf ",
        "addpay": "unzipdir",
        "append": "",
        "useSpawn": "false",
        "timer": "300",
        "winHide": false,
        "oldrc": false,
        "name": "Delete Decompressed Dir",
        "x": 1210,
        "y": 940,
        "wires": [
            [],
            [],
            [
                "8e295048a3752df2"
            ]
        ]
    },
    {
        "id": "1a3f028824bd9f13",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "Decompression Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 380,
        "wires": [
            [
                "1ce9ab81db8fa381"
            ],
            [
                "a8c0e026d01fe67f",
                "0abb6da646da8e2a"
            ]
        ]
    },
    {
        "id": "a8c0e026d01fe67f",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Decompress Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 460,
        "wires": []
    },
    {
        "id": "b50268e02b2de0d7",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "READ ME FIRST! Double Click",
        "info": "**CURRENT CONFIG OF THE AUTOMATION DO NOT PROCESS NESTED ZIPS OF HOSTS.FOR EXAMPLE, YOU CANNOT UPLOAD A SINGLE ZIP CONTAINING TRIAGE ARCHIVES OF N DIFFERENT HOSTS.**\n\n**Following folders need to be created beforehand**\n/cases/processor - this is where archives will need to be copied to. Note that the original archives copied here will be retained indefinitely.\n/cases/plaso - this is where plaso files be stored after log2timeline completes its processing.\n/cases/evtxproc/ -processed hayabusa csvs will be stored here.\n\n**Hayabusa Evtx Processing***\nThis is currently configured for KAPE triage configurations, where the evtx is expected like below\nunzipped directory/C/Windows/System32/winevt/. You can change the path by updating the path in Hayabusa Process Variables node. You must change the timesketch username and password information in the same node. Otherwise it will fail to ingest to Timesketch\n\n***Slack notifications***\nYou must set the slack webhook and username configuration within the \"Notification to Slack\" node within \"Slack Notifications\" flow \n\nMake sure Node-RED can read and write to all folders under /cases.\n\n**Compression utility must be pre-installed on the Linux host prior running the workflow**\nThis automation is configured to detect Zip, RAR, Tar GZ & BZ2, 7z archives.\n\n** \"Variable Setup\" node** \nThis node contains the key commandline parameters used for archive tools and other variables required for automation.\n\n**You need the following Node-RED nodes installed via the Node-RED palette**\n\n-node-red-contrib-fs \n-node-red-contrib-fs-ops \n-node-red-contrib-simple-queue \n-node-red-contrib-watchdirectory\n-node-red-contrib-slack-files\n\n**Change the Log2Timeline CLI Parameters and Timesketch CLI Parameters**\nYou should review the CLI parameters used for Log2timeline and Timesketch in their respective nodes. \n\n\n**FYI Only**\nNode-RED has a default memory cap of 2GB. You can increase this through the use of environment variables. Add the following to your bash.rc of the user in which Node-RED runs. Size is in MB.\n\nNODE_OPTIONS=--max_old_space_size=4096",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "8e295048a3752df2",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "Delete Folder",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1440,
        "y": 960,
        "wires": [
            [
                "a1ed6bf3ca374590"
            ],
            [
                "0abb6da646da8e2a",
                "cbe146b403c6aec0"
            ]
        ]
    },
    {
        "id": "8b62e0d85a31d638",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "L2T Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 880,
        "wires": []
    },
    {
        "id": "cbe146b403c6aec0",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Folder Deletion Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 940,
        "wires": []
    },
    {
        "id": "b6ecf5f15136a82b",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Archive Detection",
        "mode": "link",
        "links": [
            "bb4beaa62a0d33db",
            "a8d477a02835a411"
        ],
        "x": 1185,
        "y": 300,
        "wires": []
    },
    {
        "id": "65e9ad454afcf6d1",
        "type": "link in",
        "z": "f8d31b3f79add29b",
        "name": "Post Integrity Check In",
        "links": [
            "3a6757a824d0b781"
        ],
        "x": 595,
        "y": 360,
        "wires": [
            [
                "0abb6da646da8e2a"
            ]
        ]
    },
    {
        "id": "3b18ad5734fc996b",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "Variable Setup",
        "func": "//Setting up directory path of the file upload\nmsg.config ={}\nmsg.config.start = msg.filedir\n\n//Setting up vars to handle archive decompress operations\nvar filenameUpper = msg.file.split(\".\")[0];\nvar filename = filenameUpper.toLowerCase();\nmsg.tstamp = new Date().toISOString().substring(0,19).replace(/-/g,\"\").replace(/:/g,\"\");\nvar dirnameUpper = filename + msg.tstamp + \"Z\";\nmsg.dirname = dirnameUpper.toLowerCase();\nmsg.plasofname = msg.dirname;\n//msg.filename = msg.payload;\n\n//Setting up decompress parameters\nmsg.unzipdir = msg.filedir + '/' + msg.dirname;\nmsg.unzipcli = \"-qo \" + msg.filename + \" -d \" + msg.unzipdir;\nmsg.sevzipcli = \" x \" + msg.filename + \" -o\" + msg.unzipdir;\nmsg.targzcli = \" xzf \" + msg.filename + \" -C \" + msg.unzipdir;\nmsg.tarbz2cli = \" xjf \" + msg.filename + \" -C \" + msg.unzipdir;\nmsg.unrarcli = \"x \" + msg.filename + \" \" + msg.unzipdir;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 300,
        "wires": [
            [
                "b6ecf5f15136a82b"
            ]
        ]
    },
    {
        "id": "f1ea48448bbde595",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "ToDecompress",
        "mode": "link",
        "links": [
            "5fd92537b38314b0"
        ],
        "x": 1115,
        "y": 440,
        "wires": []
    },
    {
        "id": "a9c3989928f3fee0",
        "type": "link in",
        "z": "f8d31b3f79add29b",
        "name": "Decompress Status In",
        "links": [
            "e8aed768bff52623"
        ],
        "x": 65,
        "y": 380,
        "wires": [
            [
                "1a3f028824bd9f13"
            ]
        ]
    },
    {
        "id": "aef29c2f6fb1ae0e",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 960,
        "y": 920,
        "wires": [
            [
                "c223eba39864f63e"
            ],
            [
                "0abb6da646da8e2a",
                "8b62e0d85a31d638"
            ]
        ]
    },
    {
        "id": "e4e7063f519ed216",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "KAPE Hayabusa Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.kape = msg.dirname + '/C/Windows/System32/winevt/logs/';\nmsg.hayabusa_job = msg.plasofname + '-hayabusa';\nmsg.hayabusa_out = '/cases/evtxproc/' + msg.hayabusa_job;\nmsg.hayabusa_exec =  'csv-timeline -d ' +msg.kape+ ' --RFC-3339 -o ' + msg.hayabusa_out + '.csv' + ' -p timesketch-verbose -U --no-wizard'\nmsg.hayabusa_ts = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.hayabusa_job + \" --sketch_id \" + \"1 \" + msg.hayabusa_out + '.csv';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 620,
        "wires": [
            [
                "52415c7bb8e16c3a",
                "430a7da8abd665c9"
            ]
        ]
    },
    {
        "id": "52415c7bb8e16c3a",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Out to Hayabusa Process",
        "mode": "link",
        "links": [
            "2397e77a3c79fda3"
        ],
        "x": 705,
        "y": 680,
        "wires": []
    },
    {
        "id": "c07a0968fd953921",
        "type": "link in",
        "z": "f8d31b3f79add29b",
        "name": "Hayabusa to Timesketch In",
        "links": [
            "04540ea77b74e085",
            "98de6e555668d6f0"
        ],
        "x": 235,
        "y": 880,
        "wires": [
            [
                "e8c9dac0b45ce024"
            ]
        ]
    },
    {
        "id": "4c62df5220200fdf",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Hayabusa Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 540,
        "wires": []
    },
    {
        "id": "4c538c90671aa59f",
        "type": "link in",
        "z": "f8d31b3f79add29b",
        "name": "From Hayabusa Failure",
        "links": [
            "168748d31fb17282"
        ],
        "x": 1665,
        "y": 600,
        "wires": [
            [
                "0abb6da646da8e2a",
                "bd1b4ee6503bc34d",
                "e8c9dac0b45ce024"
            ]
        ]
    },
    {
        "id": "bd1b4ee6503bc34d",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Hayabusa Timesketch Ingestion Failure",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 600,
        "wires": []
    },
    {
        "id": "846701cdbfb12f64",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "KAPE Zips Hayabusa specific config here",
        "info": "",
        "x": 400,
        "y": 580,
        "wires": []
    },
    {
        "id": "519e07706b40afdf",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "E01 Process",
        "mode": "link",
        "links": [
            "84d7cd3a2988674f"
        ],
        "x": 825,
        "y": 80,
        "wires": []
    },
    {
        "id": "e2ea7e6a94a18404",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "Process ZIP",
        "func": "msg.payload = \"Processing ZIP file: \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 300,
        "wires": [
            [
                "3b18ad5734fc996b"
            ]
        ]
    },
    {
        "id": "5b48534e1cd703c5",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "File Type",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.E01",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.zip",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.vhd",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": ".*\\.vhdx",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.vmdk",
                "vt": "str",
                "case": true
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 580,
        "y": 140,
        "wires": [
            [
                "519e07706b40afdf"
            ],
            [
                "e2ea7e6a94a18404"
            ],
            [
                "dccc0af765f16871"
            ],
            [
                "1f168e07a0d53239"
            ],
            [
                "5d88f249dc4c5a80"
            ]
        ]
    },
    {
        "id": "dccc0af765f16871",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "VHD Process",
        "mode": "link",
        "links": [
            "236dcee18367a244"
        ],
        "x": 825,
        "y": 120,
        "wires": []
    },
    {
        "id": "5d88f249dc4c5a80",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "VMDK Process",
        "mode": "link",
        "links": [
            "abc43a287b554b44"
        ],
        "x": 825,
        "y": 160,
        "wires": []
    },
    {
        "id": "1f168e07a0d53239",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "VHDX Process",
        "mode": "link",
        "links": [
            "1896b282f8d5a850"
        ],
        "x": 825,
        "y": 200,
        "wires": []
    },
    {
        "id": "79cc0876ab434694",
        "type": "watch-directory",
        "z": "f8d31b3f79add29b",
        "folder": "/cases/processor/",
        "recursive": "1",
        "typeEvent": "create",
        "ignoreInitial": true,
        "ignoredFiles": "",
        "ignoredFilesType": "re",
        "name": "Watch for Triage Archives",
        "x": 230,
        "y": 220,
        "wires": [
            [
                "5b48534e1cd703c5"
            ]
        ]
    },
    {
        "id": "0abb6da646da8e2a",
        "type": "simple-queue",
        "z": "f8d31b3f79add29b",
        "name": "Queue Zips",
        "count": "1",
        "unique_check": "",
        "x": 750,
        "y": 420,
        "wires": [
            [
                "4f821c6d2c595ac8"
            ]
        ]
    },
    {
        "id": "4f821c6d2c595ac8",
        "type": "fs-ops-mkdir",
        "z": "f8d31b3f79add29b",
        "name": "Create Unzip Dir",
        "path": "filedir",
        "pathType": "msg",
        "dirname": "dirname",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "777",
        "fullpath": "dirname",
        "fullpathType": "msg",
        "x": 980,
        "y": 420,
        "wires": [
            [
                "f1ea48448bbde595"
            ]
        ]
    },
    {
        "id": "1ce9ab81db8fa381",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "",
        "property": "dirname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "/kape/",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "/collection/",
                "vt": "msg",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 620,
        "wires": [
            [
                "e4e7063f519ed216"
            ],
            [
                "1b8393b25e5274ec",
                "b803c3ca2b4158ec"
            ]
        ]
    },
    {
        "id": "1b8393b25e5274ec",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "VR Hayabusa Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.vr = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs/';\nmsg.hayabusa_job = msg.plasofname + '-hayabusa';\nmsg.hayabusa_out = '/cases/evtxproc/' + msg.hayabusa_job;\nmsg.hayabusa_exec =  'csv-timeline -d ' +msg.vr+ ' --RFC-3339 -o ' + msg.hayabusa_out + '.csv' + ' -p timesketch-verbose -U --no-wizard'\nmsg.hayabusa_ts = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.hayabusa_job + \" --sketch_id \" + \"1 \" + msg.hayabusa_out + '.csv';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 720,
        "wires": [
            [
                "52415c7bb8e16c3a",
                "ebfef9e11e2f2d06"
            ]
        ]
    },
    {
        "id": "b803c3ca2b4158ec",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Switch Hayabusa Variable ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ebfef9e11e2f2d06",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "VR Hayabusa Processing",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1080,
        "wires": []
    },
    {
        "id": "430a7da8abd665c9",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "KAPE Hayabusa Processing",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c4bd1b58179b163d",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "2) Switch depending on filetype",
        "info": "",
        "x": 590,
        "y": 60,
        "wires": []
    },
    {
        "id": "86fdc3d9fad03c8f",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "3) Zip File Flow",
        "info": "",
        "x": 800,
        "y": 260,
        "wires": []
    },
    {
        "id": "bdfe1daacead68e6",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "4) Decompress Zip",
        "info": "",
        "x": 250,
        "y": 340,
        "wires": []
    },
    {
        "id": "54a1be89f3f94d2f",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "5) Queue of multiple zip files and create zip directory",
        "info": "",
        "x": 910,
        "y": 380,
        "wires": []
    },
    {
        "id": "5e1cded5289b04c9",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "Velociraptor Zips Hayabusa specific config here",
        "info": "",
        "x": 420,
        "y": 680,
        "wires": []
    },
    {
        "id": "4899ea50dd83351a",
        "type": "link in",
        "z": "f8d31b3f79add29b",
        "name": "Hayabusa Process Failed",
        "links": [
            "8f28d8c8efda634d"
        ],
        "x": 1665,
        "y": 540,
        "wires": [
            [
                "0abb6da646da8e2a",
                "4c62df5220200fdf",
                "e8c9dac0b45ce024"
            ]
        ]
    },
    {
        "id": "025f1504becd08b8",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "ADD BSTRINGS to extract all IOCS to files",
        "info": "",
        "x": 1620,
        "y": 180,
        "wires": []
    },
    {
        "id": "1f8dc4580ce97362",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "ADD BSTRINGS to extract all IOCS to files",
        "info": "",
        "x": 1620,
        "y": 140,
        "wires": []
    },
    {
        "id": "7461cd115a5e16e8",
        "type": "switch",
        "z": "adaa3f44094f3fb5",
        "name": "File Type",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.exe",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.dll",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.js",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": ".*\\.doc",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.pdf",
                "vt": "str",
                "case": true
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 140,
        "y": 460,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "dad7f195c5be795b",
        "type": "function",
        "z": "adaa3f44094f3fb5",
        "name": "Malware Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\nvar malware = msg.filename.toLowerCase();\n//var malware = msg.filename.split(\".\")[0].toLowerCase();\n\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newMalware = malware;\n\n// Assigning the new filename to msg.newMalware\nmsg.malware = newMalware;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 220,
        "wires": [
            [
                "d415ee434b1fea30"
            ]
        ]
    },
    {
        "id": "b9cf924273e30e00",
        "type": "function",
        "z": "adaa3f44094f3fb5",
        "name": "Process Malware File",
        "func": "msg.payload = \"Processing Malware file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "dad7f195c5be795b"
            ]
        ]
    },
    {
        "id": "6695eee14b943191",
        "type": "exec",
        "z": "adaa3f44094f3fb5",
        "command": "",
        "addpay": "capa",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Capa Process",
        "x": 1380,
        "y": 320,
        "wires": [
            [
                "948989701c6b53a7"
            ],
            [
                "948989701c6b53a7"
            ],
            [
                "948989701c6b53a7"
            ]
        ]
    },
    {
        "id": "f338cda424220486",
        "type": "watch-directory",
        "z": "adaa3f44094f3fb5",
        "folder": "/cases/malware/",
        "recursive": "0",
        "typeEvent": "create",
        "ignoreInitial": true,
        "ignoredFiles": "",
        "ignoredFilesType": "re",
        "name": "Watch for Triage Archives",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "b9cf924273e30e00"
            ]
        ]
    },
    {
        "id": "948989701c6b53a7",
        "type": "function",
        "z": "adaa3f44094f3fb5",
        "name": "ClamScan Analysis Params",
        "func": "var malwaredir = \"/cases/malware/\";\nvar malwareresults = \"/cases/malware/results/\";\n\n// Extract the filename from msg.malware\nvar malwarefilename = msg.malware.split('/').pop().replace(/\\.(exe|dll|bin)$/, \".txt\");\nvar malwaretxt = malwareresults + malwarefilename;\nmsg.malwarehash = malwaretxt\nmsg.clam = \"--quiet --verbose --infected -r -z -i --bell \" + msg.malware + \" --log=\" + malwaretxt;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 580,
        "wires": [
            [
                "f97575bd23bfd3ad"
            ]
        ]
    },
    {
        "id": "f97575bd23bfd3ad",
        "type": "exec",
        "z": "adaa3f44094f3fb5",
        "command": "clamscan",
        "addpay": "clam",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Capa Process",
        "x": 880,
        "y": 580,
        "wires": [
            [],
            [],
            [
                "d415ee434b1fea30"
            ]
        ]
    },
    {
        "id": "d415ee434b1fea30",
        "type": "simple-queue",
        "z": "adaa3f44094f3fb5",
        "name": "Queue Files",
        "count": "1",
        "unique_check": "",
        "x": 330,
        "y": 380,
        "wires": [
            [
                "423d6d17ae8921c2"
            ]
        ]
    },
    {
        "id": "9cbe181f6ab5a8af",
        "type": "function",
        "z": "adaa3f44094f3fb5",
        "name": "Capa Malware Analysis Params",
        "func": "var malwaredir = \"/cases/malware/\";\nvar malwareresults = \"/cases/malware/results/\";\n\n// Extract the filename from msg.malware\nvar malwarefilename = msg.malware.split('/').pop().replace(/\\.(exe|dll|bin)$/, \".txt\");\nvar malwaretxt = malwareresults + malwarefilename;\n\n// Construct the command with the correct paths\nmsg.capa = \"/opt/capa/./capa \" + msg.malware + \" >> \" + malwaretxt;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 280,
        "wires": [
            [
                "6695eee14b943191"
            ]
        ]
    },
    {
        "id": "423d6d17ae8921c2",
        "type": "function",
        "z": "adaa3f44094f3fb5",
        "name": "SHA256 Extract Params",
        "func": "var malwaredir = \"/cases/malware/\";\nvar malwareresults = \"/cases/malware/results/\";\n\n// Extract the filename from msg.malware\nvar malwarefilename = msg.malware.split('/').pop().replace(/\\.(exe|dll|bin)$/, \".txt\");\nvar malwaretxt = malwareresults + malwarefilename;\nmsg.malwarehash = malwaretxt\nmsg.sha256 = msg.malware + \" >> /cases/malware/results/sha256.txt\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 360,
        "wires": [
            [
                "87717fdc6d7e61f5"
            ]
        ]
    },
    {
        "id": "87717fdc6d7e61f5",
        "type": "exec",
        "z": "adaa3f44094f3fb5",
        "command": "sha256sum",
        "addpay": "sha256",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "SHA256 Process",
        "x": 830,
        "y": 360,
        "wires": [
            [],
            [],
            [
                "9cbe181f6ab5a8af"
            ]
        ]
    },
    {
        "id": "1ead982e86fc6ca2",
        "type": "comment",
        "z": "adaa3f44094f3fb5",
        "name": "Monitored Directory /cases/malware (Files)",
        "info": "",
        "x": 220,
        "y": 100,
        "wires": []
    },
    {
        "id": "00d7490ddc0f3e90",
        "type": "comment",
        "z": "2c32c57ee0c89b2b",
        "name": "https://github.com/omriher/CapTipper/tree/python3_support",
        "info": "",
        "x": 730,
        "y": 140,
        "wires": []
    },
    {
        "id": "22f20f4ad197f359",
        "type": "watch-directory",
        "z": "2c32c57ee0c89b2b",
        "folder": "",
        "recursive": 0,
        "typeEvent": "create",
        "ignoreInitial": true,
        "ignoredFiles": "",
        "ignoredFilesType": "re",
        "name": "",
        "x": 180,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "ed7130869ca109cd",
        "type": "file in",
        "z": "2c32c57ee0c89b2b",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 260,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "357aacfaa5c4a2b1",
        "type": "split",
        "z": "2c32c57ee0c89b2b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 370,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "923f2c158999dfe0",
        "type": "function",
        "z": "2c32c57ee0c89b2b",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "65d52cd6f95c0ef8",
        "type": "exec",
        "z": "2c32c57ee0c89b2b",
        "command": "",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 970,
        "y": 580,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "e10e07d941af72f0",
        "type": "simple-queue",
        "z": "2c32c57ee0c89b2b",
        "name": "",
        "count": 4,
        "unique_check": "",
        "x": 540,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "5d2f6b07beca7a27",
        "type": "trigger",
        "z": "610fd5cf8138bd6d",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 500,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b72a72cc3b3d8ab6",
        "type": "pythonshell in",
        "z": "610fd5cf8138bd6d",
        "name": "",
        "pyfile": "",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 760,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "4a312f7b0984b364",
        "type": "exec",
        "z": "44cf1917690496d8",
        "command": "/opt/hayabusa/./hayabusa ",
        "addpay": "hayabusa_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Hayabusa Evtx Process",
        "x": 330,
        "y": 180,
        "wires": [
            [],
            [],
            [
                "328f7d20e1b1a833",
                "88bbb0dccda88902"
            ]
        ]
    },
    {
        "id": "328f7d20e1b1a833",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "Evtx Process Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 200,
        "wires": [
            [
                "bf88463397855b7a",
                "88bbb0dccda88902"
            ],
            [
                "8f28d8c8efda634d"
            ]
        ]
    },
    {
        "id": "bf88463397855b7a",
        "type": "exec",
        "z": "44cf1917690496d8",
        "command": "timesketch_importer",
        "addpay": "hayabusa_ts",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Hayabusa data",
        "x": 820,
        "y": 140,
        "wires": [
            [],
            [],
            [
                "288080687e42e36c"
            ]
        ]
    },
    {
        "id": "2397e77a3c79fda3",
        "type": "link in",
        "z": "44cf1917690496d8",
        "name": "Input Evtx Process",
        "links": [
            "52415c7bb8e16c3a"
        ],
        "x": 155,
        "y": 180,
        "wires": [
            [
                "4a312f7b0984b364"
            ]
        ]
    },
    {
        "id": "288080687e42e36c",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "Hayabusa Out to Timesketch",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 160,
        "wires": [
            [
                "5e7cd7a03f986367"
            ],
            [
                "168748d31fb17282"
            ]
        ]
    },
    {
        "id": "8f28d8c8efda634d",
        "type": "link out",
        "z": "44cf1917690496d8",
        "name": "Hayabusa Error Out",
        "mode": "link",
        "links": [
            "4899ea50dd83351a"
        ],
        "x": 775,
        "y": 200,
        "wires": []
    },
    {
        "id": "168748d31fb17282",
        "type": "link out",
        "z": "44cf1917690496d8",
        "name": "Hayabusa to Timesketch Failure",
        "mode": "link",
        "links": [
            "4c538c90671aa59f"
        ],
        "x": 1325,
        "y": 260,
        "wires": []
    },
    {
        "id": "b303c561e5640afb",
        "type": "comment",
        "z": "44cf1917690496d8",
        "name": "Change Hayabusa Path here",
        "info": "",
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "88bbb0dccda88902",
        "type": "debug",
        "z": "44cf1917690496d8",
        "name": "Hayabusa Processed Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 60,
        "wires": []
    },
    {
        "id": "4ceb2f8e309e5dac",
        "type": "debug",
        "z": "44cf1917690496d8",
        "name": "APTHunter Processed Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 760,
        "wires": []
    },
    {
        "id": "3bc476f26a853220",
        "type": "exec",
        "z": "44cf1917690496d8",
        "command": "python3 /opt/APTHunter/APT-Hunter.py",
        "addpay": "apthunter_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "APTHunter Evtx Process",
        "x": 890,
        "y": 940,
        "wires": [
            [],
            [],
            [
                "9330a0840c187491",
                "4ceb2f8e309e5dac"
            ]
        ]
    },
    {
        "id": "9330a0840c187491",
        "type": "switch",
        "z": "44cf1917690496d8",
        "d": true,
        "name": "Evtx Process Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1320,
        "y": 940,
        "wires": [
            [
                "6983d19dbaa436ce",
                "4ceb2f8e309e5dac"
            ],
            []
        ]
    },
    {
        "id": "6983d19dbaa436ce",
        "type": "exec",
        "z": "44cf1917690496d8",
        "command": "timesketch_importer",
        "addpay": "hayabusa_ts",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest APTHunter data",
        "x": 1180,
        "y": 840,
        "wires": [
            [],
            [],
            [
                "64758bf9a853ea08"
            ]
        ]
    },
    {
        "id": "64758bf9a853ea08",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "APTHunter Out to Timesketch",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 840,
        "wires": [
            [],
            [
                "04540ea77b74e085"
            ]
        ]
    },
    {
        "id": "545d68826aaccc1f",
        "type": "function",
        "z": "44cf1917690496d8",
        "name": "KAPE APTHunter Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.kape = msg.dirname + '/C/Windows/System32/winevt/logs/';\nmsg.hayabusa_job = msg.plasofname + '-hayabusa';\nmsg.hayabusa_out = '/cases/evtxproc/' + msg.hayabusa_job;\nmsg.hayabusa_exec =  'csv-timeline -d ' +msg.kape+ ' --RFC-3339 -o ' + msg.hayabusa_out + '.csv' + ' -p timesketch-verbose -U --no-wizard'\nmsg.hayabusa_ts = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.hayabusa_job + \" --sketch_id \" + \"1 \" + msg.hayabusa_out + '.csv';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 780,
        "wires": [
            [
                "3bc476f26a853220"
            ]
        ]
    },
    {
        "id": "0a6dc408aa4493a9",
        "type": "function",
        "z": "44cf1917690496d8",
        "name": "VR APTHunter Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.collection = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs/';\nmsg.destination = '/cases/processor/host-triage';\nmsg.winevt = msg.destination +\"/\"+ msg.plasofname \n//msg.chainsaw_job = msg.plasofname + '-chainsaw';\n//msg.chainsaw_out = '/cases/evtxproc/chainsaw/';\nmsg.apthunter_exec = \"-p\" + msg.winevt + \" -o\" + \"Project1 -allreport\";\n//msg.apthunter_ts = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name chainsaw_antivirus\" + \" --sketch_id \" + \"1 \" + \"/cases/evtxproc/chainsaw/antivirus.csv\";\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 840,
        "wires": [
            [
                "6992cc02c66368f1"
            ]
        ]
    },
    {
        "id": "12adb6d01a3cc181",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "",
        "property": "dirname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "/kape/",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "/collection/",
                "vt": "msg",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 820,
        "wires": [
            [
                "545d68826aaccc1f"
            ],
            [
                "0a6dc408aa4493a9"
            ]
        ]
    },
    {
        "id": "759b33a1f760e6a4",
        "type": "debug",
        "z": "44cf1917690496d8",
        "name": "Chainsaw Processed Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 360,
        "wires": []
    },
    {
        "id": "d16c6f5299b56c8b",
        "type": "exec",
        "z": "44cf1917690496d8",
        "command": "/opt/chainsaw/./chainsaw ",
        "addpay": "chainsaw_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Chainsaw Evtx Process",
        "x": 650,
        "y": 400,
        "wires": [
            [],
            [],
            [
                "0fe5ad9ebca6b604",
                "759b33a1f760e6a4"
            ]
        ]
    },
    {
        "id": "0fe5ad9ebca6b604",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "Evtx Process Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 940,
        "y": 460,
        "wires": [
            [
                "759b33a1f760e6a4",
                "4a637e84a8bf980d"
            ],
            []
        ]
    },
    {
        "id": "669139136ac1b7d4",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "Chainsaw Out to Timesketch",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1400,
        "y": 380,
        "wires": [
            [
                "98de6e555668d6f0"
            ],
            []
        ]
    },
    {
        "id": "dca3a2c87c8b4346",
        "type": "function",
        "z": "44cf1917690496d8",
        "name": "KAPE Chainsaw Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.kape = msg.dirname + '/C/Windows/System32/winevt/logs/';\nmsg.chainsaw_job = + msg.plasofname + '-chainsaw';\nmsg.chainsaw_dir = msg.plasofname;\nmsg.chainsaw_files = '/cases/evtxproc/chainsaw/' + msg.plasofname + '/';\nmsg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.chainsaw_dir;\n//msg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.plasofname ;\nmsg.chainsaw_exec = 'hunt -q ' + msg.kape + ' -s /opt/chainsaw/sigma/ --mapping /opt/chainsaw/mappings/sigma-event-logs-all.yml -r /opt/chainsaw/rules/ --csv --output ' + msg.chainsaw_out;\nmsg.chainsaw_ts1 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_antivirus\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"antivirus.csv\";\nmsg.chainsaw_ts2 = \"-u dfir -p admin --host http://127.0.0.1 ---timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rds_events_-_user_profile_disk\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"microsoft_rds_events_-_user_profile_disk.csv\";\nmsg.chainsaw_ts3 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-hainsaw_powershell_script.\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"powershell_script.csv\";\nmsg.chainsaw_ts4 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_rdp_events\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"rdp_events.csv\";\nmsg.chainsaw_ts5 = \"-u dfir -p admin --host http://127.0.0.1 ---timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts6 = \"-u dfir -p admin --host http://127.0.0.1 ---timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_sigma\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"sigma.csv\";\nmsg.chainsaw_ts7 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_account_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"account_tampering.csv\";\nmsg.chainsaw_ts8 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_applocker\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"applocker.csv\";\nmsg.chainsaw_ts9 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_credential_access\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"credential_access.csv\";\nmsg.chainsaw_ts10 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_defensive_evasion\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"defensive_evasion.csv\";\nmsg.chainsaw_ts11 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_lateral_movement\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"lateral_movement.csv\";\nmsg.chainsaw_ts12 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_log_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"log_tampering.csv\";\nmsg.chainsaw_ts13 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_login_attacks\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"login_attacks.csv\";\nmsg.chainsaw_ts14 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rasvpn_events\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"microsoft_rasvpn_events.csv\";\nmsg.chainsaw_ts15 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts16 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_tampering.csv\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 360,
        "wires": [
            [
                "d16c6f5299b56c8b"
            ]
        ]
    },
    {
        "id": "5e7cd7a03f986367",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "",
        "property": "dirname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "/kape/",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "/collection/",
                "vt": "msg",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 400,
        "wires": [
            [
                "dca3a2c87c8b4346"
            ],
            [
                "a0545953c85952cf"
            ]
        ]
    },
    {
        "id": "04540ea77b74e085",
        "type": "link out",
        "z": "44cf1917690496d8",
        "name": "Hayabusa to Timesketch Out",
        "mode": "link",
        "links": [
            "c07a0968fd953921"
        ],
        "x": 1645,
        "y": 840,
        "wires": []
    },
    {
        "id": "a0545953c85952cf",
        "type": "function",
        "z": "44cf1917690496d8",
        "name": "VR Chainsaw Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.vr = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs/';\nmsg.chainsaw_job = + msg.plasofname + '-chainsaw';\nmsg.chainsaw_dir = msg.plasofname;\nmsg.chainsaw_files = '/cases/evtxproc/chainsaw/' + msg.plasofname +'/';\nmsg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.chainsaw_dir;\n//msg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.plasofname ;\nmsg.chainsaw_exec = 'hunt -q ' + msg.vr + ' -s /opt/chainsaw/sigma/ --mapping /opt/chainsaw/mappings/sigma-event-logs-all.yml -r /opt/chainsaw/rules/ --csv --output ' + msg.chainsaw_out;\nmsg.chainsaw_ts1 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_antivirus\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"antivirus.csv\";\nmsg.chainsaw_ts2 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rds_events_-_user_profile_disk\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"microsoft_rds_events_-_user_profile_disk.csv\";\nmsg.chainsaw_ts3 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-hainsaw_powershell_script.\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"powershell_script.csv\";\nmsg.chainsaw_ts4 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_rdp_events\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"rdp_events.csv\";\nmsg.chainsaw_ts5 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts6 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_sigma\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"sigma.csv\";\nmsg.chainsaw_ts7 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_account_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"account_tampering.csv\";\nmsg.chainsaw_ts8 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_applocker\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"applocker.csv\";\nmsg.chainsaw_ts9 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_credential_access\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"credential_access.csv\";\nmsg.chainsaw_ts10 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_defensive_evasion\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"defensive_evasion.csv\";\nmsg.chainsaw_ts11 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_lateral_movement\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"lateral_movement.csv\";\nmsg.chainsaw_ts12 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_log_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"log_tampering.csv\";\nmsg.chainsaw_ts13 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_login_attacks\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"login_attacks.csv\";\nmsg.chainsaw_ts14 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rasvpn_events\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"microsoft_rasvpn_events.csv\";\nmsg.chainsaw_ts15 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts16 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_tampering.csv\";\n\nreturn msg;\n\n\n// I MAY HAVE TO SPLIT THIS UP INTO Different nodes/functions",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 460,
        "wires": [
            [
                "bb69c0afc9f65daf"
            ]
        ]
    },
    {
        "id": "bb69c0afc9f65daf",
        "type": "exec",
        "z": "44cf1917690496d8",
        "command": "/opt/chainsaw/./chainsaw ",
        "addpay": "chainsaw_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Chainsaw Evtx Process",
        "x": 630,
        "y": 480,
        "wires": [
            [],
            [],
            [
                "0fe5ad9ebca6b604"
            ]
        ]
    },
    {
        "id": "4a637e84a8bf980d",
        "type": "link out",
        "z": "44cf1917690496d8",
        "name": "Chainsaw Process",
        "mode": "link",
        "links": [
            "193c7477c3b6a27e",
            "e610cc78abebc271"
        ],
        "x": 1105,
        "y": 540,
        "wires": []
    },
    {
        "id": "e610cc78abebc271",
        "type": "link in",
        "z": "44cf1917690496d8",
        "name": "Output Chainsaw Process",
        "links": [
            "4a637e84a8bf980d",
            "5df7b19905dc38a3"
        ],
        "x": 1195,
        "y": 440,
        "wires": [
            [
                "669139136ac1b7d4"
            ]
        ]
    },
    {
        "id": "c980c719a0572241",
        "type": "pythonshell in",
        "z": "44cf1917690496d8",
        "name": "APTHunter",
        "pyfile": "/opt/APTHunter/APT-Hunter.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 910,
        "y": 1180,
        "wires": [
            [
                "ce55e2611f3a469e"
            ]
        ]
    },
    {
        "id": "6992cc02c66368f1",
        "type": "fs-ops-dir",
        "z": "44cf1917690496d8",
        "name": "List Files",
        "path": "collection",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 420,
        "y": 1060,
        "wires": [
            [
                "7506a49c0dde33db"
            ]
        ]
    },
    {
        "id": "7506a49c0dde33db",
        "type": "split",
        "z": "44cf1917690496d8",
        "name": "Split Files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 1060,
        "wires": [
            [
                "86399266731c2f9d"
            ]
        ]
    },
    {
        "id": "c438e45a3b7fb5f9",
        "type": "fs-ops-copy",
        "z": "44cf1917690496d8",
        "name": "Copy File",
        "sourcePath": "collection",
        "sourcePathType": "msg",
        "sourceFilename": "payload",
        "sourceFilenameType": "msg",
        "destPath": "destination",
        "destPathType": "msg",
        "destFilename": "payload",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": false,
        "x": 1060,
        "y": 1060,
        "wires": [
            [
                "7a8a2543d32159b6"
            ]
        ]
    },
    {
        "id": "ce55e2611f3a469e",
        "type": "debug",
        "z": "44cf1917690496d8",
        "name": "Debug Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1140,
        "y": 1180,
        "wires": []
    },
    {
        "id": "86399266731c2f9d",
        "type": "fs-ops-mkdir",
        "z": "44cf1917690496d8",
        "name": "",
        "path": "destination",
        "pathType": "msg",
        "dirname": "plasofname",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "777",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 880,
        "y": 1060,
        "wires": [
            [
                "c438e45a3b7fb5f9"
            ]
        ]
    },
    {
        "id": "7a8a2543d32159b6",
        "type": "fs-ops-move",
        "z": "44cf1917690496d8",
        "name": "",
        "sourcePath": "destination",
        "sourcePathType": "msg",
        "sourceFilename": "payload",
        "sourceFilenameType": "msg",
        "destPath": "winevt",
        "destPathType": "msg",
        "destFilename": "payload",
        "destFilenameType": "msg",
        "link": false,
        "x": 1240,
        "y": 1060,
        "wires": [
            [
                "3bc476f26a853220"
            ]
        ]
    },
    {
        "id": "abf00e4f5fdb6ba6",
        "type": "function",
        "z": "44cf1917690496d8",
        "name": "APTHunter payload Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.collection = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs/';\nmsg.destination = '/cases/processor/host-triage';\nmsg.winevt = msg.destination +\"/\"+ msg.plasofname \nmsg.payload = \"-p\" + msg.winevt +  \"-o Project1 -allreport\";\n//msg.apthunter_ts = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name chainsaw_antivirus\" + \" --sketch_id \" + \"1 \" + \"/cases/evtxproc/chainsaw/antivirus.csv\";\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "c980c719a0572241"
            ]
        ]
    },
    {
        "id": "09c39bbb162ee413",
        "type": "comment",
        "z": "44cf1917690496d8",
        "name": "Notes on Python Execution and File relocation",
        "info": "",
        "x": 830,
        "y": 640,
        "wires": []
    },
    {
        "id": "98de6e555668d6f0",
        "type": "link out",
        "z": "44cf1917690496d8",
        "name": "Out to Hayabusa Process",
        "mode": "link",
        "links": [
            "c07a0968fd953921"
        ],
        "x": 1615,
        "y": 460,
        "wires": []
    },
    {
        "id": "193c7477c3b6a27e",
        "type": "link in",
        "z": "d75898983a7b91b1",
        "name": "Input Chainsaw Process",
        "links": [
            "4a637e84a8bf980d"
        ],
        "x": 375,
        "y": 200,
        "wires": [
            [
                "63786510530d725e"
            ]
        ]
    },
    {
        "id": "63786510530d725e",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts1",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 200,
        "wires": [
            [
                "f9a1dd21e7b8645f"
            ],
            [
                "f9a1dd21e7b8645f"
            ],
            [
                "ec1efb37c43fbd43",
                "f9a1dd21e7b8645f"
            ]
        ]
    },
    {
        "id": "ec1efb37c43fbd43",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts2",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "8743b99753d3ee55"
            ]
        ]
    },
    {
        "id": "8743b99753d3ee55",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts3",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "7bd0b2348de1be81"
            ]
        ]
    },
    {
        "id": "7bd0b2348de1be81",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts4",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "693ccad89f37d439"
            ]
        ]
    },
    {
        "id": "693ccad89f37d439",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts5",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 440,
        "wires": [
            [],
            [],
            [
                "6de398b6e054768b"
            ]
        ]
    },
    {
        "id": "6de398b6e054768b",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts6",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 500,
        "wires": [
            [],
            [],
            [
                "70ebb8d27023cf16"
            ]
        ]
    },
    {
        "id": "70ebb8d27023cf16",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts7",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 200,
        "wires": [
            [],
            [],
            [
                "a16377a967eb388f"
            ]
        ]
    },
    {
        "id": "a16377a967eb388f",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts8",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "5758cdb7864943bd"
            ]
        ]
    },
    {
        "id": "5758cdb7864943bd",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts9",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "552c9de55f6caf32"
            ]
        ]
    },
    {
        "id": "552c9de55f6caf32",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts10",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "2217bbe26c31e495"
            ]
        ]
    },
    {
        "id": "2217bbe26c31e495",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts11",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 440,
        "wires": [
            [],
            [],
            [
                "e33b6971ddeb266f"
            ]
        ]
    },
    {
        "id": "e33b6971ddeb266f",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts12",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 200,
        "wires": [
            [],
            [],
            [
                "a6de8bf632c19a3f"
            ]
        ]
    },
    {
        "id": "a6de8bf632c19a3f",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts13",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "702c6426ac77f8b3"
            ]
        ]
    },
    {
        "id": "702c6426ac77f8b3",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts14",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "aa64e446c118749c"
            ]
        ]
    },
    {
        "id": "aa64e446c118749c",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts15",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "24ff618a3f05e6e9"
            ]
        ]
    },
    {
        "id": "24ff618a3f05e6e9",
        "type": "exec",
        "z": "d75898983a7b91b1",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts16",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 440,
        "wires": [
            [],
            [
                "5df7b19905dc38a3"
            ],
            [
                "5df7b19905dc38a3"
            ]
        ]
    },
    {
        "id": "5df7b19905dc38a3",
        "type": "link out",
        "z": "d75898983a7b91b1",
        "name": "Output Chainsaw Process",
        "mode": "link",
        "links": [
            "e610cc78abebc271"
        ],
        "x": 1355,
        "y": 480,
        "wires": []
    },
    {
        "id": "f9a1dd21e7b8645f",
        "type": "debug",
        "z": "d75898983a7b91b1",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 620,
        "wires": []
    },
    {
        "id": "84d7cd3a2988674f",
        "type": "link in",
        "z": "018a08567380648f",
        "name": "E01 Process",
        "links": [
            "519e07706b40afdf"
        ],
        "x": 165,
        "y": 80,
        "wires": [
            [
                "b339a836f7ca03ae"
            ]
        ]
    },
    {
        "id": "ee130db70346c33f",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 1010,
        "y": 140,
        "wires": [
            [],
            [],
            [
                "c4d94f0203d8a451"
            ]
        ]
    },
    {
        "id": "b2bf11153e48a136",
        "type": "comment",
        "z": "018a08567380648f",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 670,
        "y": 100,
        "wires": []
    },
    {
        "id": "2bd019c605416de5",
        "type": "switch",
        "z": "018a08567380648f",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 360,
        "wires": [
            [
                "db693363311281a4"
            ],
            []
        ]
    },
    {
        "id": "b339a836f7ca03ae",
        "type": "function",
        "z": "018a08567380648f",
        "name": "Process E01",
        "func": "msg.payload = \"Processing E01 file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "dc4074416e6e3849"
            ]
        ]
    },
    {
        "id": "da564fec28f9243d",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 470,
        "y": 460,
        "wires": [
            [],
            [],
            [
                "fedc039bcdadc4c6"
            ]
        ]
    },
    {
        "id": "fedc039bcdadc4c6",
        "type": "switch",
        "z": "018a08567380648f",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 460,
        "wires": [
            [],
            [
                "ba84680f025893b0"
            ]
        ]
    },
    {
        "id": "ba84680f025893b0",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 460,
        "wires": []
    },
    {
        "id": "dc4074416e6e3849",
        "type": "function",
        "z": "018a08567380648f",
        "name": "E01 Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\n//var plasoname = msg.filename.toLowerCase();\nvar plasoname = msg.filename.split(\".\")[0].toLowerCase();\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasofname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "6971bb5a28eb4ede"
            ]
        ]
    },
    {
        "id": "6971bb5a28eb4ede",
        "type": "function",
        "z": "018a08567380648f",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "var plasodir = \"/cases/processor/\";\nvar plasofname = msg.plasoname.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\nmsg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + plasofname + msg.tstamp + \".plaso\" + \" \" + msg.filename;\nreturn msg;\n\n//var plasodir = \"/cases/plaso/\";\n//var plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\n//msg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\n//return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            [
                "ee130db70346c33f"
            ]
        ]
    },
    {
        "id": "db693363311281a4",
        "type": "function",
        "z": "018a08567380648f",
        "name": "Timesketch CLI params",
        "func": "//var plasoname = msg.plasoname\n//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\n//msg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.filename + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + plasofullpath;\n//return msg;\n\nvar plasofullpath = msg.plasoname.replace(\"/cases/processor/\", \"/cases/plaso/\") + msg.tstamp + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + plasofullpath + \"-triage\" + \" --sketch_id \" + \"1\" + \" \" + plasofullpath;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "da564fec28f9243d"
            ]
        ]
    },
    {
        "id": "c4d94f0203d8a451",
        "type": "function",
        "z": "018a08567380648f",
        "name": "Log2timeline psort - plaso to csv params",
        "func": "var plasodir = \"/cases/processor/\";\nvar plasofname = msg.plasoname.replace('processor', 'plaso');\nvar plasocsv = msg.plasoname.replace(\"/cases/processor/\", \"/cases/plaso/\") + msg.tstamp + \".plaso\";\n//var storageFilePath = plasoname + \".plaso\";\nmsg.psort = \"psort.py -o dynamic -w \" + plasofname + msg.tstamp + \".csv\" + \" \" + plasocsv;\nreturn msg;\n\n//var plasodir = \"/cases/plaso/\n//var plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\n//msg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\n//return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 260,
        "wires": [
            [
                "4c7fa5331782add3"
            ]
        ]
    },
    {
        "id": "4c7fa5331782add3",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "",
        "addpay": "psort",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline psort Process",
        "x": 690,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "2bd019c605416de5"
            ]
        ]
    },
    {
        "id": "236dcee18367a244",
        "type": "link in",
        "z": "ff0d2698d578dcb2",
        "name": "VHD Process",
        "links": [
            "dccc0af765f16871"
        ],
        "x": 75,
        "y": 80,
        "wires": [
            [
                "3fec1120718770d5"
            ]
        ]
    },
    {
        "id": "afd054c9ce723c46",
        "type": "exec",
        "z": "ff0d2698d578dcb2",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 1020,
        "y": 160,
        "wires": [
            [],
            [],
            [
                "e30d39af9819cc49",
                "d37dd7c3cf614ca9"
            ]
        ]
    },
    {
        "id": "e0294028f923f488",
        "type": "comment",
        "z": "ff0d2698d578dcb2",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 680,
        "y": 120,
        "wires": []
    },
    {
        "id": "e30d39af9819cc49",
        "type": "switch",
        "z": "ff0d2698d578dcb2",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 460,
        "wires": [
            [
                "1ce8f7382b57c43f"
            ],
            []
        ]
    },
    {
        "id": "7c4f79e10a45de36",
        "type": "exec",
        "z": "ff0d2698d578dcb2",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 400,
        "y": 560,
        "wires": [
            [],
            [],
            [
                "cff0d7c2eec2b311",
                "277219aa72300a53"
            ]
        ]
    },
    {
        "id": "cff0d7c2eec2b311",
        "type": "switch",
        "z": "ff0d2698d578dcb2",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 560,
        "wires": [
            [],
            [
                "b24f7182fb3ff677",
                "1c89f24e66f6ccb4"
            ]
        ]
    },
    {
        "id": "b24f7182fb3ff677",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 560,
        "wires": []
    },
    {
        "id": "870571f16ceb74b6",
        "type": "function",
        "z": "ff0d2698d578dcb2",
        "name": "VHD Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\n//var plasoname = msg.filename.toLowerCase();\nvar plasoname = msg.filename.split(\".\")[0].toLowerCase();\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasofname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [
            [
                "8549e96e32ac6fca"
            ]
        ]
    },
    {
        "id": "8549e96e32ac6fca",
        "type": "function",
        "z": "ff0d2698d578dcb2",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "var plasodir = \"/cases/processor/\";\nvar plasofname = msg.plasoname.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\nmsg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + plasofname + msg.tstamp + \".plaso\" + \" \" + msg.filename;\nreturn msg;\n\n//var plasodir = \"/cases/plaso/\";\n//var plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\n//msg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\n//return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "afd054c9ce723c46",
                "7d78c5083a03b982"
            ]
        ]
    },
    {
        "id": "1ce8f7382b57c43f",
        "type": "function",
        "z": "ff0d2698d578dcb2",
        "name": "Timesketch CLI params",
        "func": "//var plasoname = msg.plasoname\n//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\n//msg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.filename + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + plasofullpath;\n//return msg;\n\nvar plasofullpath = msg.plasoname.replace(\"/cases/processor/\", \"/cases/plaso/\") + msg.tstamp + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + plasofullpath + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + plasofullpath;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 480,
        "wires": [
            [
                "7c4f79e10a45de36",
                "24b2fbf9986967ee"
            ]
        ]
    },
    {
        "id": "a98cbd5e90fb896b",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 300,
        "wires": []
    },
    {
        "id": "7d78c5083a03b982",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 380,
        "wires": []
    },
    {
        "id": "d37dd7c3cf614ca9",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 360,
        "wires": []
    },
    {
        "id": "52b88928d028225c",
        "type": "function",
        "z": "ff0d2698d578dcb2",
        "d": true,
        "name": "VHD Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\nvar plasoname = msg.file.split(\".\")[0];\nvar filename = plasofname.toLowerCase();\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\nvar plasofname = filename + msg.tstamp + \"Z\";\nmsg.filename = plasoname.toLowerCase();\nmsg.plasoname = msg.filename\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "8549e96e32ac6fca"
            ]
        ]
    },
    {
        "id": "24b2fbf9986967ee",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 680,
        "wires": []
    },
    {
        "id": "277219aa72300a53",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 680,
        "wires": []
    },
    {
        "id": "1c89f24e66f6ccb4",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 680,
        "wires": []
    },
    {
        "id": "3fec1120718770d5",
        "type": "function",
        "z": "ff0d2698d578dcb2",
        "name": "Process VHD",
        "func": "msg.payload = \"Processing VHD file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 180,
        "wires": [
            [
                "870571f16ceb74b6",
                "52b88928d028225c"
            ]
        ]
    },
    {
        "id": "abc43a287b554b44",
        "type": "link in",
        "z": "a3bca09fa64d5135",
        "name": "VMDK Process",
        "links": [
            "5d88f249dc4c5a80"
        ],
        "x": 45,
        "y": 80,
        "wires": [
            [
                "22ca046e75b8e9d2"
            ]
        ]
    },
    {
        "id": "b34940a8958614e4",
        "type": "exec",
        "z": "a3bca09fa64d5135",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 900,
        "y": 160,
        "wires": [
            [],
            [],
            [
                "01c1d8b99c81072a"
            ]
        ]
    },
    {
        "id": "4295dc86f008a7a1",
        "type": "comment",
        "z": "a3bca09fa64d5135",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 620,
        "y": 100,
        "wires": []
    },
    {
        "id": "01c1d8b99c81072a",
        "type": "switch",
        "z": "a3bca09fa64d5135",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 220,
        "wires": [
            [],
            [
                "abb5b95994ba6a21"
            ]
        ]
    },
    {
        "id": "22ca046e75b8e9d2",
        "type": "function",
        "z": "a3bca09fa64d5135",
        "name": "Process VMDK",
        "func": "msg.payload = \"Processing VMDK file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 160,
        "wires": [
            [
                "8b805f689d8a9797"
            ]
        ]
    },
    {
        "id": "ddd73ab8d736dd78",
        "type": "exec",
        "z": "a3bca09fa64d5135",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 300,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "a546baa55d0427ca"
            ]
        ]
    },
    {
        "id": "a546baa55d0427ca",
        "type": "switch",
        "z": "a3bca09fa64d5135",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 320,
        "wires": [
            [],
            [
                "0f1c740a853f599c"
            ]
        ]
    },
    {
        "id": "0f1c740a853f599c",
        "type": "debug",
        "z": "a3bca09fa64d5135",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 320,
        "wires": []
    },
    {
        "id": "8b805f689d8a9797",
        "type": "function",
        "z": "a3bca09fa64d5135",
        "name": "VMDK Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.dirfile;\n\n// Setting up vars to handle archive decompress operations\nvar plasoname = msg.filename.toLowerCase();\n\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasoname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "970bf3b5f31665c1"
            ]
        ]
    },
    {
        "id": "970bf3b5f31665c1",
        "type": "function",
        "z": "a3bca09fa64d5135",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "//var plasodir = \"/cases/plaso/\";\nvar plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\nmsg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 160,
        "wires": [
            [
                "b34940a8958614e4"
            ]
        ]
    },
    {
        "id": "abb5b95994ba6a21",
        "type": "function",
        "z": "a3bca09fa64d5135",
        "name": "Timesketch CLI params",
        "func": "//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.plasoname + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + msg.plasoname + \".plaso\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            [
                "ddd73ab8d736dd78"
            ]
        ]
    },
    {
        "id": "1896b282f8d5a850",
        "type": "link in",
        "z": "bb185f14c626bdfb",
        "name": "VHDX Process",
        "links": [
            "1f168e07a0d53239"
        ],
        "x": 225,
        "y": 100,
        "wires": [
            [
                "a10941afa6864b64"
            ]
        ]
    },
    {
        "id": "7f58ebe8d0869039",
        "type": "exec",
        "z": "bb185f14c626bdfb",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 940,
        "y": 180,
        "wires": [
            [],
            [],
            [
                "e2456751ba44f0fa"
            ]
        ]
    },
    {
        "id": "4671dff25fbedda4",
        "type": "comment",
        "z": "bb185f14c626bdfb",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 660,
        "y": 120,
        "wires": []
    },
    {
        "id": "e2456751ba44f0fa",
        "type": "switch",
        "z": "bb185f14c626bdfb",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 240,
        "wires": [
            [],
            [
                "607a7ef1639dae0e"
            ]
        ]
    },
    {
        "id": "a10941afa6864b64",
        "type": "function",
        "z": "bb185f14c626bdfb",
        "name": "Process VHDX",
        "func": "msg.payload = \"Processing VHDX file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 180,
        "wires": [
            [
                "71208e0ed3297239"
            ]
        ]
    },
    {
        "id": "5d5208cf034a867e",
        "type": "exec",
        "z": "bb185f14c626bdfb",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 340,
        "y": 340,
        "wires": [
            [],
            [],
            [
                "76b81edbd03448f0"
            ]
        ]
    },
    {
        "id": "76b81edbd03448f0",
        "type": "switch",
        "z": "bb185f14c626bdfb",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 340,
        "wires": [
            [],
            [
                "21cde48ba5e15205"
            ]
        ]
    },
    {
        "id": "21cde48ba5e15205",
        "type": "debug",
        "z": "bb185f14c626bdfb",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "71208e0ed3297239",
        "type": "function",
        "z": "bb185f14c626bdfb",
        "name": "VHDX Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.dirfile;\n\n// Setting up vars to handle archive decompress operations\nvar plasoname = msg.filename.toLowerCase();\n\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasoname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "32cc197d33db7759"
            ]
        ]
    },
    {
        "id": "32cc197d33db7759",
        "type": "function",
        "z": "bb185f14c626bdfb",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "//var plasodir = \"/cases/plaso/\";\nvar plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\nmsg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "7f58ebe8d0869039"
            ]
        ]
    },
    {
        "id": "607a7ef1639dae0e",
        "type": "function",
        "z": "bb185f14c626bdfb",
        "name": "Timesketch CLI params",
        "func": "//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.plasoname + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + msg.plasoname + \".plaso\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "5d5208cf034a867e"
            ]
        ]
    },
    {
        "id": "9d715d28b4a932ae",
        "type": "switch",
        "z": "7fd75b92004ac098",
        "name": "Archive Type Detection",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.zip",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.7z",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.rar",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.tar.(gz|bz2)",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "d9d0bb7a8c9d16a9"
            ],
            [
                "825f610d85bddb87"
            ],
            [
                "9dc3e97d270d3bca"
            ],
            [
                "321a066cb61974a2"
            ],
            [
                "4a4338d66ea93999"
            ]
        ]
    },
    {
        "id": "bb4beaa62a0d33db",
        "type": "link in",
        "z": "7fd75b92004ac098",
        "name": "Identify Archive Type",
        "links": [
            "b6ecf5f15136a82b"
        ],
        "x": 115,
        "y": 160,
        "wires": [
            [
                "9d715d28b4a932ae"
            ]
        ]
    },
    {
        "id": "4a4338d66ea93999",
        "type": "debug",
        "z": "7fd75b92004ac098",
        "name": "Unsupported Archive Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 320,
        "wires": []
    },
    {
        "id": "d9d0bb7a8c9d16a9",
        "type": "exec",
        "z": "7fd75b92004ac098",
        "command": "unzip  -t",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "Zip Integrity Check",
        "x": 530,
        "y": 80,
        "wires": [
            [],
            [],
            [
                "71315e8395335c88"
            ]
        ]
    },
    {
        "id": "71315e8395335c88",
        "type": "switch",
        "z": "7fd75b92004ac098",
        "name": "Integrity Check Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 820,
        "y": 140,
        "wires": [
            [
                "3a6757a824d0b781"
            ],
            [
                "ee98b2b95731d016"
            ]
        ]
    },
    {
        "id": "ee98b2b95731d016",
        "type": "debug",
        "z": "7fd75b92004ac098",
        "name": "Archive Integrity Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 180,
        "wires": []
    },
    {
        "id": "825f610d85bddb87",
        "type": "exec",
        "z": "7fd75b92004ac098",
        "command": "7z t",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "7z Integrity Check",
        "x": 530,
        "y": 140,
        "wires": [
            [],
            [],
            [
                "71315e8395335c88"
            ]
        ]
    },
    {
        "id": "321a066cb61974a2",
        "type": "exec",
        "z": "7fd75b92004ac098",
        "command": "tar -tf",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "Tar Gz or Bz2 Integrity Check",
        "x": 560,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "71315e8395335c88"
            ]
        ]
    },
    {
        "id": "3a6757a824d0b781",
        "type": "link out",
        "z": "7fd75b92004ac098",
        "name": "Integrity Check Passed",
        "mode": "link",
        "links": [
            "65e9ad454afcf6d1"
        ],
        "x": 1055,
        "y": 100,
        "wires": []
    },
    {
        "id": "9dc3e97d270d3bca",
        "type": "exec",
        "z": "7fd75b92004ac098",
        "command": "unrar t",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "WinRAR Integrity Check",
        "x": 550,
        "y": 200,
        "wires": [
            [],
            [],
            [
                "71315e8395335c88"
            ]
        ]
    },
    {
        "id": "5fd92537b38314b0",
        "type": "link in",
        "z": "bc372fc61e93398a",
        "name": "DecompressIn",
        "links": [
            "f1ea48448bbde595"
        ],
        "x": 215,
        "y": 160,
        "wires": [
            [
                "7f64c3e43c1af844"
            ]
        ]
    },
    {
        "id": "7f64c3e43c1af844",
        "type": "switch",
        "z": "bc372fc61e93398a",
        "name": "Decompress Archive",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.zip",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.7z",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.rar",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.tar.gz",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.tar.bz2",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 400,
        "y": 160,
        "wires": [
            [
                "4a960a020b633b75"
            ],
            [
                "ea681456f4cd7b62"
            ],
            [
                "9f812794c347bcfc"
            ],
            [
                "f534bd58ca16b78c"
            ],
            [
                "6516971a7534de22"
            ],
            [
                "095af03c967a27c6"
            ]
        ]
    },
    {
        "id": "095af03c967a27c6",
        "type": "debug",
        "z": "bc372fc61e93398a",
        "name": "Unsupported File Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 340,
        "wires": []
    },
    {
        "id": "4a960a020b633b75",
        "type": "exec",
        "z": "bc372fc61e93398a",
        "command": "unzip",
        "addpay": "unzipcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Unzip Decompress",
        "x": 650,
        "y": 40,
        "wires": [
            [],
            [],
            [
                "e8aed768bff52623"
            ]
        ]
    },
    {
        "id": "ea681456f4cd7b62",
        "type": "exec",
        "z": "bc372fc61e93398a",
        "command": "7z",
        "addpay": "sevzipcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "7zip Decompress",
        "x": 650,
        "y": 100,
        "wires": [
            [],
            [],
            [
                "e8aed768bff52623"
            ]
        ]
    },
    {
        "id": "f534bd58ca16b78c",
        "type": "exec",
        "z": "bc372fc61e93398a",
        "command": "tar",
        "addpay": "targzcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "TarGzip Decompress",
        "x": 660,
        "y": 220,
        "wires": [
            [],
            [],
            [
                "e8aed768bff52623"
            ]
        ]
    },
    {
        "id": "e8aed768bff52623",
        "type": "link out",
        "z": "bc372fc61e93398a",
        "name": "Decompress Status Out",
        "mode": "link",
        "links": [
            "a9c3989928f3fee0"
        ],
        "x": 955,
        "y": 100,
        "wires": []
    },
    {
        "id": "9f812794c347bcfc",
        "type": "exec",
        "z": "bc372fc61e93398a",
        "command": "unrar",
        "addpay": "unrarcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "WinRAR Decompress",
        "x": 660,
        "y": 160,
        "wires": [
            [],
            [],
            [
                "e8aed768bff52623"
            ]
        ]
    },
    {
        "id": "6516971a7534de22",
        "type": "exec",
        "z": "bc372fc61e93398a",
        "command": "tar",
        "addpay": "tarbz2cli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "TarBzip2 Decompress",
        "x": 660,
        "y": 280,
        "wires": [
            [],
            [],
            [
                "e8aed768bff52623"
            ]
        ]
    },
    {
        "id": "fd446b54.5da24",
        "type": "ui_button",
        "z": "9583b8de.96bc48",
        "name": "",
        "group": "2fb9c205.dae50e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "click me",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "topicType": "str",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "9569387b.fc24f",
                "103477f0.45b588",
                "b7e35051.2b75b",
                "3375341f.88f7e4"
            ]
        ]
    },
    {
        "id": "103477f0.45b588",
        "type": "ui_text",
        "z": "9583b8de.96bc48",
        "group": "2fb9c205.dae50e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Click Here !",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "9569387b.fc24f",
        "type": "debug",
        "z": "9583b8de.96bc48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 390,
        "y": 200,
        "wires": []
    },
    {
        "id": "3692c3e.596783c",
        "type": "ui_gauge",
        "z": "9583b8de.96bc48",
        "name": "",
        "group": "122a9c51.bdf31c",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gauge",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "75",
        "seg2": "150",
        "x": 370,
        "y": 380,
        "wires": []
    },
    {
        "id": "b5c97926.f8f0e",
        "type": "ui_slider",
        "z": "9583b8de.96bc48",
        "name": "",
        "label": "slider",
        "tooltip": "",
        "group": "122a9c51.bdf31c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "200",
        "step": 1,
        "x": 130,
        "y": 380,
        "wires": [
            [
                "3692c3e.596783c",
                "be838f3e.6af14",
                "da3a316d.a4e43"
            ]
        ]
    },
    {
        "id": "be838f3e.6af14",
        "type": "ui_chart",
        "z": "9583b8de.96bc48",
        "name": "",
        "group": "122a9c51.bdf31c",
        "order": 3,
        "width": "0",
        "height": "0",
        "label": "line chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "200",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 360,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "da3a316d.a4e43",
        "type": "ui_chart",
        "z": "9583b8de.96bc48",
        "name": "",
        "group": "122a9c51.bdf31c",
        "order": 4,
        "width": "0",
        "height": "0",
        "label": "bar chart",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "200",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 360,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b7e35051.2b75b",
        "type": "ui_toast",
        "z": "9583b8de.96bc48",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "topic": "",
        "name": "",
        "x": 370,
        "y": 280,
        "wires": []
    },
    {
        "id": "3375341f.88f7e4",
        "type": "ui_audio",
        "z": "9583b8de.96bc48",
        "name": "",
        "group": "2fb9c205.dae50e",
        "voice": "en-US",
        "always": "",
        "x": 360,
        "y": 60,
        "wires": []
    },
    {
        "id": "8399a57bab81eb9c",
        "type": "debug",
        "z": "9583b8de.96bc48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1030,
        "y": 200,
        "wires": []
    },
    {
        "id": "5ff66e4126d25d44",
        "type": "ui_chart",
        "z": "9583b8de.96bc48",
        "name": "",
        "group": "baa4830e.d51ff",
        "order": 0,
        "width": "8",
        "height": "6",
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1010,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e76adff124a6a4ab",
        "type": "inject",
        "z": "9583b8de.96bc48",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 120,
        "wires": [
            [
                "0ffd8ea468f69494"
            ]
        ]
    },
    {
        "id": "0ffd8ea468f69494",
        "type": "ui_switch",
        "z": "9583b8de.96bc48",
        "name": "",
        "label": "switch",
        "tooltip": "",
        "group": "6d02446b.841c64",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 870,
        "y": 120,
        "wires": [
            [
                "2d653edab64fbfcc"
            ]
        ]
    },
    {
        "id": "2d653edab64fbfcc",
        "type": "switch",
        "z": "9583b8de.96bc48",
        "name": "Switch On",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1020,
        "y": 120,
        "wires": [
            [
                "5397fa49fa8d8e23"
            ]
        ]
    },
    {
        "id": "5fb1c1c36b5bda03",
        "type": "template",
        "z": "9583b8de.96bc48",
        "name": "Alert",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: CPU {{topic}} is {{payload}}%",
        "output": "str",
        "x": 1130,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "204f5bc415e4a099",
        "type": "switch",
        "z": "9583b8de.96bc48",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "50",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1010,
        "y": 320,
        "wires": [
            [
                "5fb1c1c36b5bda03"
            ]
        ]
    },
    {
        "id": "417ea31b459acc2d",
        "type": "ui_gauge",
        "z": "9583b8de.96bc48",
        "name": "",
        "group": "3d630fa8.8d0d68",
        "order": 0,
        "width": "0",
        "height": "0",
        "gtype": "gage",
        "title": "CPU 1",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1190,
        "y": 380,
        "wires": []
    },
    {
        "id": "30dff5326495515e",
        "type": "switch",
        "z": "9583b8de.96bc48",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "core_1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "core_2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "core_3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "core_4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1010,
        "y": 440,
        "wires": [
            [
                "417ea31b459acc2d"
            ],
            [
                "aa625cb62eb5db76"
            ],
            [
                "2d8383a4a9af660e"
            ],
            [
                "d219fb022ebb18c7"
            ]
        ]
    },
    {
        "id": "aa625cb62eb5db76",
        "type": "ui_gauge",
        "z": "9583b8de.96bc48",
        "name": "",
        "group": "3d630fa8.8d0d68",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "CPU 2",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1190,
        "y": 420,
        "wires": []
    },
    {
        "id": "2d8383a4a9af660e",
        "type": "ui_gauge",
        "z": "9583b8de.96bc48",
        "name": "",
        "group": "3d630fa8.8d0d68",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "CPU 3",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1190,
        "y": 460,
        "wires": []
    },
    {
        "id": "d219fb022ebb18c7",
        "type": "ui_gauge",
        "z": "9583b8de.96bc48",
        "name": "",
        "group": "3d630fa8.8d0d68",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "CPU 4",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1190,
        "y": 500,
        "wires": []
    },
    {
        "id": "5397fa49fa8d8e23",
        "type": "cpu",
        "z": "9583b8de.96bc48",
        "name": "",
        "msgCore": true,
        "msgOverall": false,
        "msgArray": false,
        "msgTemp": false,
        "x": 810,
        "y": 260,
        "wires": [
            [
                "8399a57bab81eb9c",
                "5ff66e4126d25d44",
                "204f5bc415e4a099",
                "30dff5326495515e"
            ]
        ]
    },
    {
        "id": "1e9d7bc0.fcb984",
        "type": "debug",
        "z": "90da6d14.cc65d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 140,
        "wires": []
    },
    {
        "id": "d274050d.badb88",
        "type": "ui_chart",
        "z": "90da6d14.cc65d8",
        "name": "",
        "group": "baa4830e.d51ff",
        "order": 0,
        "width": "8",
        "height": "6",
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 410,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "968d0d83.26b41",
        "type": "inject",
        "z": "90da6d14.cc65d8",
        "name": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "4b6874aa.19c8d4"
            ]
        ]
    },
    {
        "id": "4b6874aa.19c8d4",
        "type": "ui_switch",
        "z": "90da6d14.cc65d8",
        "name": "",
        "label": "switch",
        "tooltip": "",
        "group": "6d02446b.841c64",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 270,
        "y": 60,
        "wires": [
            [
                "7697565f.2e6618"
            ]
        ]
    },
    {
        "id": "7697565f.2e6618",
        "type": "switch",
        "z": "90da6d14.cc65d8",
        "name": "Switch On",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 60,
        "wires": [
            [
                "ed89ea38.72527"
            ]
        ]
    },
    {
        "id": "f12ff5fc.0fc79",
        "type": "ui_toast",
        "z": "90da6d14.cc65d8",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 690,
        "y": 260,
        "wires": []
    },
    {
        "id": "2b2616b0.28443a",
        "type": "template",
        "z": "90da6d14.cc65d8",
        "name": "Alert",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: CPU {{topic}} is {{payload}}%",
        "output": "str",
        "x": 530,
        "y": 260,
        "wires": [
            [
                "f12ff5fc.0fc79"
            ]
        ]
    },
    {
        "id": "3af072a3.14a1ce",
        "type": "switch",
        "z": "90da6d14.cc65d8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "50",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 410,
        "y": 260,
        "wires": [
            [
                "2b2616b0.28443a"
            ]
        ]
    },
    {
        "id": "36c7bd83.27b4f2",
        "type": "ui_gauge",
        "z": "90da6d14.cc65d8",
        "name": "",
        "group": "3d630fa8.8d0d68",
        "order": 0,
        "width": "0",
        "height": "0",
        "gtype": "gage",
        "title": "CPU 1",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 590,
        "y": 320,
        "wires": []
    },
    {
        "id": "29073f22.c591c8",
        "type": "switch",
        "z": "90da6d14.cc65d8",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "core_1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "core_2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "core_3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "core_4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 410,
        "y": 380,
        "wires": [
            [
                "36c7bd83.27b4f2"
            ],
            [
                "b3ee09cd.598f48"
            ],
            [
                "1ab8d355.16ca75"
            ],
            [
                "8bd46bad.a915f"
            ]
        ]
    },
    {
        "id": "b3ee09cd.598f48",
        "type": "ui_gauge",
        "z": "90da6d14.cc65d8",
        "name": "",
        "group": "3d630fa8.8d0d68",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "CPU 2",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 590,
        "y": 360,
        "wires": []
    },
    {
        "id": "1ab8d355.16ca75",
        "type": "ui_gauge",
        "z": "90da6d14.cc65d8",
        "name": "",
        "group": "3d630fa8.8d0d68",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "CPU 3",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 590,
        "y": 400,
        "wires": []
    },
    {
        "id": "8bd46bad.a915f",
        "type": "ui_gauge",
        "z": "90da6d14.cc65d8",
        "name": "",
        "group": "3d630fa8.8d0d68",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "CPU 4",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 590,
        "y": 440,
        "wires": []
    },
    {
        "id": "ed89ea38.72527",
        "type": "cpu",
        "z": "90da6d14.cc65d8",
        "name": "",
        "msgCore": true,
        "msgOverall": false,
        "msgArray": false,
        "msgTemp": false,
        "x": 210,
        "y": 200,
        "wires": [
            [
                "1e9d7bc0.fcb984",
                "d274050d.badb88",
                "3af072a3.14a1ce",
                "29073f22.c591c8"
            ]
        ]
    },
    {
        "id": "a9be280c.f004d8",
        "type": "inject",
        "z": "9b46958.ce6a368",
        "name": "Every 5 sec",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "c5bf6cce.78d2f"
            ]
        ]
    },
    {
        "id": "ed24894e.c2707",
        "type": "http request",
        "z": "9b46958.ce6a368",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "http://api.open-notify.org/iss-now.json",
        "tls": "",
        "x": 610,
        "y": 100,
        "wires": [
            [
                "4a06a917.1074b8",
                "4586a2ff.c4e2ac"
            ]
        ]
    },
    {
        "id": "4a06a917.1074b8",
        "type": "debug",
        "z": "9b46958.ce6a368",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 810,
        "y": 100,
        "wires": []
    },
    {
        "id": "4586a2ff.c4e2ac",
        "type": "function",
        "z": "9b46958.ce6a368",
        "name": "Extract ISS Location",
        "func": "var iss_location = msg.payload.iss_position;\n\nmsg.payload = { \n        name : \"International Space Station\",\n        lat  : parseFloat(iss_location.latitude),\n        lon  : parseFloat(iss_location.longitude),\n        icon: \"iss\",\n        iconColor:'#900000',\n        command : { \"zoom\" : 3 }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 280,
        "wires": [
            [
                "8a2f98ed.cbbb08",
                "9d017892.d58c28",
                "991ab523.dc1c78"
            ]
        ]
    },
    {
        "id": "8a2f98ed.cbbb08",
        "type": "debug",
        "z": "9b46958.ce6a368",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 410,
        "y": 320,
        "wires": []
    },
    {
        "id": "c5f1b810.713fc",
        "type": "comment",
        "z": "9b46958.ce6a368",
        "name": "Query the location of the International Space Station",
        "info": "",
        "x": 234.44444444444446,
        "y": 64.44444444444443,
        "wires": []
    },
    {
        "id": "c5bf6cce.78d2f",
        "type": "ui_switch",
        "z": "9b46958.ce6a368",
        "name": "",
        "label": "switch",
        "tooltip": "",
        "group": "9813997d.68df88",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 290,
        "y": 100,
        "wires": [
            [
                "facf4978.0c9fc8"
            ]
        ]
    },
    {
        "id": "facf4978.0c9fc8",
        "type": "switch",
        "z": "9b46958.ce6a368",
        "name": "Switch On",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 440,
        "y": 100,
        "wires": [
            [
                "ed24894e.c2707"
            ]
        ]
    },
    {
        "id": "9d017892.d58c28",
        "type": "worldmap-tracks",
        "z": "9b46958.ce6a368",
        "name": "",
        "depth": "100",
        "x": 410,
        "y": 240,
        "wires": [
            [
                "991ab523.dc1c78"
            ]
        ]
    },
    {
        "id": "991ab523.dc1c78",
        "type": "ui_worldmap",
        "z": "9b46958.ce6a368",
        "group": "66464e0a.235a1",
        "order": 0,
        "width": "15",
        "height": "15",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "5",
        "layer": "Esri Satellite",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "path": "/worldmap",
        "x": 560,
        "y": 280,
        "wires": []
    },
    {
        "id": "b7c88334044d2442",
        "type": "ui-form",
        "z": "21f1b2aeb83d507c",
        "name": "",
        "group": "f5c2b7111eeb7ab2",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Title",
                "key": "title",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Description",
                "key": "description",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Due Date",
                "key": "due",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Is Priority",
                "key": "priority",
                "type": "switch",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "title": "",
            "description": "",
            "due": "",
            "priority": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "resetOnSubmit": true,
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 370,
        "y": 220,
        "wires": [
            [
                "0079bf7797296143",
                "65e68efe103bc565"
            ]
        ]
    },
    {
        "id": "8be707bb34ed9421",
        "type": "ui-notification",
        "z": "21f1b2aeb83d507c",
        "ui": "cb79bc4520925e32",
        "position": "top right",
        "colorDefault": false,
        "color": "#1bde42",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 0,
        "allowDismiss": true,
        "dismissText": "Close",
        "raw": false,
        "className": "",
        "name": "",
        "x": 750,
        "y": 240,
        "wires": []
    },
    {
        "id": "0079bf7797296143",
        "type": "change",
        "z": "21f1b2aeb83d507c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Thanks for submitting a task",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 240,
        "wires": [
            [
                "8be707bb34ed9421"
            ]
        ]
    },
    {
        "id": "fc8d2438da464532",
        "type": "ui-template",
        "z": "21f1b2aeb83d507c",
        "group": "",
        "page": "",
        "ui": "cb79bc4520925e32",
        "name": "User Info (top-right)",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <Teleport v-if=\"loaded\" to=\"#app-bar-actions\">\n        <div class=\"user-info\">\n            <img :src=\"setup.socketio.auth.user.image\" />\n            <span>Hi, {{ setup.socketio.auth.user.name }}!</span>\n        </div>\n    </Teleport>\n</template>\n\n<script>\n    export default {\n    data () {\n        return {\n            loaded: false\n        }\n    },\n    mounted() {\n        // code here when the component is first loaded\n        console.log('on mounted')\n        console.log(this.$store.state.setup?.setup?.socketio?.auth.user)\n        this.loaded = true\n    }\n}\n</script>\n\n<style>\n    .user-info {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n    }\n\n    .user-info img {\n        width: 24px;\n        height: 24px;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "widget:ui",
        "className": "",
        "x": 410,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "65e68efe103bc565",
        "type": "function",
        "z": "21f1b2aeb83d507c",
        "name": "Store Form Entry",
        "func": "const tasks = global.get(\"tasks\") || []\n\n// merge the form data with the _client.user\ntasks.push({\n    ...msg.payload,\n    ... {\n        user: msg._client.user\n    }\n})\n\n// set this to a global variable \nglobal.set(\"tasks\", tasks)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "13e96e85f55ecd1d",
        "type": "ui-template",
        "z": "21f1b2aeb83d507c",
        "group": "0d8bb4422190121d",
        "page": "",
        "ui": "",
        "name": "Tasks List",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <!-- Provide an input text box to search the content -->\n    <v-text-field v-model=\"search\" label=\"Search\" prepend-inner-icon=\"mdi-magnify\" single-line variant=\"outlined\"\n    hide-details></v-text-field>\n    <v-data-table v-model:search=\"search\" :items=\"msg?.payload\">\n      <template v-slot:header.current>\n        <!-- Override how we render the header for the \"current\" column -->\n        <div class=\"text-center\">Center-Aligned</div>\n      </template>\n      \n      <template v-slot:item.priority=\"{ item }\">\n        <v-icon v-if=\"item.priority\" icon=\"mdi-alert\" color=\"red\"></v-icon>\n      </template>\n\n      <template v-slot:item.user=\"{ item }\">\n        <!-- Add a custom suffix to the value for the \"target\" column -->\n        <div class=\"user-info\">\n            <img :src=\"item.user.image\" />\n            <span>{{ item.user.username }}</span>\n        </div>\n      </template>\n\n      <template v-slot:item.due=\"{ item }\">\n        {{ daysBetween(item.due, new Date())}} Days\n      </template>\n    \n    </v-data-table>\n</template>\n\n<script>\n    export default {\n    data () {\n      return {\n        search: ''\n      }\n    },\n    methods: {\n        // add a function to determine the color of the progress bar given the row's item\n        getColor: function (item) {\n          if (item.current > item.target) {\n            return 'red'\n          } else {\n            return 'green'\n          }\n        },\n        daysBetween(date1, date2) {\n            // Convert both dates to milliseconds\n            var date1_ms = new Date(date1).getTime();\n            var date2_ms = new Date(date2).getTime();\n            \n            // Calculate the difference in milliseconds\n            var difference_ms = Math.abs(date1_ms - date2_ms);\n            \n            // Convert back to days and return\n            return Math.round(difference_ms / (1000 * 60 * 60 * 24));\n        }\n    }\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1040,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "bdc084bff2615fb0",
        "type": "ui-event",
        "z": "21f1b2aeb83d507c",
        "ui": "cb79bc4520925e32",
        "name": "",
        "x": 380,
        "y": 380,
        "wires": [
            [
                "430be0411268db42",
                "dddb1c95f1be3a69",
                "bb0cbe58cd80129a",
                "817e3b341f4b02c6"
            ]
        ]
    },
    {
        "id": "f2f8c446e3f24f39",
        "type": "change",
        "z": "21f1b2aeb83d507c",
        "name": "Load Tasks from Global",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "tasks",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 340,
        "wires": [
            [
                "13e96e85f55ecd1d"
            ]
        ]
    },
    {
        "id": "430be0411268db42",
        "type": "switch",
        "z": "21f1b2aeb83d507c",
        "name": "$pageview: Admin View",
        "property": "payload.page.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Admin View",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 340,
        "wires": [
            [
                "f2f8c446e3f24f39"
            ]
        ]
    },
    {
        "id": "e8c2f792a7a98233",
        "type": "ui-template",
        "z": "21f1b2aeb83d507c",
        "group": "b362eb01162ac195",
        "page": "",
        "ui": "",
        "name": "Tasks List",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <!-- Provide an input text box to search the content -->\n    <v-text-field v-model=\"search\" label=\"Search\" prepend-inner-icon=\"mdi-magnify\" single-line variant=\"outlined\"\n    hide-details></v-text-field>\n    <v-data-table v-model:search=\"search\" :items=\"msg?.payload\">\n      <template v-slot:header.current>\n        <!-- Override how we render the header for the \"current\" column -->\n        <div class=\"text-center\">Center-Aligned</div>\n      </template>\n\n      <template v-slot:item.user=\"{ item }\">\n        <!-- Add a custom suffix to the value for the \"target\" column -->\n        {{ item.user.username }}\n      </template>\n\n      <template v-slot:item.due=\"{ item }\">\n        {{ item.due }}\n        <!-- <v-progress-linear v-model=\"item.current\" min=\"15\" max=\"25\" height=\"25\" :color=\"getColor(item)\">\n          <template v-slot:default=\"{ value }\">\n            <strong>{{ item.current }}°C</strong>\n          </template>\n        </v-progress-linear> -->\n      </template>\n    \n    </v-data-table>\n</template>\n\n<script>\n    export default {\n    data () {\n      return {\n        search: ''\n      }\n    },\n    methods: {\n        // add a function to determine the color of the progress bar given the row's item\n      getColor: function (item) {\n        if (item.current > item.target) {\n          return 'red'\n        } else {\n          return 'green'\n        }\n      }\n    }\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1240,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "884934de8d0ac7b3",
        "type": "change",
        "z": "21f1b2aeb83d507c",
        "name": "Load Tasks from Global",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "tasks",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 420,
        "wires": [
            [
                "fdb08d99dd2bdadc"
            ]
        ]
    },
    {
        "id": "dddb1c95f1be3a69",
        "type": "switch",
        "z": "21f1b2aeb83d507c",
        "name": "$pageview: Your Tasks",
        "property": "payload.page.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Your Tasks",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 600,
        "y": 420,
        "wires": [
            [
                "884934de8d0ac7b3"
            ]
        ]
    },
    {
        "id": "fdb08d99dd2bdadc",
        "type": "function",
        "z": "21f1b2aeb83d507c",
        "name": "Filter Tasks to User",
        "func": "msg.payload = msg.payload?.filter((task) => {\n    return msg._client.user.username === task.user.username\n})\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 420,
        "wires": [
            [
                "e8c2f792a7a98233"
            ]
        ]
    },
    {
        "id": "bb0cbe58cd80129a",
        "type": "switch",
        "z": "21f1b2aeb83d507c",
        "name": "Is Admin User",
        "property": "admins",
        "propertyType": "global",
        "rules": [
            {
                "t": "cont",
                "v": "_client.user.username",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 500,
        "wires": [
            [
                "860a6512ff99ab69"
            ],
            [
                "80567e592f64f4df"
            ]
        ]
    },
    {
        "id": "d2d66c16c4bcc38a",
        "type": "ui-control",
        "z": "21f1b2aeb83d507c",
        "name": "",
        "ui": "cb79bc4520925e32",
        "events": "all",
        "x": 980,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "860a6512ff99ab69",
        "type": "change",
        "z": "21f1b2aeb83d507c",
        "name": "Show Admin Page",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"pages\":{\"show\":[\"Admin View\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 480,
        "wires": [
            [
                "d2d66c16c4bcc38a"
            ]
        ]
    },
    {
        "id": "80567e592f64f4df",
        "type": "change",
        "z": "21f1b2aeb83d507c",
        "name": "Hide Admin Page",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"pages\":{\"hide\":[\"Admin View\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 520,
        "wires": [
            [
                "d2d66c16c4bcc38a"
            ]
        ]
    },
    {
        "id": "b1f4e52a9025e398",
        "type": "inject",
        "z": "21f1b2aeb83d507c",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 970,
        "y": 120,
        "wires": [
            [
                "f1249167a24acf65"
            ]
        ]
    },
    {
        "id": "f1249167a24acf65",
        "type": "change",
        "z": "21f1b2aeb83d507c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "admins",
                "pt": "global",
                "to": "[\"admin-user\"]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "817e3b341f4b02c6",
        "type": "debug",
        "z": "21f1b2aeb83d507c",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 380,
        "wires": []
    },
    {
        "id": "7c13e5015b7c28c0",
        "type": "comment",
        "z": "21f1b2aeb83d507c",
        "name": "Define Admins Here",
        "info": "",
        "x": 990,
        "y": 80,
        "wires": []
    },
    {
        "id": "4615b9d913078624",
        "type": "comment",
        "z": "21f1b2aeb83d507c",
        "name": "Form Entry",
        "info": "",
        "x": 380,
        "y": 160,
        "wires": []
    },
    {
        "id": "48b4b84396d955dd",
        "type": "http in",
        "z": "29d4eba357840193",
        "name": "",
        "url": "/simple",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 350,
        "y": 220,
        "wires": [
            [
                "868a7d41f9b8a6f2"
            ]
        ]
    },
    {
        "id": "868a7d41f9b8a6f2",
        "type": "template",
        "z": "29d4eba357840193",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h1>Upload a file here:</h1>\n\n<form action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"myFile\" />\n    <input type=\"submit\" value=\"Submit\">\n</form>",
        "output": "str",
        "x": 690,
        "y": 220,
        "wires": [
            [
                "3e6697fa62384171"
            ]
        ]
    },
    {
        "id": "3e6697fa62384171",
        "type": "http response",
        "z": "29d4eba357840193",
        "name": "",
        "x": 830,
        "y": 220,
        "wires": []
    },
    {
        "id": "d8945da94181a082",
        "type": "comment",
        "z": "29d4eba357840193",
        "name": "Simple",
        "info": "",
        "x": 330,
        "y": 180,
        "wires": []
    },
    {
        "id": "26fd2ab5cb475520",
        "type": "http response",
        "z": "29d4eba357840193",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 340,
        "wires": []
    },
    {
        "id": "e36d116b261e2745",
        "type": "http in",
        "z": "29d4eba357840193",
        "name": "",
        "url": "/upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 350,
        "y": 280,
        "wires": [
            [
                "58342e2519dfa507"
            ]
        ]
    },
    {
        "id": "dc19f578d58edeb7",
        "type": "template",
        "z": "29d4eba357840193",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<p></p>File {{name}} uploaded !</p>\n\n<h2>Contents:</h2>\n\n<pre>\n{{{payload}}}\n</pre>",
        "output": "str",
        "x": 690,
        "y": 400,
        "wires": [
            [
                "26fd2ab5cb475520"
            ]
        ]
    },
    {
        "id": "58342e2519dfa507",
        "type": "function",
        "z": "29d4eba357840193",
        "name": "toBase64",
        "func": "msg.name = msg.req.files[0].originalname;\nmsg.filepath = \"/cases/processor/\" + msg.name;\nmsg.filedata = msg.req.files[0].buffer;\n\nif (msg.req.files[0].mimetype.includes('image')) {\n    msg.payload = `<img src=\"data:image/gif;base64,${msg.req.files[0].buffer.toString('base64')}\">`;\n} else {\n    msg.payload = msg.req.files[0].buffer.toString();\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 280,
        "wires": [
            [
                "62c433df07f1254f"
            ]
        ]
    },
    {
        "id": "62c433df07f1254f",
        "type": "file",
        "z": "29d4eba357840193",
        "name": "Write File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "binary",
        "x": 700,
        "y": 280,
        "wires": [
            [
                "dc19f578d58edeb7"
            ]
        ]
    },
    {
        "id": "bd23839aaa31f438",
        "type": "template",
        "z": "5fde894cc9253f03",
        "name": "dropzone.js",
        "field": "dropzonejs",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "\n/*\n *\n * More info at [www.dropzonejs.com](http://www.dropzonejs.com)\n *\n * Copyright (c) 2012, Matias Meno\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\n(function() {\n  var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,\n    __slice = [].slice,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  noop = function() {};\n\n  Emitter = (function() {\n    function Emitter() {}\n\n    Emitter.prototype.addEventListener = Emitter.prototype.on;\n\n    Emitter.prototype.on = function(event, fn) {\n      this._callbacks = this._callbacks || {};\n      if (!this._callbacks[event]) {\n        this._callbacks[event] = [];\n      }\n      this._callbacks[event].push(fn);\n      return this;\n    };\n\n    Emitter.prototype.emit = function() {\n      var args, callback, callbacks, event, _i, _len;\n      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      this._callbacks = this._callbacks || {};\n      callbacks = this._callbacks[event];\n      if (callbacks) {\n        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {\n          callback = callbacks[_i];\n          callback.apply(this, args);\n        }\n      }\n      return this;\n    };\n\n    Emitter.prototype.removeListener = Emitter.prototype.off;\n\n    Emitter.prototype.removeAllListeners = Emitter.prototype.off;\n\n    Emitter.prototype.removeEventListener = Emitter.prototype.off;\n\n    Emitter.prototype.off = function(event, fn) {\n      var callback, callbacks, i, _i, _len;\n      if (!this._callbacks || arguments.length === 0) {\n        this._callbacks = {};\n        return this;\n      }\n      callbacks = this._callbacks[event];\n      if (!callbacks) {\n        return this;\n      }\n      if (arguments.length === 1) {\n        delete this._callbacks[event];\n        return this;\n      }\n      for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {\n        callback = callbacks[i];\n        if (callback === fn) {\n          callbacks.splice(i, 1);\n          break;\n        }\n      }\n      return this;\n    };\n\n    return Emitter;\n\n  })();\n\n  Dropzone = (function(_super) {\n    var extend, resolveOption;\n\n    __extends(Dropzone, _super);\n\n    Dropzone.prototype.Emitter = Emitter;\n\n\n    /*\n    This is a list of all available events you can register on a dropzone object.\n    \n    You can register an event handler like this:\n    \n        dropzone.on(\"dragEnter\", function() { });\n     */\n\n    Dropzone.prototype.events = [\"drop\", \"dragstart\", \"dragend\", \"dragenter\", \"dragover\", \"dragleave\", \"addedfile\", \"addedfiles\", \"removedfile\", \"thumbnail\", \"error\", \"errormultiple\", \"processing\", \"processingmultiple\", \"uploadprogress\", \"totaluploadprogress\", \"sending\", \"sendingmultiple\", \"success\", \"successmultiple\", \"canceled\", \"canceledmultiple\", \"complete\", \"completemultiple\", \"reset\", \"maxfilesexceeded\", \"maxfilesreached\", \"queuecomplete\"];\n\n    Dropzone.prototype.defaultOptions = {\n      url: null,\n      method: \"post\",\n      withCredentials: false,\n      parallelUploads: 2,\n      uploadMultiple: false,\n      maxFilesize: 256,\n      paramName: \"file\",\n      createImageThumbnails: true,\n      maxThumbnailFilesize: 10,\n      thumbnailWidth: 120,\n      thumbnailHeight: 120,\n      filesizeBase: 1000,\n      maxFiles: null,\n      params: {},\n      clickable: true,\n      ignoreHiddenFiles: true,\n      acceptedFiles: null,\n      acceptedMimeTypes: null,\n      autoProcessQueue: true,\n      autoQueue: true,\n      addRemoveLinks: false,\n      previewsContainer: null,\n      hiddenInputContainer: \"body\",\n      capture: null,\n      renameFilename: null,\n      dictDefaultMessage: \"Drop files here to upload\",\n      dictFallbackMessage: \"Your browser does not support drag'n'drop file uploads.\",\n      dictFallbackText: \"Please use the fallback form below to upload your files like in the olden days.\",\n      dictFileTooBig: \"File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.\",\n      dictInvalidFileType: \"You can't upload files of this type.\",\n      dictResponseError: \"Server responded with {{statusCode}} code.\",\n      dictCancelUpload: \"Cancel upload\",\n      dictCancelUploadConfirmation: \"Are you sure you want to cancel this upload?\",\n      dictRemoveFile: \"Remove file\",\n      dictRemoveFileConfirmation: null,\n      dictMaxFilesExceeded: \"You can not upload any more files.\",\n      accept: function(file, done) {\n        return done();\n      },\n      init: function() {\n        return noop;\n      },\n      forceFallback: false,\n      fallback: function() {\n        var child, messageElement, span, _i, _len, _ref;\n        this.element.className = \"\" + this.element.className + \" dz-browser-not-supported\";\n        _ref = this.element.getElementsByTagName(\"div\");\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          child = _ref[_i];\n          if (/(^| )dz-message($| )/.test(child.className)) {\n            messageElement = child;\n            child.className = \"dz-message\";\n            continue;\n          }\n        }\n        if (!messageElement) {\n          messageElement = Dropzone.createElement(\"<div class=\\\"dz-message\\\"><span></span></div>\");\n          this.element.appendChild(messageElement);\n        }\n        span = messageElement.getElementsByTagName(\"span\")[0];\n        if (span) {\n          if (span.textContent != null) {\n            span.textContent = this.options.dictFallbackMessage;\n          } else if (span.innerText != null) {\n            span.innerText = this.options.dictFallbackMessage;\n          }\n        }\n        return this.element.appendChild(this.getFallbackForm());\n      },\n      resize: function(file) {\n        var info, srcRatio, trgRatio;\n        info = {\n          srcX: 0,\n          srcY: 0,\n          srcWidth: file.width,\n          srcHeight: file.height\n        };\n        srcRatio = file.width / file.height;\n        info.optWidth = this.options.thumbnailWidth;\n        info.optHeight = this.options.thumbnailHeight;\n        if ((info.optWidth == null) && (info.optHeight == null)) {\n          info.optWidth = info.srcWidth;\n          info.optHeight = info.srcHeight;\n        } else if (info.optWidth == null) {\n          info.optWidth = srcRatio * info.optHeight;\n        } else if (info.optHeight == null) {\n          info.optHeight = (1 / srcRatio) * info.optWidth;\n        }\n        trgRatio = info.optWidth / info.optHeight;\n        if (file.height < info.optHeight || file.width < info.optWidth) {\n          info.trgHeight = info.srcHeight;\n          info.trgWidth = info.srcWidth;\n        } else {\n          if (srcRatio > trgRatio) {\n            info.srcHeight = file.height;\n            info.srcWidth = info.srcHeight * trgRatio;\n          } else {\n            info.srcWidth = file.width;\n            info.srcHeight = info.srcWidth / trgRatio;\n          }\n        }\n        info.srcX = (file.width - info.srcWidth) / 2;\n        info.srcY = (file.height - info.srcHeight) / 2;\n        return info;\n      },\n\n      /*\n      Those functions register themselves to the events on init and handle all\n      the user interface specific stuff. Overwriting them won't break the upload\n      but can break the way it's displayed.\n      You can overwrite them if you don't like the default behavior. If you just\n      want to add an additional event handler, register it on the dropzone object\n      and don't overwrite those options.\n       */\n      drop: function(e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n      },\n      dragstart: noop,\n      dragend: function(e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n      },\n      dragenter: function(e) {\n        return this.element.classList.add(\"dz-drag-hover\");\n      },\n      dragover: function(e) {\n        return this.element.classList.add(\"dz-drag-hover\");\n      },\n      dragleave: function(e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n      },\n      paste: noop,\n      reset: function() {\n        return this.element.classList.remove(\"dz-started\");\n      },\n      addedfile: function(file) {\n        var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;\n        if (this.element === this.previewsContainer) {\n          this.element.classList.add(\"dz-started\");\n        }\n        if (this.previewsContainer) {\n          file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());\n          file.previewTemplate = file.previewElement;\n          this.previewsContainer.appendChild(file.previewElement);\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-name]\");\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            node = _ref[_i];\n            node.textContent = this._renameFilename(file.name);\n          }\n          _ref1 = file.previewElement.querySelectorAll(\"[data-dz-size]\");\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            node = _ref1[_j];\n            node.innerHTML = this.filesize(file.size);\n          }\n          if (this.options.addRemoveLinks) {\n            file._removeLink = Dropzone.createElement(\"<a class=\\\"dz-remove\\\" href=\\\"javascript:undefined;\\\" data-dz-remove>\" + this.options.dictRemoveFile + \"</a>\");\n            file.previewElement.appendChild(file._removeLink);\n          }\n          removeFileEvent = (function(_this) {\n            return function(e) {\n              e.preventDefault();\n              e.stopPropagation();\n              if (file.status === Dropzone.UPLOADING) {\n                return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {\n                  return _this.removeFile(file);\n                });\n              } else {\n                if (_this.options.dictRemoveFileConfirmation) {\n                  return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {\n                    return _this.removeFile(file);\n                  });\n                } else {\n                  return _this.removeFile(file);\n                }\n              }\n            };\n          })(this);\n          _ref2 = file.previewElement.querySelectorAll(\"[data-dz-remove]\");\n          _results = [];\n          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n            removeLink = _ref2[_k];\n            _results.push(removeLink.addEventListener(\"click\", removeFileEvent));\n          }\n          return _results;\n        }\n      },\n      removedfile: function(file) {\n        var _ref;\n        if (file.previewElement) {\n          if ((_ref = file.previewElement) != null) {\n            _ref.parentNode.removeChild(file.previewElement);\n          }\n        }\n        return this._updateMaxFilesReachedClass();\n      },\n      thumbnail: function(file, dataUrl) {\n        var thumbnailElement, _i, _len, _ref;\n        if (file.previewElement) {\n          file.previewElement.classList.remove(\"dz-file-preview\");\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-thumbnail]\");\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            thumbnailElement = _ref[_i];\n            thumbnailElement.alt = file.name;\n            thumbnailElement.src = dataUrl;\n          }\n          return setTimeout(((function(_this) {\n            return function() {\n              return file.previewElement.classList.add(\"dz-image-preview\");\n            };\n          })(this)), 1);\n        }\n      },\n      error: function(file, message) {\n        var node, _i, _len, _ref, _results;\n        if (file.previewElement) {\n          file.previewElement.classList.add(\"dz-error\");\n          if (typeof message !== \"String\" && message.error) {\n            message = message.error;\n          }\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-errormessage]\");\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            node = _ref[_i];\n            _results.push(node.textContent = message);\n          }\n          return _results;\n        }\n      },\n      errormultiple: noop,\n      processing: function(file) {\n        if (file.previewElement) {\n          file.previewElement.classList.add(\"dz-processing\");\n          if (file._removeLink) {\n            return file._removeLink.textContent = this.options.dictCancelUpload;\n          }\n        }\n      },\n      processingmultiple: noop,\n      uploadprogress: function(file, progress, bytesSent) {\n        var node, _i, _len, _ref, _results;\n        if (file.previewElement) {\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-uploadprogress]\");\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            node = _ref[_i];\n            if (node.nodeName === 'PROGRESS') {\n              _results.push(node.value = progress);\n            } else {\n              _results.push(node.style.width = \"\" + progress + \"%\");\n            }\n          }\n          return _results;\n        }\n      },\n      totaluploadprogress: noop,\n      sending: noop,\n      sendingmultiple: noop,\n      success: function(file) {\n        if (file.previewElement) {\n          return file.previewElement.classList.add(\"dz-success\");\n        }\n      },\n      successmultiple: noop,\n      canceled: function(file) {\n        return this.emit(\"error\", file, \"Upload canceled.\");\n      },\n      canceledmultiple: noop,\n      complete: function(file) {\n        if (file._removeLink) {\n          file._removeLink.textContent = this.options.dictRemoveFile;\n        }\n        if (file.previewElement) {\n          return file.previewElement.classList.add(\"dz-complete\");\n        }\n      },\n      completemultiple: noop,\n      maxfilesexceeded: noop,\n      maxfilesreached: noop,\n      queuecomplete: noop,\n      addedfiles: noop,\n      previewTemplate: \"<div class=\\\"dz-preview dz-file-preview\\\">\\n  <div class=\\\"dz-image\\\"><img data-dz-thumbnail /></div>\\n  <div class=\\\"dz-details\\\">\\n    <div class=\\\"dz-size\\\"><span data-dz-size></span></div>\\n    <div class=\\\"dz-filename\\\"><span data-dz-name></span></div>\\n  </div>\\n  <div class=\\\"dz-progress\\\"><span class=\\\"dz-upload\\\" data-dz-uploadprogress></span></div>\\n  <div class=\\\"dz-error-message\\\"><span data-dz-errormessage></span></div>\\n  <div class=\\\"dz-success-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Check</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <path d=\\\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" stroke-opacity=\\\"0.198794158\\\" stroke=\\\"#747474\\\" fill-opacity=\\\"0.816519475\\\" fill=\\\"#FFFFFF\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n      </g>\\n    </svg>\\n  </div>\\n  <div class=\\\"dz-error-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Error</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <g id=\\\"Check-+-Oval-2\\\" sketch:type=\\\"MSLayerGroup\\\" stroke=\\\"#747474\\\" stroke-opacity=\\\"0.198794158\\\" fill=\\\"#FFFFFF\\\" fill-opacity=\\\"0.816519475\\\">\\n          <path d=\\\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n        </g>\\n      </g>\\n    </svg>\\n  </div>\\n</div>\"\n    };\n\n    extend = function() {\n      var key, object, objects, target, val, _i, _len;\n      target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      for (_i = 0, _len = objects.length; _i < _len; _i++) {\n        object = objects[_i];\n        for (key in object) {\n          val = object[key];\n          target[key] = val;\n        }\n      }\n      return target;\n    };\n\n    function Dropzone(element, options) {\n      var elementOptions, fallback, _ref;\n      this.element = element;\n      this.version = Dropzone.version;\n      this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\\n*/g, \"\");\n      this.clickableElements = [];\n      this.listeners = [];\n      this.files = [];\n      if (typeof this.element === \"string\") {\n        this.element = document.querySelector(this.element);\n      }\n      if (!(this.element && (this.element.nodeType != null))) {\n        throw new Error(\"Invalid dropzone element.\");\n      }\n      if (this.element.dropzone) {\n        throw new Error(\"Dropzone already attached.\");\n      }\n      Dropzone.instances.push(this);\n      this.element.dropzone = this;\n      elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};\n      this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});\n      if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {\n        return this.options.fallback.call(this);\n      }\n      if (this.options.url == null) {\n        this.options.url = this.element.getAttribute(\"action\");\n      }\n      if (!this.options.url) {\n        throw new Error(\"No URL provided.\");\n      }\n      if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {\n        throw new Error(\"You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.\");\n      }\n      if (this.options.acceptedMimeTypes) {\n        this.options.acceptedFiles = this.options.acceptedMimeTypes;\n        delete this.options.acceptedMimeTypes;\n      }\n      this.options.method = this.options.method.toUpperCase();\n      if ((fallback = this.getExistingFallback()) && fallback.parentNode) {\n        fallback.parentNode.removeChild(fallback);\n      }\n      if (this.options.previewsContainer !== false) {\n        if (this.options.previewsContainer) {\n          this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, \"previewsContainer\");\n        } else {\n          this.previewsContainer = this.element;\n        }\n      }\n      if (this.options.clickable) {\n        if (this.options.clickable === true) {\n          this.clickableElements = [this.element];\n        } else {\n          this.clickableElements = Dropzone.getElements(this.options.clickable, \"clickable\");\n        }\n      }\n      this.init();\n    }\n\n    Dropzone.prototype.getAcceptedFiles = function() {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.accepted) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.getRejectedFiles = function() {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (!file.accepted) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.getFilesWithStatus = function(status) {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.status === status) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.getQueuedFiles = function() {\n      return this.getFilesWithStatus(Dropzone.QUEUED);\n    };\n\n    Dropzone.prototype.getUploadingFiles = function() {\n      return this.getFilesWithStatus(Dropzone.UPLOADING);\n    };\n\n    Dropzone.prototype.getAddedFiles = function() {\n      return this.getFilesWithStatus(Dropzone.ADDED);\n    };\n\n    Dropzone.prototype.getActiveFiles = function() {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.init = function() {\n      var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;\n      if (this.element.tagName === \"form\") {\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n      }\n      if (this.element.classList.contains(\"dropzone\") && !this.element.querySelector(\".dz-message\")) {\n        this.element.appendChild(Dropzone.createElement(\"<div class=\\\"dz-default dz-message\\\"><span>\" + this.options.dictDefaultMessage + \"</span></div>\"));\n      }\n      if (this.clickableElements.length) {\n        setupHiddenFileInput = (function(_this) {\n          return function() {\n            if (_this.hiddenFileInput) {\n              _this.hiddenFileInput.parentNode.removeChild(_this.hiddenFileInput);\n            }\n            _this.hiddenFileInput = document.createElement(\"input\");\n            _this.hiddenFileInput.setAttribute(\"type\", \"file\");\n            if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {\n              _this.hiddenFileInput.setAttribute(\"multiple\", \"multiple\");\n            }\n            _this.hiddenFileInput.className = \"dz-hidden-input\";\n            if (_this.options.acceptedFiles != null) {\n              _this.hiddenFileInput.setAttribute(\"accept\", _this.options.acceptedFiles);\n            }\n            if (_this.options.capture != null) {\n              _this.hiddenFileInput.setAttribute(\"capture\", _this.options.capture);\n            }\n            _this.hiddenFileInput.style.visibility = \"hidden\";\n            _this.hiddenFileInput.style.position = \"absolute\";\n            _this.hiddenFileInput.style.top = \"0\";\n            _this.hiddenFileInput.style.left = \"0\";\n            _this.hiddenFileInput.style.height = \"0\";\n            _this.hiddenFileInput.style.width = \"0\";\n            document.querySelector(_this.options.hiddenInputContainer).appendChild(_this.hiddenFileInput);\n            return _this.hiddenFileInput.addEventListener(\"change\", function() {\n              var file, files, _i, _len;\n              files = _this.hiddenFileInput.files;\n              if (files.length) {\n                for (_i = 0, _len = files.length; _i < _len; _i++) {\n                  file = files[_i];\n                  _this.addFile(file);\n                }\n              }\n              _this.emit(\"addedfiles\", files);\n              return setupHiddenFileInput();\n            });\n          };\n        })(this);\n        setupHiddenFileInput();\n      }\n      this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;\n      _ref1 = this.events;\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        eventName = _ref1[_i];\n        this.on(eventName, this.options[eventName]);\n      }\n      this.on(\"uploadprogress\", (function(_this) {\n        return function() {\n          return _this.updateTotalUploadProgress();\n        };\n      })(this));\n      this.on(\"removedfile\", (function(_this) {\n        return function() {\n          return _this.updateTotalUploadProgress();\n        };\n      })(this));\n      this.on(\"canceled\", (function(_this) {\n        return function(file) {\n          return _this.emit(\"complete\", file);\n        };\n      })(this));\n      this.on(\"complete\", (function(_this) {\n        return function(file) {\n          if (_this.getAddedFiles().length === 0 && _this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {\n            return setTimeout((function() {\n              return _this.emit(\"queuecomplete\");\n            }), 0);\n          }\n        };\n      })(this));\n      noPropagation = function(e) {\n        e.stopPropagation();\n        if (e.preventDefault) {\n          return e.preventDefault();\n        } else {\n          return e.returnValue = false;\n        }\n      };\n      this.listeners = [\n        {\n          element: this.element,\n          events: {\n            \"dragstart\": (function(_this) {\n              return function(e) {\n                return _this.emit(\"dragstart\", e);\n              };\n            })(this),\n            \"dragenter\": (function(_this) {\n              return function(e) {\n                noPropagation(e);\n                return _this.emit(\"dragenter\", e);\n              };\n            })(this),\n            \"dragover\": (function(_this) {\n              return function(e) {\n                var efct;\n                try {\n                  efct = e.dataTransfer.effectAllowed;\n                } catch (_error) {}\n                e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';\n                noPropagation(e);\n                return _this.emit(\"dragover\", e);\n              };\n            })(this),\n            \"dragleave\": (function(_this) {\n              return function(e) {\n                return _this.emit(\"dragleave\", e);\n              };\n            })(this),\n            \"drop\": (function(_this) {\n              return function(e) {\n                noPropagation(e);\n                return _this.drop(e);\n              };\n            })(this),\n            \"dragend\": (function(_this) {\n              return function(e) {\n                return _this.emit(\"dragend\", e);\n              };\n            })(this)\n          }\n        }\n      ];\n      this.clickableElements.forEach((function(_this) {\n        return function(clickableElement) {\n          return _this.listeners.push({\n            element: clickableElement,\n            events: {\n              \"click\": function(evt) {\n                if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(\".dz-message\")))) {\n                  _this.hiddenFileInput.click();\n                }\n                return true;\n              }\n            }\n          });\n        };\n      })(this));\n      this.enable();\n      return this.options.init.call(this);\n    };\n\n    Dropzone.prototype.destroy = function() {\n      var _ref;\n      this.disable();\n      this.removeAllFiles(true);\n      if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {\n        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);\n        this.hiddenFileInput = null;\n      }\n      delete this.element.dropzone;\n      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);\n    };\n\n    Dropzone.prototype.updateTotalUploadProgress = function() {\n      var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;\n      totalBytesSent = 0;\n      totalBytes = 0;\n      activeFiles = this.getActiveFiles();\n      if (activeFiles.length) {\n        _ref = this.getActiveFiles();\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          file = _ref[_i];\n          totalBytesSent += file.upload.bytesSent;\n          totalBytes += file.upload.total;\n        }\n        totalUploadProgress = 100 * totalBytesSent / totalBytes;\n      } else {\n        totalUploadProgress = 100;\n      }\n      return this.emit(\"totaluploadprogress\", totalUploadProgress, totalBytes, totalBytesSent);\n    };\n\n    Dropzone.prototype._getParamName = function(n) {\n      if (typeof this.options.paramName === \"function\") {\n        return this.options.paramName(n);\n      } else {\n        return \"\" + this.options.paramName + (this.options.uploadMultiple ? \"[\" + n + \"]\" : \"\");\n      }\n    };\n\n    Dropzone.prototype._renameFilename = function(name) {\n      if (typeof this.options.renameFilename !== \"function\") {\n        return name;\n      }\n      return this.options.renameFilename(name);\n    };\n\n    Dropzone.prototype.getFallbackForm = function() {\n      var existingFallback, fields, fieldsString, form;\n      if (existingFallback = this.getExistingFallback()) {\n        return existingFallback;\n      }\n      fieldsString = \"<div class=\\\"dz-fallback\\\">\";\n      if (this.options.dictFallbackText) {\n        fieldsString += \"<p>\" + this.options.dictFallbackText + \"</p>\";\n      }\n      fieldsString += \"<input type=\\\"file\\\" name=\\\"\" + (this._getParamName(0)) + \"\\\" \" + (this.options.uploadMultiple ? 'multiple=\"multiple\"' : void 0) + \" /><input type=\\\"submit\\\" value=\\\"Upload!\\\"></div>\";\n      fields = Dropzone.createElement(fieldsString);\n      if (this.element.tagName !== \"FORM\") {\n        form = Dropzone.createElement(\"<form action=\\\"\" + this.options.url + \"\\\" enctype=\\\"multipart/form-data\\\" method=\\\"\" + this.options.method + \"\\\"></form>\");\n        form.appendChild(fields);\n      } else {\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n        this.element.setAttribute(\"method\", this.options.method);\n      }\n      return form != null ? form : fields;\n    };\n\n    Dropzone.prototype.getExistingFallback = function() {\n      var fallback, getFallback, tagName, _i, _len, _ref;\n      getFallback = function(elements) {\n        var el, _i, _len;\n        for (_i = 0, _len = elements.length; _i < _len; _i++) {\n          el = elements[_i];\n          if (/(^| )fallback($| )/.test(el.className)) {\n            return el;\n          }\n        }\n      };\n      _ref = [\"div\", \"form\"];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        tagName = _ref[_i];\n        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {\n          return fallback;\n        }\n      }\n    };\n\n    Dropzone.prototype.setupEventListeners = function() {\n      var elementListeners, event, listener, _i, _len, _ref, _results;\n      _ref = this.listeners;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elementListeners = _ref[_i];\n        _results.push((function() {\n          var _ref1, _results1;\n          _ref1 = elementListeners.events;\n          _results1 = [];\n          for (event in _ref1) {\n            listener = _ref1[event];\n            _results1.push(elementListeners.element.addEventListener(event, listener, false));\n          }\n          return _results1;\n        })());\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.removeEventListeners = function() {\n      var elementListeners, event, listener, _i, _len, _ref, _results;\n      _ref = this.listeners;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elementListeners = _ref[_i];\n        _results.push((function() {\n          var _ref1, _results1;\n          _ref1 = elementListeners.events;\n          _results1 = [];\n          for (event in _ref1) {\n            listener = _ref1[event];\n            _results1.push(elementListeners.element.removeEventListener(event, listener, false));\n          }\n          return _results1;\n        })());\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.disable = function() {\n      var file, _i, _len, _ref, _results;\n      this.clickableElements.forEach(function(element) {\n        return element.classList.remove(\"dz-clickable\");\n      });\n      this.removeEventListeners();\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        _results.push(this.cancelUpload(file));\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.enable = function() {\n      this.clickableElements.forEach(function(element) {\n        return element.classList.add(\"dz-clickable\");\n      });\n      return this.setupEventListeners();\n    };\n\n    Dropzone.prototype.filesize = function(size) {\n      var cutoff, i, selectedSize, selectedUnit, unit, units, _i, _len;\n      selectedSize = 0;\n      selectedUnit = \"b\";\n      if (size > 0) {\n        units = ['TB', 'GB', 'MB', 'KB', 'b'];\n        for (i = _i = 0, _len = units.length; _i < _len; i = ++_i) {\n          unit = units[i];\n          cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;\n          if (size >= cutoff) {\n            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);\n            selectedUnit = unit;\n            break;\n          }\n        }\n        selectedSize = Math.round(10 * selectedSize) / 10;\n      }\n      return \"<strong>\" + selectedSize + \"</strong> \" + selectedUnit;\n    };\n\n    Dropzone.prototype._updateMaxFilesReachedClass = function() {\n      if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {\n        if (this.getAcceptedFiles().length === this.options.maxFiles) {\n          this.emit('maxfilesreached', this.files);\n        }\n        return this.element.classList.add(\"dz-max-files-reached\");\n      } else {\n        return this.element.classList.remove(\"dz-max-files-reached\");\n      }\n    };\n\n    Dropzone.prototype.drop = function(e) {\n      var files, items;\n      if (!e.dataTransfer) {\n        return;\n      }\n      this.emit(\"drop\", e);\n      files = e.dataTransfer.files;\n      this.emit(\"addedfiles\", files);\n      if (files.length) {\n        items = e.dataTransfer.items;\n        if (items && items.length && (items[0].webkitGetAsEntry != null)) {\n          this._addFilesFromItems(items);\n        } else {\n          this.handleFiles(files);\n        }\n      }\n    };\n\n    Dropzone.prototype.paste = function(e) {\n      var items, _ref;\n      if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {\n        return;\n      }\n      this.emit(\"paste\", e);\n      items = e.clipboardData.items;\n      if (items.length) {\n        return this._addFilesFromItems(items);\n      }\n    };\n\n    Dropzone.prototype.handleFiles = function(files) {\n      var file, _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        _results.push(this.addFile(file));\n      }\n      return _results;\n    };\n\n    Dropzone.prototype._addFilesFromItems = function(items) {\n      var entry, item, _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = items.length; _i < _len; _i++) {\n        item = items[_i];\n        if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {\n          if (entry.isFile) {\n            _results.push(this.addFile(item.getAsFile()));\n          } else if (entry.isDirectory) {\n            _results.push(this._addFilesFromDirectory(entry, entry.name));\n          } else {\n            _results.push(void 0);\n          }\n        } else if (item.getAsFile != null) {\n          if ((item.kind == null) || item.kind === \"file\") {\n            _results.push(this.addFile(item.getAsFile()));\n          } else {\n            _results.push(void 0);\n          }\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype._addFilesFromDirectory = function(directory, path) {\n      var dirReader, errorHandler, readEntries;\n      dirReader = directory.createReader();\n      errorHandler = function(error) {\n        return typeof console !== \"undefined\" && console !== null ? typeof console.log === \"function\" ? console.log(error) : void 0 : void 0;\n      };\n      readEntries = (function(_this) {\n        return function() {\n          return dirReader.readEntries(function(entries) {\n            var entry, _i, _len;\n            if (entries.length > 0) {\n              for (_i = 0, _len = entries.length; _i < _len; _i++) {\n                entry = entries[_i];\n                if (entry.isFile) {\n                  entry.file(function(file) {\n                    if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {\n                      return;\n                    }\n                    file.fullPath = \"\" + path + \"/\" + file.name;\n                    return _this.addFile(file);\n                  });\n                } else if (entry.isDirectory) {\n                  _this._addFilesFromDirectory(entry, \"\" + path + \"/\" + entry.name);\n                }\n              }\n              readEntries();\n            }\n            return null;\n          }, errorHandler);\n        };\n      })(this);\n      return readEntries();\n    };\n\n    Dropzone.prototype.accept = function(file, done) {\n      if (file.size > this.options.maxFilesize * 1024 * 1024) {\n        return done(this.options.dictFileTooBig.replace(\"{{filesize}}\", Math.round(file.size / 1024 / 10.24) / 100).replace(\"{{maxFilesize}}\", this.options.maxFilesize));\n      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {\n        return done(this.options.dictInvalidFileType);\n      } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {\n        done(this.options.dictMaxFilesExceeded.replace(\"{{maxFiles}}\", this.options.maxFiles));\n        return this.emit(\"maxfilesexceeded\", file);\n      } else {\n        return this.options.accept.call(this, file, done);\n      }\n    };\n\n    Dropzone.prototype.addFile = function(file) {\n      file.upload = {\n        progress: 0,\n        total: file.size,\n        bytesSent: 0\n      };\n      this.files.push(file);\n      file.status = Dropzone.ADDED;\n      this.emit(\"addedfile\", file);\n      this._enqueueThumbnail(file);\n      return this.accept(file, (function(_this) {\n        return function(error) {\n          if (error) {\n            file.accepted = false;\n            _this._errorProcessing([file], error);\n          } else {\n            file.accepted = true;\n            if (_this.options.autoQueue) {\n              _this.enqueueFile(file);\n            }\n          }\n          return _this._updateMaxFilesReachedClass();\n        };\n      })(this));\n    };\n\n    Dropzone.prototype.enqueueFiles = function(files) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        this.enqueueFile(file);\n      }\n      return null;\n    };\n\n    Dropzone.prototype.enqueueFile = function(file) {\n      if (file.status === Dropzone.ADDED && file.accepted === true) {\n        file.status = Dropzone.QUEUED;\n        if (this.options.autoProcessQueue) {\n          return setTimeout(((function(_this) {\n            return function() {\n              return _this.processQueue();\n            };\n          })(this)), 0);\n        }\n      } else {\n        throw new Error(\"This file can't be queued because it has already been processed or was rejected.\");\n      }\n    };\n\n    Dropzone.prototype._thumbnailQueue = [];\n\n    Dropzone.prototype._processingThumbnail = false;\n\n    Dropzone.prototype._enqueueThumbnail = function(file) {\n      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {\n        this._thumbnailQueue.push(file);\n        return setTimeout(((function(_this) {\n          return function() {\n            return _this._processThumbnailQueue();\n          };\n        })(this)), 0);\n      }\n    };\n\n    Dropzone.prototype._processThumbnailQueue = function() {\n      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {\n        return;\n      }\n      this._processingThumbnail = true;\n      return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {\n        return function() {\n          _this._processingThumbnail = false;\n          return _this._processThumbnailQueue();\n        };\n      })(this));\n    };\n\n    Dropzone.prototype.removeFile = function(file) {\n      if (file.status === Dropzone.UPLOADING) {\n        this.cancelUpload(file);\n      }\n      this.files = without(this.files, file);\n      this.emit(\"removedfile\", file);\n      if (this.files.length === 0) {\n        return this.emit(\"reset\");\n      }\n    };\n\n    Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {\n      var file, _i, _len, _ref;\n      if (cancelIfNecessary == null) {\n        cancelIfNecessary = false;\n      }\n      _ref = this.files.slice();\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {\n          this.removeFile(file);\n        }\n      }\n      return null;\n    };\n\n    Dropzone.prototype.createThumbnail = function(file, callback) {\n      var fileReader;\n      fileReader = new FileReader;\n      fileReader.onload = (function(_this) {\n        return function() {\n          if (file.type === \"image/svg+xml\") {\n            _this.emit(\"thumbnail\", file, fileReader.result);\n            if (callback != null) {\n              callback();\n            }\n            return;\n          }\n          return _this.createThumbnailFromUrl(file, fileReader.result, callback);\n        };\n      })(this);\n      return fileReader.readAsDataURL(file);\n    };\n\n    Dropzone.prototype.createThumbnailFromUrl = function(file, imageUrl, callback, crossOrigin) {\n      var img;\n      img = document.createElement(\"img\");\n      if (crossOrigin) {\n        img.crossOrigin = crossOrigin;\n      }\n      img.onload = (function(_this) {\n        return function() {\n          var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;\n          file.width = img.width;\n          file.height = img.height;\n          resizeInfo = _this.options.resize.call(_this, file);\n          if (resizeInfo.trgWidth == null) {\n            resizeInfo.trgWidth = resizeInfo.optWidth;\n          }\n          if (resizeInfo.trgHeight == null) {\n            resizeInfo.trgHeight = resizeInfo.optHeight;\n          }\n          canvas = document.createElement(\"canvas\");\n          ctx = canvas.getContext(\"2d\");\n          canvas.width = resizeInfo.trgWidth;\n          canvas.height = resizeInfo.trgHeight;\n          drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);\n          thumbnail = canvas.toDataURL(\"image/png\");\n          _this.emit(\"thumbnail\", file, thumbnail);\n          if (callback != null) {\n            return callback();\n          }\n        };\n      })(this);\n      if (callback != null) {\n        img.onerror = callback;\n      }\n      return img.src = imageUrl;\n    };\n\n    Dropzone.prototype.processQueue = function() {\n      var i, parallelUploads, processingLength, queuedFiles;\n      parallelUploads = this.options.parallelUploads;\n      processingLength = this.getUploadingFiles().length;\n      i = processingLength;\n      if (processingLength >= parallelUploads) {\n        return;\n      }\n      queuedFiles = this.getQueuedFiles();\n      if (!(queuedFiles.length > 0)) {\n        return;\n      }\n      if (this.options.uploadMultiple) {\n        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));\n      } else {\n        while (i < parallelUploads) {\n          if (!queuedFiles.length) {\n            return;\n          }\n          this.processFile(queuedFiles.shift());\n          i++;\n        }\n      }\n    };\n\n    Dropzone.prototype.processFile = function(file) {\n      return this.processFiles([file]);\n    };\n\n    Dropzone.prototype.processFiles = function(files) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.processing = true;\n        file.status = Dropzone.UPLOADING;\n        this.emit(\"processing\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"processingmultiple\", files);\n      }\n      return this.uploadFiles(files);\n    };\n\n    Dropzone.prototype._getFilesWithXhr = function(xhr) {\n      var file, files;\n      return files = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.files;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          file = _ref[_i];\n          if (file.xhr === xhr) {\n            _results.push(file);\n          }\n        }\n        return _results;\n      }).call(this);\n    };\n\n    Dropzone.prototype.cancelUpload = function(file) {\n      var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;\n      if (file.status === Dropzone.UPLOADING) {\n        groupedFiles = this._getFilesWithXhr(file.xhr);\n        for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {\n          groupedFile = groupedFiles[_i];\n          groupedFile.status = Dropzone.CANCELED;\n        }\n        file.xhr.abort();\n        for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {\n          groupedFile = groupedFiles[_j];\n          this.emit(\"canceled\", groupedFile);\n        }\n        if (this.options.uploadMultiple) {\n          this.emit(\"canceledmultiple\", groupedFiles);\n        }\n      } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {\n        file.status = Dropzone.CANCELED;\n        this.emit(\"canceled\", file);\n        if (this.options.uploadMultiple) {\n          this.emit(\"canceledmultiple\", [file]);\n        }\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    };\n\n    resolveOption = function() {\n      var args, option;\n      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      if (typeof option === 'function') {\n        return option.apply(this, args);\n      }\n      return option;\n    };\n\n    Dropzone.prototype.uploadFile = function(file) {\n      return this.uploadFiles([file]);\n    };\n\n    Dropzone.prototype.uploadFiles = function(files) {\n      var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;\n      xhr = new XMLHttpRequest();\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.xhr = xhr;\n      }\n      method = resolveOption(this.options.method, files);\n      url = resolveOption(this.options.url, files);\n      xhr.open(method, url, true);\n      xhr.withCredentials = !!this.options.withCredentials;\n      response = null;\n      handleError = (function(_this) {\n        return function() {\n          var _j, _len1, _results;\n          _results = [];\n          for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\n            file = files[_j];\n            _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace(\"{{statusCode}}\", xhr.status), xhr));\n          }\n          return _results;\n        };\n      })(this);\n      updateProgress = (function(_this) {\n        return function(e) {\n          var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;\n          if (e != null) {\n            progress = 100 * e.loaded / e.total;\n            for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\n              file = files[_j];\n              file.upload = {\n                progress: progress,\n                total: e.total,\n                bytesSent: e.loaded\n              };\n            }\n          } else {\n            allFilesFinished = true;\n            progress = 100;\n            for (_k = 0, _len2 = files.length; _k < _len2; _k++) {\n              file = files[_k];\n              if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {\n                allFilesFinished = false;\n              }\n              file.upload.progress = progress;\n              file.upload.bytesSent = file.upload.total;\n            }\n            if (allFilesFinished) {\n              return;\n            }\n          }\n          _results = [];\n          for (_l = 0, _len3 = files.length; _l < _len3; _l++) {\n            file = files[_l];\n            _results.push(_this.emit(\"uploadprogress\", file, progress, file.upload.bytesSent));\n          }\n          return _results;\n        };\n      })(this);\n      xhr.onload = (function(_this) {\n        return function(e) {\n          var _ref;\n          if (files[0].status === Dropzone.CANCELED) {\n            return;\n          }\n          if (xhr.readyState !== 4) {\n            return;\n          }\n          response = xhr.responseText;\n          if (xhr.getResponseHeader(\"content-type\") && ~xhr.getResponseHeader(\"content-type\").indexOf(\"application/json\")) {\n            try {\n              response = JSON.parse(response);\n            } catch (_error) {\n              e = _error;\n              response = \"Invalid JSON response from server.\";\n            }\n          }\n          updateProgress();\n          if (!((200 <= (_ref = xhr.status) && _ref < 300))) {\n            return handleError();\n          } else {\n            return _this._finished(files, response, e);\n          }\n        };\n      })(this);\n      xhr.onerror = (function(_this) {\n        return function() {\n          if (files[0].status === Dropzone.CANCELED) {\n            return;\n          }\n          return handleError();\n        };\n      })(this);\n      progressObj = (_ref = xhr.upload) != null ? _ref : xhr;\n      progressObj.onprogress = updateProgress;\n      headers = {\n        \"Accept\": \"application/json\",\n        \"Cache-Control\": \"no-cache\",\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      };\n      if (this.options.headers) {\n        extend(headers, this.options.headers);\n      }\n      for (headerName in headers) {\n        headerValue = headers[headerName];\n        if (headerValue) {\n          xhr.setRequestHeader(headerName, headerValue);\n        }\n      }\n      formData = new FormData();\n      if (this.options.params) {\n        _ref1 = this.options.params;\n        for (key in _ref1) {\n          value = _ref1[key];\n          formData.append(key, value);\n        }\n      }\n      for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\n        file = files[_j];\n        this.emit(\"sending\", file, xhr, formData);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"sendingmultiple\", files, xhr, formData);\n      }\n      if (this.element.tagName === \"FORM\") {\n        _ref2 = this.element.querySelectorAll(\"input, textarea, select, button\");\n        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n          input = _ref2[_k];\n          inputName = input.getAttribute(\"name\");\n          inputType = input.getAttribute(\"type\");\n          if (input.tagName === \"SELECT\" && input.hasAttribute(\"multiple\")) {\n            _ref3 = input.options;\n            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {\n              option = _ref3[_l];\n              if (option.selected) {\n                formData.append(inputName, option.value);\n              }\n            }\n          } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== \"checkbox\" && _ref4 !== \"radio\") || input.checked) {\n            formData.append(inputName, input.value);\n          }\n        }\n      }\n      for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {\n        formData.append(this._getParamName(i), files[i], this._renameFilename(files[i].name));\n      }\n      return this.submitRequest(xhr, formData, files);\n    };\n\n    Dropzone.prototype.submitRequest = function(xhr, formData, files) {\n      return xhr.send(formData);\n    };\n\n    Dropzone.prototype._finished = function(files, responseText, e) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.status = Dropzone.SUCCESS;\n        this.emit(\"success\", file, responseText, e);\n        this.emit(\"complete\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"successmultiple\", files, responseText, e);\n        this.emit(\"completemultiple\", files);\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    };\n\n    Dropzone.prototype._errorProcessing = function(files, message, xhr) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.status = Dropzone.ERROR;\n        this.emit(\"error\", file, message, xhr);\n        this.emit(\"complete\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"errormultiple\", files, message, xhr);\n        this.emit(\"completemultiple\", files);\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    };\n\n    return Dropzone;\n\n  })(Emitter);\n\n  Dropzone.version = \"4.3.0\";\n\n  Dropzone.options = {};\n\n  Dropzone.optionsForElement = function(element) {\n    if (element.getAttribute(\"id\")) {\n      return Dropzone.options[camelize(element.getAttribute(\"id\"))];\n    } else {\n      return void 0;\n    }\n  };\n\n  Dropzone.instances = [];\n\n  Dropzone.forElement = function(element) {\n    if (typeof element === \"string\") {\n      element = document.querySelector(element);\n    }\n    if ((element != null ? element.dropzone : void 0) == null) {\n      throw new Error(\"No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.\");\n    }\n    return element.dropzone;\n  };\n\n  Dropzone.autoDiscover = true;\n\n  Dropzone.discover = function() {\n    var checkElements, dropzone, dropzones, _i, _len, _results;\n    if (document.querySelectorAll) {\n      dropzones = document.querySelectorAll(\".dropzone\");\n    } else {\n      dropzones = [];\n      checkElements = function(elements) {\n        var el, _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = elements.length; _i < _len; _i++) {\n          el = elements[_i];\n          if (/(^| )dropzone($| )/.test(el.className)) {\n            _results.push(dropzones.push(el));\n          } else {\n            _results.push(void 0);\n          }\n        }\n        return _results;\n      };\n      checkElements(document.getElementsByTagName(\"div\"));\n      checkElements(document.getElementsByTagName(\"form\"));\n    }\n    _results = [];\n    for (_i = 0, _len = dropzones.length; _i < _len; _i++) {\n      dropzone = dropzones[_i];\n      if (Dropzone.optionsForElement(dropzone) !== false) {\n        _results.push(new Dropzone(dropzone));\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  };\n\n  Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\\/12/i];\n\n  Dropzone.isBrowserSupported = function() {\n    var capableBrowser, regex, _i, _len, _ref;\n    capableBrowser = true;\n    if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {\n      if (!(\"classList\" in document.createElement(\"a\"))) {\n        capableBrowser = false;\n      } else {\n        _ref = Dropzone.blacklistedBrowsers;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          regex = _ref[_i];\n          if (regex.test(navigator.userAgent)) {\n            capableBrowser = false;\n            continue;\n          }\n        }\n      }\n    } else {\n      capableBrowser = false;\n    }\n    return capableBrowser;\n  };\n\n  without = function(list, rejectedItem) {\n    var item, _i, _len, _results;\n    _results = [];\n    for (_i = 0, _len = list.length; _i < _len; _i++) {\n      item = list[_i];\n      if (item !== rejectedItem) {\n        _results.push(item);\n      }\n    }\n    return _results;\n  };\n\n  camelize = function(str) {\n    return str.replace(/[\\-_](\\w)/g, function(match) {\n      return match.charAt(1).toUpperCase();\n    });\n  };\n\n  Dropzone.createElement = function(string) {\n    var div;\n    div = document.createElement(\"div\");\n    div.innerHTML = string;\n    return div.childNodes[0];\n  };\n\n  Dropzone.elementInside = function(element, container) {\n    if (element === container) {\n      return true;\n    }\n    while (element = element.parentNode) {\n      if (element === container) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  Dropzone.getElement = function(el, name) {\n    var element;\n    if (typeof el === \"string\") {\n      element = document.querySelector(el);\n    } else if (el.nodeType != null) {\n      element = el;\n    }\n    if (element == null) {\n      throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector or a plain HTML element.\");\n    }\n    return element;\n  };\n\n  Dropzone.getElements = function(els, name) {\n    var e, el, elements, _i, _j, _len, _len1, _ref;\n    if (els instanceof Array) {\n      elements = [];\n      try {\n        for (_i = 0, _len = els.length; _i < _len; _i++) {\n          el = els[_i];\n          elements.push(this.getElement(el, name));\n        }\n      } catch (_error) {\n        e = _error;\n        elements = null;\n      }\n    } else if (typeof els === \"string\") {\n      elements = [];\n      _ref = document.querySelectorAll(els);\n      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n        el = _ref[_j];\n        elements.push(el);\n      }\n    } else if (els.nodeType != null) {\n      elements = [els];\n    }\n    if (!((elements != null) && elements.length)) {\n      throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector, a plain HTML element or a list of those.\");\n    }\n    return elements;\n  };\n\n  Dropzone.confirm = function(question, accepted, rejected) {\n    if (window.confirm(question)) {\n      return accepted();\n    } else if (rejected != null) {\n      return rejected();\n    }\n  };\n\n  Dropzone.isValidFile = function(file, acceptedFiles) {\n    var baseMimeType, mimeType, validType, _i, _len;\n    if (!acceptedFiles) {\n      return true;\n    }\n    acceptedFiles = acceptedFiles.split(\",\");\n    mimeType = file.type;\n    baseMimeType = mimeType.replace(/\\/.*$/, \"\");\n    for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {\n      validType = acceptedFiles[_i];\n      validType = validType.trim();\n      if (validType.charAt(0) === \".\") {\n        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {\n          return true;\n        }\n      } else if (/\\/\\*$/.test(validType)) {\n        if (baseMimeType === validType.replace(/\\/.*$/, \"\")) {\n          return true;\n        }\n      } else {\n        if (mimeType === validType) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  if (typeof jQuery !== \"undefined\" && jQuery !== null) {\n    jQuery.fn.dropzone = function(options) {\n      return this.each(function() {\n        return new Dropzone(this, options);\n      });\n    };\n  }\n\n  if (typeof module !== \"undefined\" && module !== null) {\n    module.exports = Dropzone;\n  } else {\n    window.Dropzone = Dropzone;\n  }\n\n  Dropzone.ADDED = \"added\";\n\n  Dropzone.QUEUED = \"queued\";\n\n  Dropzone.ACCEPTED = Dropzone.QUEUED;\n\n  Dropzone.UPLOADING = \"uploading\";\n\n  Dropzone.PROCESSING = Dropzone.UPLOADING;\n\n  Dropzone.CANCELED = \"canceled\";\n\n  Dropzone.ERROR = \"error\";\n\n  Dropzone.SUCCESS = \"success\";\n\n\n  /*\n  \n  Bugfix for iOS 6 and 7\n  Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios\n  based on the work of https://github.com/stomita/ios-imagefile-megapixel\n   */\n\n  detectVerticalSquash = function(img) {\n    var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;\n    iw = img.naturalWidth;\n    ih = img.naturalHeight;\n    canvas = document.createElement(\"canvas\");\n    canvas.width = 1;\n    canvas.height = ih;\n    ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(img, 0, 0);\n    data = ctx.getImageData(0, 0, 1, ih).data;\n    sy = 0;\n    ey = ih;\n    py = ih;\n    while (py > sy) {\n      alpha = data[(py - 1) * 4 + 3];\n      if (alpha === 0) {\n        ey = py;\n      } else {\n        sy = py;\n      }\n      py = (ey + sy) >> 1;\n    }\n    ratio = py / ih;\n    if (ratio === 0) {\n      return 1;\n    } else {\n      return ratio;\n    }\n  };\n\n  drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var vertSquashRatio;\n    vertSquashRatio = detectVerticalSquash(img);\n    return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\n  };\n\n\n  /*\n   * contentloaded.js\n   *\n   * Author: Diego Perini (diego.perini at gmail.com)\n   * Summary: cross-browser wrapper for DOMContentLoaded\n   * Updated: 20101020\n   * License: MIT\n   * Version: 1.2\n   *\n   * URL:\n   * http://javascript.nwbox.com/ContentLoaded/\n   * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE\n   */\n\n  contentLoaded = function(win, fn) {\n    var add, doc, done, init, poll, pre, rem, root, top;\n    done = false;\n    top = true;\n    doc = win.document;\n    root = doc.documentElement;\n    add = (doc.addEventListener ? \"addEventListener\" : \"attachEvent\");\n    rem = (doc.addEventListener ? \"removeEventListener\" : \"detachEvent\");\n    pre = (doc.addEventListener ? \"\" : \"on\");\n    init = function(e) {\n      if (e.type === \"readystatechange\" && doc.readyState !== \"complete\") {\n        return;\n      }\n      (e.type === \"load\" ? win : doc)[rem](pre + e.type, init, false);\n      if (!done && (done = true)) {\n        return fn.call(win, e.type || e);\n      }\n    };\n    poll = function() {\n      var e;\n      try {\n        root.doScroll(\"left\");\n      } catch (_error) {\n        e = _error;\n        setTimeout(poll, 50);\n        return;\n      }\n      return init(\"poll\");\n    };\n    if (doc.readyState !== \"complete\") {\n      if (doc.createEventObject && root.doScroll) {\n        try {\n          top = !win.frameElement;\n        } catch (_error) {}\n        if (top) {\n          poll();\n        }\n      }\n      doc[add](pre + \"DOMContentLoaded\", init, false);\n      doc[add](pre + \"readystatechange\", init, false);\n      return win[add](pre + \"load\", init, false);\n    }\n  };\n\n  Dropzone._autoDiscoverFunction = function() {\n    if (Dropzone.autoDiscover) {\n      return Dropzone.discover();\n    }\n  };\n\n  contentLoaded(window, Dropzone._autoDiscoverFunction);\n\n}).call(this);",
        "output": "str",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "3e48becf1b3951af"
            ]
        ]
    },
    {
        "id": "66c77bebc15ef7f1",
        "type": "http in",
        "z": "5fde894cc9253f03",
        "name": "",
        "url": "/complex",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "bd23839aaa31f438"
            ]
        ]
    },
    {
        "id": "d9ccc36cd5f4c5b2",
        "type": "template",
        "z": "5fde894cc9253f03",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<script>\n    {{{dropzonejs}}}\n</script>\n<style>\n    {{{css}}}\n</style>\n\n<script>\n    // \"myAwesomeDropzone\" is the camelized version of the HTML element's ID\n    Dropzone.options.myDropzone = {\n      paramName: \"myFile\", // The name that will be used to transfer the file\n      maxFilesize: 2, // MB\n      accept: function(file, done) {\n        if (file.name == \"justinbieber.jpg\") {\n          done(\"Naha, you don't.\");\n        }\n        else { done(); }\n      }\n    };\n</script>\n\n<h1>Upload a file here:</h1>\n\n<form action=\"/uploadpretty\" class=\"dropzone\" method=\"post\" enctype=\"multipart/form-data\" id=\"my-dropzone\">\n  <div class=\"fallback\">\n    <input name=\"myFile\" type=\"file\" />\n    <input type=\"submit\" value=\"Submit\">\n  </div>\n</form>",
        "output": "str",
        "x": 770,
        "y": 260,
        "wires": [
            [
                "8b0660f0e0dd3b8f"
            ]
        ]
    },
    {
        "id": "8b0660f0e0dd3b8f",
        "type": "http response",
        "z": "5fde894cc9253f03",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 260,
        "wires": []
    },
    {
        "id": "3e48becf1b3951af",
        "type": "template",
        "z": "5fde894cc9253f03",
        "name": "css",
        "field": "css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "/*\n * The MIT License\n * Copyright (c) 2012 Matias Meno <m@tias.me>\n */\n@-webkit-keyframes passing-through {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30%, 70% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); }\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(-40px);\n    -moz-transform: translateY(-40px);\n    -ms-transform: translateY(-40px);\n    -o-transform: translateY(-40px);\n    transform: translateY(-40px); } }\n@-moz-keyframes passing-through {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30%, 70% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); }\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(-40px);\n    -moz-transform: translateY(-40px);\n    -ms-transform: translateY(-40px);\n    -o-transform: translateY(-40px);\n    transform: translateY(-40px); } }\n@keyframes passing-through {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30%, 70% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); }\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(-40px);\n    -moz-transform: translateY(-40px);\n    -ms-transform: translateY(-40px);\n    -o-transform: translateY(-40px);\n    transform: translateY(-40px); } }\n@-webkit-keyframes slide-in {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); } }\n@-moz-keyframes slide-in {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); } }\n@keyframes slide-in {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); } }\n@-webkit-keyframes pulse {\n  0% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); }\n  10% {\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    transform: scale(1.1); }\n  20% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); } }\n@-moz-keyframes pulse {\n  0% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); }\n  10% {\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    transform: scale(1.1); }\n  20% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); } }\n@keyframes pulse {\n  0% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); }\n  10% {\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    transform: scale(1.1); }\n  20% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); } }\n.dropzone, .dropzone * {\n  box-sizing: border-box; }\n\n.dropzone {\n  min-height: 150px;\n  border: 2px solid rgba(0, 0, 0, 0.3);\n  background: white;\n  padding: 20px 20px; }\n  .dropzone.dz-clickable {\n    cursor: pointer; }\n    .dropzone.dz-clickable * {\n      cursor: default; }\n    .dropzone.dz-clickable .dz-message, .dropzone.dz-clickable .dz-message * {\n      cursor: pointer; }\n  .dropzone.dz-started .dz-message {\n    display: none; }\n  .dropzone.dz-drag-hover {\n    border-style: solid; }\n    .dropzone.dz-drag-hover .dz-message {\n      opacity: 0.5; }\n  .dropzone .dz-message {\n    text-align: center;\n    margin: 2em 0; }\n  .dropzone .dz-preview {\n    position: relative;\n    display: inline-block;\n    vertical-align: top;\n    margin: 16px;\n    min-height: 100px; }\n    .dropzone .dz-preview:hover {\n      z-index: 1000; }\n      .dropzone .dz-preview:hover .dz-details {\n        opacity: 1; }\n    .dropzone .dz-preview.dz-file-preview .dz-image {\n      border-radius: 20px;\n      background: #999;\n      background: linear-gradient(to bottom, #eee, #ddd); }\n    .dropzone .dz-preview.dz-file-preview .dz-details {\n      opacity: 1; }\n    .dropzone .dz-preview.dz-image-preview {\n      background: white; }\n      .dropzone .dz-preview.dz-image-preview .dz-details {\n        -webkit-transition: opacity 0.2s linear;\n        -moz-transition: opacity 0.2s linear;\n        -ms-transition: opacity 0.2s linear;\n        -o-transition: opacity 0.2s linear;\n        transition: opacity 0.2s linear; }\n    .dropzone .dz-preview .dz-remove {\n      font-size: 14px;\n      text-align: center;\n      display: block;\n      cursor: pointer;\n      border: none; }\n      .dropzone .dz-preview .dz-remove:hover {\n        text-decoration: underline; }\n    .dropzone .dz-preview:hover .dz-details {\n      opacity: 1; }\n    .dropzone .dz-preview .dz-details {\n      z-index: 20;\n      position: absolute;\n      top: 0;\n      left: 0;\n      opacity: 0;\n      font-size: 13px;\n      min-width: 100%;\n      max-width: 100%;\n      padding: 2em 1em;\n      text-align: center;\n      color: rgba(0, 0, 0, 0.9);\n      line-height: 150%; }\n      .dropzone .dz-preview .dz-details .dz-size {\n        margin-bottom: 1em;\n        font-size: 16px; }\n      .dropzone .dz-preview .dz-details .dz-filename {\n        white-space: nowrap; }\n        .dropzone .dz-preview .dz-details .dz-filename:hover span {\n          border: 1px solid rgba(200, 200, 200, 0.8);\n          background-color: rgba(255, 255, 255, 0.8); }\n        .dropzone .dz-preview .dz-details .dz-filename:not(:hover) {\n          overflow: hidden;\n          text-overflow: ellipsis; }\n          .dropzone .dz-preview .dz-details .dz-filename:not(:hover) span {\n            border: 1px solid transparent; }\n      .dropzone .dz-preview .dz-details .dz-filename span, .dropzone .dz-preview .dz-details .dz-size span {\n        background-color: rgba(255, 255, 255, 0.4);\n        padding: 0 0.4em;\n        border-radius: 3px; }\n    .dropzone .dz-preview:hover .dz-image img {\n      -webkit-transform: scale(1.05, 1.05);\n      -moz-transform: scale(1.05, 1.05);\n      -ms-transform: scale(1.05, 1.05);\n      -o-transform: scale(1.05, 1.05);\n      transform: scale(1.05, 1.05);\n      -webkit-filter: blur(8px);\n      filter: blur(8px); }\n    .dropzone .dz-preview .dz-image {\n      border-radius: 20px;\n      overflow: hidden;\n      width: 120px;\n      height: 120px;\n      position: relative;\n      display: block;\n      z-index: 10; }\n      .dropzone .dz-preview .dz-image img {\n        display: block; }\n    .dropzone .dz-preview.dz-success .dz-success-mark {\n      -webkit-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -moz-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -ms-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -o-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1); }\n    .dropzone .dz-preview.dz-error .dz-error-mark {\n      opacity: 1;\n      -webkit-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -moz-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -ms-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -o-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1); }\n    .dropzone .dz-preview .dz-success-mark, .dropzone .dz-preview .dz-error-mark {\n      pointer-events: none;\n      opacity: 0;\n      z-index: 500;\n      position: absolute;\n      display: block;\n      top: 50%;\n      left: 50%;\n      margin-left: -27px;\n      margin-top: -27px; }\n      .dropzone .dz-preview .dz-success-mark svg, .dropzone .dz-preview .dz-error-mark svg {\n        display: block;\n        width: 54px;\n        height: 54px; }\n    .dropzone .dz-preview.dz-processing .dz-progress {\n      opacity: 1;\n      -webkit-transition: all 0.2s linear;\n      -moz-transition: all 0.2s linear;\n      -ms-transition: all 0.2s linear;\n      -o-transition: all 0.2s linear;\n      transition: all 0.2s linear; }\n    .dropzone .dz-preview.dz-complete .dz-progress {\n      opacity: 0;\n      -webkit-transition: opacity 0.4s ease-in;\n      -moz-transition: opacity 0.4s ease-in;\n      -ms-transition: opacity 0.4s ease-in;\n      -o-transition: opacity 0.4s ease-in;\n      transition: opacity 0.4s ease-in; }\n    .dropzone .dz-preview:not(.dz-processing) .dz-progress {\n      -webkit-animation: pulse 6s ease infinite;\n      -moz-animation: pulse 6s ease infinite;\n      -ms-animation: pulse 6s ease infinite;\n      -o-animation: pulse 6s ease infinite;\n      animation: pulse 6s ease infinite; }\n    .dropzone .dz-preview .dz-progress {\n      opacity: 1;\n      z-index: 1000;\n      pointer-events: none;\n      position: absolute;\n      height: 16px;\n      left: 50%;\n      top: 50%;\n      margin-top: -8px;\n      width: 80px;\n      margin-left: -40px;\n      background: rgba(255, 255, 255, 0.9);\n      -webkit-transform: scale(1);\n      border-radius: 8px;\n      overflow: hidden; }\n      .dropzone .dz-preview .dz-progress .dz-upload {\n        background: #333;\n        background: linear-gradient(to bottom, #666, #444);\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        width: 0;\n        -webkit-transition: width 300ms ease-in-out;\n        -moz-transition: width 300ms ease-in-out;\n        -ms-transition: width 300ms ease-in-out;\n        -o-transition: width 300ms ease-in-out;\n        transition: width 300ms ease-in-out; }\n    .dropzone .dz-preview.dz-error .dz-error-message {\n      display: block; }\n    .dropzone .dz-preview.dz-error:hover .dz-error-message {\n      opacity: 1;\n      pointer-events: auto; }\n    .dropzone .dz-preview .dz-error-message {\n      pointer-events: none;\n      z-index: 1000;\n      position: absolute;\n      display: block;\n      display: none;\n      opacity: 0;\n      -webkit-transition: opacity 0.3s ease;\n      -moz-transition: opacity 0.3s ease;\n      -ms-transition: opacity 0.3s ease;\n      -o-transition: opacity 0.3s ease;\n      transition: opacity 0.3s ease;\n      border-radius: 8px;\n      font-size: 13px;\n      top: 130px;\n      left: -10px;\n      width: 140px;\n      background: #be2626;\n      background: linear-gradient(to bottom, #be2626, #a92222);\n      padding: 0.5em 1.2em;\n      color: white; }\n      .dropzone .dz-preview .dz-error-message:after {\n        content: '';\n        position: absolute;\n        top: -6px;\n        left: 64px;\n        width: 0;\n        height: 0;\n        border-left: 6px solid transparent;\n        border-right: 6px solid transparent;\n        border-bottom: 6px solid #be2626; }",
        "output": "str",
        "x": 630,
        "y": 260,
        "wires": [
            [
                "d9ccc36cd5f4c5b2"
            ]
        ]
    },
    {
        "id": "6beb7faf70dc9547",
        "type": "comment",
        "z": "5fde894cc9253f03",
        "name": "Complex",
        "info": "",
        "x": 200,
        "y": 220,
        "wires": []
    },
    {
        "id": "79012b29fa710381",
        "type": "debug",
        "z": "5fde894cc9253f03",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "req.files",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 458,
        "y": 377,
        "wires": []
    },
    {
        "id": "b33ff89757ad4fc1",
        "type": "http response",
        "z": "5fde894cc9253f03",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 520,
        "wires": []
    },
    {
        "id": "e65a6bdea18c5052",
        "type": "http in",
        "z": "5fde894cc9253f03",
        "name": "",
        "url": "/uploadpretty",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 390,
        "y": 460,
        "wires": [
            [
                "eef72310df9b1ea3",
                "79012b29fa710381"
            ]
        ]
    },
    {
        "id": "9bb2afa226d1d16c",
        "type": "template",
        "z": "5fde894cc9253f03",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<p></p>File {{name}} uploaded !</p>\n\n<h2>Contents:</h2>\n\n<pre>\n{{{payload}}}\n</pre>",
        "output": "str",
        "x": 710,
        "y": 580,
        "wires": [
            [
                "b33ff89757ad4fc1"
            ]
        ]
    },
    {
        "id": "eef72310df9b1ea3",
        "type": "function",
        "z": "5fde894cc9253f03",
        "name": "toBase64",
        "func": "msg.name = msg.req.files[0].originalname;\nmsg.filepath = \"/cases/processor/\" + msg.name;\nmsg.filedata = msg.req.files[0].buffer;\n\nif (msg.req.files[0].mimetype.includes('image')) {\n    msg.payload = `<img src=\"data:image/gif;base64,${msg.req.files[0].buffer.toString('base64')}\">`;\n} else {\n    msg.payload = msg.req.files[0].buffer.toString();\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 460,
        "wires": [
            [
                "7f88d1d25b183d11"
            ]
        ]
    },
    {
        "id": "7f88d1d25b183d11",
        "type": "file",
        "z": "5fde894cc9253f03",
        "name": "Write File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "binary",
        "x": 720,
        "y": 460,
        "wires": [
            [
                "9bb2afa226d1d16c"
            ]
        ]
    },
    {
        "id": "96cb284c3591def4",
        "type": "ui-template",
        "z": "eb4902f354a3b11b",
        "group": "b754f85f5adaf50c",
        "page": "",
        "ui": "",
        "name": "Binary File Upload",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-card width=\"1000\" height=\"400\" raised color=\"white\">\n        <v-card-title>Upload Triage / Image file for processing</v-card-title>\n        <br>\n        <v-card-text>\n            <v-file-input label=\"Click here to select a file\" show-size v-model=\"uploadFile\"></v-file-input>\n            <v-select v-model=\"fileType\" :items=\"['Triage', 'Malware']\" label=\"Select file type\"></v-select>\n            <div>Progress: {{ progress }} bytes loaded</div>\n        </v-card-text>\n        <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn right @click=\"startUpload\">Upload File</v-btn>\n        </v-card-actions>\n    </v-card>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                uploadFile: null,\n                fileType: null,\n                progress: 0\n            }\n        },\n        methods: {\n            startUpload() {\n                if (!this.uploadFile || !this.fileType) {\n                    return;\n                } else {\n                    const reader = new FileReader();\n                    reader.readAsArrayBuffer(this.uploadFile);\n                    reader.onload = () => {\n                        this.send({topic:\"upload\", payload: reader.result, file:{name: this.uploadFile.name, size: this.uploadFile.size, type: this.uploadFile.type, fileType: this.fileType }  });\n                    }\n                    reader.onprogress = (data) => {\n                        this.progress = data.loaded;\n                    }\n                }\n            }\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 390,
        "y": 280,
        "wires": [
            [
                "5db413f820f8928d"
            ]
        ]
    },
    {
        "id": "74c42d034a938e43",
        "type": "debug",
        "z": "eb4902f354a3b11b",
        "name": "debug 365",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 280,
        "wires": []
    },
    {
        "id": "5db413f820f8928d",
        "type": "function",
        "z": "eb4902f354a3b11b",
        "name": "buffer2string",
        "func": "msg.filename = msg.file.name;\nif (msg.file.fileType === 'Triage') {\n    msg.filepath = \"/cases/processor/\" + msg.filename;\n    msg.casesdir = \"/cases/processor/\";\n} else if (msg.file.fileType === 'Malware') {\n    msg.filepath = \"/cases/malware/\" + msg.filename;\n    msg.casesdir = \"/cases/malware/\";\n}\nmsg.homedir = \"/home/ubuntu/\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 280,
        "wires": [
            [
                "f5646da4c2a11943"
            ]
        ]
    },
    {
        "id": "f5646da4c2a11943",
        "type": "file",
        "z": "eb4902f354a3b11b",
        "name": "Save File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "binary",
        "x": 880,
        "y": 280,
        "wires": [
            [
                "74c42d034a938e43",
                "5c191812e3ec1017"
            ]
        ]
    },
    {
        "id": "5c191812e3ec1017",
        "type": "fs-ops-move",
        "z": "eb4902f354a3b11b",
        "name": "",
        "sourcePath": "homedir",
        "sourcePathType": "msg",
        "sourceFilename": "filename",
        "sourceFilenameType": "msg",
        "destPath": "casesdir",
        "destPathType": "msg",
        "destFilename": "filename",
        "destFilenameType": "msg",
        "link": false,
        "x": 1000,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "719fa2912769afc5",
        "type": "subflow:32cfc6ae564d5d0d",
        "z": "ce54a2c5ab584757",
        "name": "",
        "env": [
            {
                "name": "UPLOAD_DIR",
                "value": "/cases/processor",
                "type": "str"
            },
            {
                "name": "EXTENSIONS",
                "value": "txt,csv,exe",
                "type": "str"
            }
        ],
        "x": 630,
        "y": 260,
        "wires": [
            [
                "8538ebb992349203"
            ]
        ]
    },
    {
        "id": "8538ebb992349203",
        "type": "debug",
        "z": "ce54a2c5ab584757",
        "name": "debug 366",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 380,
        "wires": []
    },
    {
        "id": "d79a5718bb6c9a4c",
        "type": "ui-template",
        "z": "7e96772c649e1a24",
        "group": "b754f85f5adaf50c",
        "page": "",
        "ui": "",
        "name": "Binary File Upload",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-card width=\"600\" height=\"300\" raised color=\"white\">\n        <v-card-title>Upload Triage / Image file for processing</v-card-title>\n        <br>\n        <v-card-text>\n            <v-file-input label=\"Click here to select a file\" show-size v-model=\"uploadFile\"></v-file-input>\n            <v-select v-model=\"fileType\" :items=\"['Triage', 'Malware']\" label=\"Select file type\"></v-select>\n            <div>Progress: {{ progress }} bytes loaded</div>\n        </v-card-text>\n        <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn right @click=\"startUpload\">Upload File</v-btn>\n        </v-card-actions>\n    </v-card>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                uploadFile: null,\n                fileType: null,\n                progress: 0\n            }\n        },\n        methods: {\n            startUpload() {\n                if (!this.uploadFile || !this.fileType) {\n                    return;\n                } else {\n                    const reader = new FileReader();\n                    reader.readAsArrayBuffer(this.uploadFile);\n                    reader.onload = () => {\n                        this.send({topic:\"upload\", payload: reader.result, file:{name: this.uploadFile.name, size: this.uploadFile.size, type: this.uploadFile.type, fileType: this.fileType }  });\n                    }\n                    reader.onprogress = (data) => {\n                        this.progress = data.loaded;\n                    }\n                }\n            }\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 390,
        "y": 280,
        "wires": [
            [
                "8afdfc59ce4d331f"
            ]
        ]
    },
    {
        "id": "0e0d236bf6781095",
        "type": "debug",
        "z": "7e96772c649e1a24",
        "name": "debug 365",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 280,
        "wires": []
    },
    {
        "id": "8afdfc59ce4d331f",
        "type": "function",
        "z": "7e96772c649e1a24",
        "name": "buffer2string",
        "func": "msg.filename = msg.file.name;\nif (msg.file.fileType === 'Triage') {\n    msg.filepath = \"/cases/processor/\" + msg.filename;\n    msg.casesdir = \"/cases/processor/\";\n} else if (msg.file.fileType === 'Malware') {\n    msg.filepath = \"/cases/malware/\" + msg.filename;\n    msg.casesdir = \"/cases/malware/\";\n}\nmsg.homedir = \"/home/ubuntu/\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 280,
        "wires": [
            [
                "7acb9fb869328aec"
            ]
        ]
    },
    {
        "id": "7acb9fb869328aec",
        "type": "file",
        "z": "7e96772c649e1a24",
        "name": "Save File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "binary",
        "x": 880,
        "y": 280,
        "wires": [
            [
                "0e0d236bf6781095",
                "a0983a17ec52fb13"
            ]
        ]
    },
    {
        "id": "a0983a17ec52fb13",
        "type": "fs-ops-move",
        "z": "7e96772c649e1a24",
        "name": "",
        "sourcePath": "homedir",
        "sourcePathType": "msg",
        "sourceFilename": "filename",
        "sourceFilenameType": "msg",
        "destPath": "casesdir",
        "destPathType": "msg",
        "destFilename": "filename",
        "destFilenameType": "msg",
        "link": false,
        "x": 1000,
        "y": 380,
        "wires": [
            []
        ]
    }
]