[
    {
        "id": "2ef72603fd857dbf",
        "type": "tab",
        "label": "Triage Artefact Processor",
        "disabled": false,
        "info": ""
    },
    {
        "id": "0a2099f0976fac3e",
        "type": "tab",
        "label": "Upload File v1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "de1f8303de6271e1",
        "type": "tab",
        "label": "Malware Analysis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "16e1f685b5141ca0",
        "type": "tab",
        "label": "Log Analysis Tooling Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6e13988923128d2e",
        "type": "tab",
        "label": "Chainsaw Brainmap",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2424275587f107c0",
        "type": "tab",
        "label": "E01 Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6f38a6ed621b13e3",
        "type": "tab",
        "label": "VHD Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c589f114e349d156",
        "type": "tab",
        "label": "VMDK Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2b4f98517827515e",
        "type": "tab",
        "label": "VHDX Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e2ac7280594bc90c",
        "type": "tab",
        "label": "Detect Archive & Integrity Check",
        "disabled": false,
        "info": "This workflow identifies different types of archive types and runs integrity checks based on the archiving tool",
        "env": []
    },
    {
        "id": "e0e8620b48c94115",
        "type": "tab",
        "label": "Decompress Archive",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "19719f64cd3e2b14",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a71f2aab07aaa34c",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5276120499639caa",
        "type": "tab",
        "label": "Flow 7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c93069501e1f9f90",
        "type": "tab",
        "label": "v2.0 File Upload - works but file is in temp",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "b099e26ff6cc45c6",
        "type": "tab",
        "label": "v2.0 File Upload",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "305ce45000422aed",
        "type": "tab",
        "label": "v2.0 File Upload",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "32cfc6ae564d5d0d",
        "type": "subflow",
        "name": "v1.0 File Upload Process",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": []
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "43f940ed9ce785ce",
        "type": "subflow",
        "name": "v1.0 File Upload List Files",
        "info": "# List files\n\nWill list files in a directory.\n\nPath can be set in `msg.payload` or by setting the `DIRECTORY` environment variable.\n\nExtensions can be filtered by settings the `EXTENSIONS` environment variable to an Array of extensions.\n",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 40,
                "wires": []
            }
        ],
        "env": [
            {
                "name": "DIRECTORY",
                "type": "str",
                "value": ""
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "222508c268f888ed",
        "type": "subflow",
        "name": "v1.0 File Upload Process (2)",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "244fc0573ec60042",
                        "port": 0
                    },
                    {
                        "id": "4ff9856167ce51f5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "3510c15249601134",
        "type": "subflow",
        "name": "v1.0 File Upload List Files (2)",
        "info": "# List files\n\nWill list files in a directory.\n\nPath can be set in `msg.payload` or by setting the `DIRECTORY` environment variable.\n\nExtensions can be filtered by settings the `EXTENSIONS` environment variable to an Array of extensions.\n",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "db091c7d517dfe38"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 40,
                "wires": [
                    {
                        "id": "38c0c4627f7598fc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DIRECTORY",
                "type": "str",
                "value": ""
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "156d2c9c2338ddd3",
        "type": "group",
        "z": "a71f2aab07aaa34c",
        "name": "Display CSV and Button to send data on",
        "style": {
            "label": true
        },
        "nodes": [
            "7e15b6ca3b537387",
            "3b066a4d3b509ad3",
            "8ca9ca907634bf1b",
            "6e9c3aea3b691f0b",
            "b35577a87aeeca51",
            "c54758da97910bad",
            "c6eb6117b9515961",
            "f50e94f35879cae1",
            "1e3de643c9014f89"
        ],
        "x": 374,
        "y": 359,
        "w": 972,
        "h": 122
    },
    {
        "id": "8b5ba8cdcdaa1cc2",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default",
        "titleBarStyle": "default"
    },
    {
        "id": "a0d5c26f30a87f57",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "a5dce473dff6e850",
        "type": "ui-page",
        "name": "Page 1",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/page1",
        "icon": "home",
        "layout": "grid",
        "theme": "a0d5c26f30a87f57",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "f90a248ea69daed4",
        "type": "ui-group",
        "name": "My Group",
        "page": "a5dce473dff6e850",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "44995fb7d177036d",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "51e6bb361023da7b",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "593b416f7925a9c3",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e77c5599318d7fe9",
        "type": "ui_group",
        "name": "Default",
        "tab": "51e6bb361023da7b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c36683abfea464ab",
        "type": "ui_group",
        "name": "Button",
        "tab": "56c835f449250c05",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "bf511c429347600b",
        "type": "ui_group",
        "name": "Analog",
        "tab": "56c835f449250c05",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "56c835f449250c05",
        "type": "ui_tab",
        "name": "Basic Dashboard",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "428ab78f5c4bf575",
        "type": "ui_group",
        "name": "Sense Hat Simulator ",
        "tab": "75b50dbfa3604467",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "5ff5147f8648a403",
        "type": "ui_group",
        "name": "CPU On/Off",
        "tab": "75b50dbfa3604467",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7d8254324b138095",
        "type": "ui_group",
        "name": "CPU Gauges",
        "tab": "75b50dbfa3604467",
        "order": 3,
        "disp": true,
        "width": "3"
    },
    {
        "id": "75b50dbfa3604467",
        "type": "ui_tab",
        "name": "CPU Dashboard",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7ed671ae3cc4b57a",
        "type": "ui_group",
        "name": "Start/Stop",
        "tab": "51e6bb361023da7b",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false,
        "className": ""
    },
    {
        "id": "57f5f4e3b78093b9",
        "type": "ui-page",
        "name": "Data Entry New",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/entry",
        "icon": "note-multiple",
        "layout": "grid",
        "theme": "2130590e793ec382",
        "order": 9,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "2130590e793ec382",
        "type": "ui-theme",
        "name": "Basic Blue Theme",
        "colors": {
            "surface": "#4d58ff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "a5ac65ae869c4d40",
        "type": "ui-group",
        "name": "Group Name",
        "page": "1c72c39cefdf8ad4",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "ebd8d74c8d76dbaa",
        "type": "ui-group",
        "name": "Task List",
        "page": "074e90d740060739",
        "width": "12",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "82e85fa04a2fa891",
        "type": "ui-group",
        "name": "Tasks List",
        "page": "94074231a3fd3462",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "136bf7f9ce0bf97c",
        "type": "ui-group",
        "name": "Raspberry Pi Data",
        "page": "9c6e5ede4f3c5463",
        "width": "3",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "bceb9f6d7fefa49b",
        "type": "ui-group",
        "name": "CO2 Levels",
        "page": "9c6e5ede4f3c5463",
        "width": "4",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "1c72c39cefdf8ad4",
        "type": "ui-page",
        "name": "Task Submission",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/submit-data",
        "icon": "form-textbox",
        "layout": "notebook",
        "theme": "0b3daa94abc7cbfd",
        "order": 6,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "074e90d740060739",
        "type": "ui-page",
        "name": "Admin View",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/admin",
        "icon": "lock",
        "layout": "grid",
        "theme": "b38faedd465780d2",
        "order": 8,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "94074231a3fd3462",
        "type": "ui-page",
        "name": "Your Tasks",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/tasks",
        "icon": "view-list-outline",
        "layout": "grid",
        "theme": "0b3daa94abc7cbfd",
        "order": 7,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9c6e5ede4f3c5463",
        "type": "ui-page",
        "name": "Data Dashboard",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/data",
        "icon": "gauge",
        "layout": "grid",
        "theme": "0b3daa94abc7cbfd",
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "0b3daa94abc7cbfd",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "b38faedd465780d2",
        "type": "ui-theme",
        "name": "Admin Theme",
        "colors": {
            "surface": "#454545",
            "primary": "#d47e1c",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "a5dafe217d54eb4e",
        "type": "ui-group",
        "name": "Group Name",
        "page": "9059535403d00e6f",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": ""
    },
    {
        "id": "9059535403d00e6f",
        "type": "ui-page",
        "name": "Page Name",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/",
        "icon": "",
        "layout": "grid",
        "theme": "41193376c0284784",
        "order": 5,
        "className": ""
    },
    {
        "id": "8b040dd7e14d5a19",
        "type": "ui-group",
        "name": "CSV Table",
        "page": "9059535403d00e6f",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": ""
    },
    {
        "id": "41193376c0284784",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        }
    },
    {
        "id": "e5e7f2966d8565e9",
        "type": "ui-group",
        "name": "Upload New",
        "page": "",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6f30b1b001a9b330",
        "type": "ui_group",
        "name": "File upload",
        "tab": "4a6b592c4970dc8c",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4a6b592c4970dc8c",
        "type": "ui_tab",
        "name": "File Upload",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4a496db773c871a8",
        "type": "ui-group",
        "name": "System Resources",
        "page": "074e90d740060739",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "e0d4dcde7626ef90",
        "type": "ui_group",
        "name": "CPU Load",
        "tab": "bfab5c48aa89a7d5",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5ff0b34d73fe7838",
        "type": "ui_group",
        "name": "Memory",
        "tab": "bfab5c48aa89a7d5",
        "order": 3,
        "disp": true,
        "width": "6"
    },
    {
        "id": "919f51838b52e21a",
        "type": "ui_group",
        "name": "System Information",
        "tab": "bfab5c48aa89a7d5",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "bfab5c48aa89a7d5",
        "type": "ui_tab",
        "name": "DFIR_NodeRED System Resource Monitor",
        "icon": "computer",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "05b0a302dbcffd52",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "bc480fbb2fd49c21",
        "type": "ui-page",
        "name": "upload to table",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/page8",
        "icon": "home",
        "layout": "grid",
        "theme": "b38faedd465780d2",
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "2d1d3e7a2bda2267",
        "type": "ui-group",
        "name": "Group Name",
        "page": "bc480fbb2fd49c21",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "f768bc7f4dcd5147",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "4a6b592c4970dc8c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6426525.5bfe1ac",
        "type": "ui_group",
        "name": "Default",
        "tab": "cb135bc2.cc3d9",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "cb135bc2.cc3d9",
        "type": "ui_tab",
        "name": "Anomaly",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ed78c3f2d9d2063a",
        "type": "ui_group",
        "name": "Upload New",
        "tab": "19c22d46ed6ce5a6",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "disabled": "false",
        "className": ""
    },
    {
        "id": "96d01ec87cc53539",
        "type": "ui_base",
        "name": "My UI"
    },
    {
        "id": "19c22d46ed6ce5a6",
        "type": "ui_tab",
        "name": "upload 444",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ae98c82ccb897014",
        "type": "ui_group",
        "name": "Upload New",
        "tab": "",
        "order": 1,
        "width": "6",
        "disabled": "false",
        "className": ""
    },
    {
        "id": "b27444db8a570980",
        "type": "ui_base",
        "name": "My UI"
    },
    {
        "id": "a70602e73bbb2a95",
        "type": "ui-theme",
        "name": "Admin Theme",
        "colors": {
            "surface": "#454545",
            "primary": "#d47e1c",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "423be3e1ba866ab4",
        "type": "ui-page",
        "name": "Upload New",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/page7",
        "icon": "home",
        "layout": "grid",
        "theme": "b38faedd465780d2",
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "8bd7229a2d52254a",
        "type": "http in",
        "z": "222508c268f888ed",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "1a45ddbb27edeee2",
                "9f80739c345e0843",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "939472bb0b454ebd",
        "type": "http response",
        "z": "222508c268f888ed",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "df70311454c8581b",
        "type": "ui_template",
        "z": "222508c268f888ed",
        "group": "6f30b1b001a9b330",
        "name": "Upload",
        "order": 2,
        "width": 6,
        "height": 3,
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "2e4fb172af1a331e",
        "type": "ui_dropdown",
        "z": "222508c268f888ed",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "6f30b1b001a9b330",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "2446953591899c0b"
            ]
        ]
    },
    {
        "id": "a1e6c23825b75bdf",
        "type": "link in",
        "z": "222508c268f888ed",
        "name": "refreshFileDropdown",
        "links": [
            "7098d634fb030f4a",
            "ff60845f929f159c"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "9a343af744e06862"
            ]
        ]
    },
    {
        "id": "d80c531e7ca81397",
        "type": "ui_button",
        "z": "222508c268f888ed",
        "name": "",
        "group": "6f30b1b001a9b330",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "2305e13f2cadee4a"
            ]
        ]
    },
    {
        "id": "2446953591899c0b",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1a45ddbb27edeee2",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "123b9e69cab4a903",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "b1751fd555954302",
        "type": "file",
        "z": "222508c268f888ed",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "244fc0573ec60042",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "001c04ad439bbc4b",
        "type": "inject",
        "z": "222508c268f888ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "9a343af744e06862"
            ]
        ]
    },
    {
        "id": "2305e13f2cadee4a",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "8d6c23213463686d"
            ]
        ]
    },
    {
        "id": "4ff9856167ce51f5",
        "type": "file",
        "z": "222508c268f888ed",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "ff60845f929f159c"
            ]
        ]
    },
    {
        "id": "8d6c23213463686d",
        "type": "ui_toast",
        "z": "222508c268f888ed",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "ecb695364ad58344"
            ]
        ]
    },
    {
        "id": "ecb695364ad58344",
        "type": "switch",
        "z": "222508c268f888ed",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "4ff9856167ce51f5"
            ]
        ]
    },
    {
        "id": "843073f5f477c0e1",
        "type": "catch",
        "z": "222508c268f888ed",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "84b08301fac28e8a"
            ]
        ]
    },
    {
        "id": "7c0ba388006365f1",
        "type": "ui_toast",
        "z": "222508c268f888ed",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "84b08301fac28e8a",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "7c0ba388006365f1",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "ff60845f929f159c",
        "type": "link out",
        "z": "222508c268f888ed",
        "name": "refreshAfterDelete",
        "links": [
            "a1e6c23825b75bdf"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "7098d634fb030f4a",
        "type": "link out",
        "z": "222508c268f888ed",
        "name": "refreshAfterUpload",
        "links": [
            "a1e6c23825b75bdf"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "9f80739c345e0843",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "939472bb0b454ebd",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "9a343af744e06862",
        "type": "delay",
        "z": "222508c268f888ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4b59cd4f817539dd",
        "type": "watch",
        "z": "222508c268f888ed",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "9a343af744e06862"
            ]
        ]
    },
    {
        "id": "ac070e499f59101e",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "2e4fb172af1a331e"
            ]
        ]
    },
    {
        "id": "123b9e69cab4a903",
        "type": "switch",
        "z": "222508c268f888ed",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "b1751fd555954302",
                "79970e0aeaf9ad26"
            ],
            [
                "4133dd21e6d1cd93",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "4133dd21e6d1cd93",
        "type": "function",
        "z": "222508c268f888ed",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "244fc0573ec60042",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "7098d634fb030f4a"
            ]
        ]
    },
    {
        "id": "5fa5a1fe33957f8c",
        "type": "watch",
        "z": "222508c268f888ed",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 740,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "79970e0aeaf9ad26",
        "type": "debug",
        "z": "222508c268f888ed",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "a0ac55dbe84c6ca8",
        "type": "http in",
        "z": "222508c268f888ed",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "af5447c63795c250",
        "type": "exec",
        "z": "3510c15249601134",
        "command": "ls",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 510,
        "y": 60,
        "wires": [
            [
                "38c0c4627f7598fc"
            ],
            [],
            []
        ]
    },
    {
        "id": "38c0c4627f7598fc",
        "type": "change",
        "z": "3510c15249601134",
        "name": "split and filter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t    $files := [$split(payload, '\\n')[$ != \"\"]];\t    $count($env('EXTENSIONS')) = 0 ? [$files] : [$files[$split($, '.')[-1] in $env('EXTENSIONS')]];\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "db091c7d517dfe38",
        "type": "switch",
        "z": "3510c15249601134",
        "name": "",
        "property": "$env('DIRECTORY')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 80,
        "wires": [
            [
                "af5447c63795c250"
            ],
            [
                "8cf739e91a56e075"
            ]
        ]
    },
    {
        "id": "8cf739e91a56e075",
        "type": "change",
        "z": "3510c15249601134",
        "name": "DIRECTORY",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DIRECTORY",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "af5447c63795c250"
            ]
        ]
    },
    {
        "id": "32a1ee876ca4e11d",
        "type": "function",
        "z": "2ef72603fd857dbf",
        "name": "Set-Log2timeline CLI params",
        "func": "var plasodir = \"/cases/plaso/\";\nvar plasoname = msg.dirname.replace('processor', 'plaso');\nmsg.l2tcli = \"log2timeline.py --status_view none --parsers \\\"filestat,winreg,esedb,binary_cookies,chrome_cache,chrome_preferences,custom_destinations,czip,firefox_cache,firefox_cache2,java_idx,jsonl,lnk,mcafee_protection,msiecf,olecf,opera_global,opera_typed_history,pe,prefetch,recycle_bin,recycle_bin_info2,sqlite,symantec_scanlog,text,trendmicro_url,trendmicro_vd,windefender_history,winevt,winevtx,winjob\\\" --storage-file\" + \" \" + plasoname + \".plaso\" + \" \" + msg.unzipdir;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 920,
        "wires": [
            [
                "e2efe398caadb617"
            ]
        ]
    },
    {
        "id": "e2efe398caadb617",
        "type": "exec",
        "z": "2ef72603fd857dbf",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 720,
        "y": 920,
        "wires": [
            [],
            [],
            [
                "e7f4ec5694e9a73c"
            ]
        ]
    },
    {
        "id": "113d569c43e0c329",
        "type": "exec",
        "z": "2ef72603fd857dbf",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 940,
        "y": 1120,
        "wires": [
            [],
            [],
            [
                "baddc75bcefd07e3"
            ]
        ]
    },
    {
        "id": "f26e777b4ee8e480",
        "type": "function",
        "z": "2ef72603fd857dbf",
        "name": "Timesketch CLI params",
        "func": "var plasofullpath = \"/cases/plaso/\"+ msg.plasofname + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.plasofname + \"-triage\" + \" --sketch_id \" + \"1\" + \" \" + plasofullpath;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1120,
        "wires": [
            [
                "113d569c43e0c329"
            ]
        ]
    },
    {
        "id": "07b59175a9096ba2",
        "type": "debug",
        "z": "2ef72603fd857dbf",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 1120,
        "wires": []
    },
    {
        "id": "54bd0e80f7454097",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "1) Monitored Directory /cases/processor (ZIP/Image)",
        "info": "",
        "x": 270,
        "y": 180,
        "wires": []
    },
    {
        "id": "7976c1ad8bce6013",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "Double click on Queue Zips to the adjust bulk processing value",
        "info": "Tweak the value to configure how many archives to process at any given time",
        "x": 1680,
        "y": 100,
        "wires": []
    },
    {
        "id": "b4c54ee2872b806e",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 2060,
        "y": 840,
        "wires": []
    },
    {
        "id": "f9c8788212a62488",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "Change Timesketch CLI params here",
        "info": "",
        "x": 630,
        "y": 1080,
        "wires": []
    },
    {
        "id": "baddc75bcefd07e3",
        "type": "switch",
        "z": "2ef72603fd857dbf",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1240,
        "y": 1120,
        "wires": [
            [
                "613d886f077cbfbd"
            ],
            [
                "07b59175a9096ba2",
                "613d886f077cbfbd"
            ]
        ]
    },
    {
        "id": "6a9b30b833f0f0ad",
        "type": "exec",
        "z": "2ef72603fd857dbf",
        "command": "rm -rf ",
        "addpay": "unzipdir",
        "append": "",
        "useSpawn": "false",
        "timer": "300",
        "winHide": false,
        "oldrc": false,
        "name": "Delete Decompressed Dir",
        "x": 1210,
        "y": 940,
        "wires": [
            [],
            [],
            [
                "fe907a63fd2d86be"
            ]
        ]
    },
    {
        "id": "890027881ef60c1e",
        "type": "switch",
        "z": "2ef72603fd857dbf",
        "name": "Decompression Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 380,
        "wires": [
            [
                "4b6ecb5fbd31729a"
            ],
            [
                "1dd7f5825a9b93de",
                "613d886f077cbfbd"
            ]
        ]
    },
    {
        "id": "1dd7f5825a9b93de",
        "type": "debug",
        "z": "2ef72603fd857dbf",
        "name": "Decompress Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 460,
        "wires": []
    },
    {
        "id": "225c5ddfd129e7b0",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "READ ME FIRST! Double Click",
        "info": "**CURRENT CONFIG OF THE AUTOMATION DO NOT PROCESS NESTED ZIPS OF HOSTS.FOR EXAMPLE, YOU CANNOT UPLOAD A SINGLE ZIP CONTAINING TRIAGE ARCHIVES OF N DIFFERENT HOSTS.**\n\n**Following folders need to be created beforehand**\n/cases/processor - this is where archives will need to be copied to. Note that the original archives copied here will be retained indefinitely.\n/cases/plaso - this is where plaso files be stored after log2timeline completes its processing.\n/cases/evtxproc/ -processed hayabusa csvs will be stored here.\n\n**Hayabusa Evtx Processing***\nThis is currently configured for KAPE triage configurations, where the evtx is expected like below\nunzipped directory/C/Windows/System32/winevt/. You can change the path by updating the path in Hayabusa Process Variables node. You must change the timesketch username and password information in the same node. Otherwise it will fail to ingest to Timesketch\n\n***Slack notifications***\nYou must set the slack webhook and username configuration within the \"Notification to Slack\" node within \"Slack Notifications\" flow \n\nMake sure Node-RED can read and write to all folders under /cases.\n\n**Compression utility must be pre-installed on the Linux host prior running the workflow**\nThis automation is configured to detect Zip, RAR, Tar GZ & BZ2, 7z archives.\n\n** \"Variable Setup\" node** \nThis node contains the key commandline parameters used for archive tools and other variables required for automation.\n\n**You need the following Node-RED nodes installed via the Node-RED palette**\n\n-node-red-contrib-fs \n-node-red-contrib-fs-ops \n-node-red-contrib-simple-queue \n-node-red-contrib-watchdirectory\n-node-red-contrib-slack-files\n\n**Change the Log2Timeline CLI Parameters and Timesketch CLI Parameters**\nYou should review the CLI parameters used for Log2timeline and Timesketch in their respective nodes. \n\n\n**FYI Only**\nNode-RED has a default memory cap of 2GB. You can increase this through the use of environment variables. Add the following to your bash.rc of the user in which Node-RED runs. Size is in MB.\n\nNODE_OPTIONS=--max_old_space_size=4096",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "fe907a63fd2d86be",
        "type": "switch",
        "z": "2ef72603fd857dbf",
        "name": "Delete Folder",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1440,
        "y": 960,
        "wires": [
            [
                "f26e777b4ee8e480"
            ],
            [
                "613d886f077cbfbd",
                "d8086b41443ea56d"
            ]
        ]
    },
    {
        "id": "fcd348fb5cebc04e",
        "type": "debug",
        "z": "2ef72603fd857dbf",
        "name": "L2T Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 880,
        "wires": []
    },
    {
        "id": "d8086b41443ea56d",
        "type": "debug",
        "z": "2ef72603fd857dbf",
        "name": "Folder Deletion Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 940,
        "wires": []
    },
    {
        "id": "cef77458885dcb6e",
        "type": "link out",
        "z": "2ef72603fd857dbf",
        "name": "Archive Detection",
        "mode": "link",
        "links": [
            "71fd33dba37a5198",
            "a8d477a02835a411"
        ],
        "x": 1685,
        "y": 340,
        "wires": []
    },
    {
        "id": "0363012d291d78d5",
        "type": "link in",
        "z": "2ef72603fd857dbf",
        "name": "Post Integrity Check In",
        "links": [
            "bda59d5847d25ee6"
        ],
        "x": 595,
        "y": 360,
        "wires": [
            [
                "613d886f077cbfbd"
            ]
        ]
    },
    {
        "id": "6bb78dccbead9567",
        "type": "function",
        "z": "2ef72603fd857dbf",
        "name": "Variable Setup",
        "func": "//Setting up directory path of the file upload\nmsg.config ={}\nmsg.config.start = msg.filedir\n\n//Setting up vars to handle archive decompress operations\nvar filenameUpper = msg.file.split(\".\")[0];\nvar filename = filenameUpper.toLowerCase();\nmsg.tstamp = new Date().toISOString().substring(0,19).replace(/-/g,\"\").replace(/:/g,\"\");\nvar dirnameUpper = filename + msg.tstamp + \"Z\";\nmsg.dirname = dirnameUpper.toLowerCase();\nmsg.plasofname = msg.dirname;\n//msg.filename = msg.payload;\n\n//Setting up decompress parameters\nmsg.unzipdir = msg.filedir + '/' + msg.dirname;\nmsg.unzipcli = \"-qo \" + msg.filename + \" -d \" + msg.unzipdir;\nmsg.sevzipcli = \" x \" + msg.filename + \" -o\" + msg.unzipdir;\nmsg.targzcli = \" xzf \" + msg.filename + \" -C \" + msg.unzipdir;\nmsg.tarbz2cli = \" xjf \" + msg.filename + \" -C \" + msg.unzipdir;\nmsg.unrarcli = \"x \" + msg.filename + \" \" + msg.unzipdir;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 340,
        "wires": [
            [
                "cef77458885dcb6e"
            ]
        ]
    },
    {
        "id": "e0c47dbf33f6c6ad",
        "type": "link out",
        "z": "2ef72603fd857dbf",
        "name": "ToDecompress",
        "mode": "link",
        "links": [
            "2ed0369bbc38ebe9"
        ],
        "x": 1115,
        "y": 440,
        "wires": []
    },
    {
        "id": "d02f224c16f5b49e",
        "type": "link in",
        "z": "2ef72603fd857dbf",
        "name": "Decompress Status In",
        "links": [
            "03eb45897eb13de7"
        ],
        "x": 65,
        "y": 380,
        "wires": [
            [
                "890027881ef60c1e"
            ]
        ]
    },
    {
        "id": "e7f4ec5694e9a73c",
        "type": "switch",
        "z": "2ef72603fd857dbf",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 960,
        "y": 920,
        "wires": [
            [
                "6a9b30b833f0f0ad"
            ],
            [
                "613d886f077cbfbd",
                "fcd348fb5cebc04e"
            ]
        ]
    },
    {
        "id": "86e0c57a017aad7c",
        "type": "function",
        "z": "2ef72603fd857dbf",
        "name": "KAPE Hayabusa Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.kape = msg.dirname + '/C/Windows/System32/winevt/logs/';\nmsg.hayabusa_job = msg.plasofname + '-hayabusa';\nmsg.hayabusa_out = '/cases/evtxproc/' + msg.hayabusa_job;\nmsg.hayabusa_exec =  'csv-timeline -d ' +msg.kape+ ' --RFC-3339 -o ' + msg.hayabusa_out + '.csv' + ' -p timesketch-verbose -U --no-wizard'\nmsg.hayabusa_ts = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.hayabusa_job + \" --sketch_id \" + \"1 \" + msg.hayabusa_out + '.csv';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 620,
        "wires": [
            [
                "25fa591196e92466",
                "48433fe0504f4806"
            ]
        ]
    },
    {
        "id": "25fa591196e92466",
        "type": "link out",
        "z": "2ef72603fd857dbf",
        "name": "Out to Hayabusa Process",
        "mode": "link",
        "links": [
            "3477a8d40121de97"
        ],
        "x": 705,
        "y": 680,
        "wires": []
    },
    {
        "id": "d731fcd58dfc52dc",
        "type": "link in",
        "z": "2ef72603fd857dbf",
        "name": "Hayabusa to Timesketch In",
        "links": [
            "5bab52820bee8b41",
            "3490bf76b9561897"
        ],
        "x": 235,
        "y": 880,
        "wires": [
            [
                "32a1ee876ca4e11d"
            ]
        ]
    },
    {
        "id": "3c4c176876b475b7",
        "type": "debug",
        "z": "2ef72603fd857dbf",
        "name": "Hayabusa Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 540,
        "wires": []
    },
    {
        "id": "37d048a42403a64d",
        "type": "link in",
        "z": "2ef72603fd857dbf",
        "name": "From Hayabusa Failure",
        "links": [
            "93dc3a642e3dae2e"
        ],
        "x": 1665,
        "y": 600,
        "wires": [
            [
                "613d886f077cbfbd",
                "2e3879c24019a450",
                "32a1ee876ca4e11d"
            ]
        ]
    },
    {
        "id": "2e3879c24019a450",
        "type": "debug",
        "z": "2ef72603fd857dbf",
        "name": "Hayabusa Timesketch Ingestion Failure",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 600,
        "wires": []
    },
    {
        "id": "78a3b760058429d7",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "KAPE Zips Hayabusa specific config here",
        "info": "",
        "x": 400,
        "y": 580,
        "wires": []
    },
    {
        "id": "883d44bc7af1d03c",
        "type": "link out",
        "z": "2ef72603fd857dbf",
        "name": "E01 Process",
        "mode": "link",
        "links": [
            "77ea6b536861ca00"
        ],
        "x": 1225,
        "y": 20,
        "wires": []
    },
    {
        "id": "5efe1fef3a8587d8",
        "type": "function",
        "z": "2ef72603fd857dbf",
        "name": "Process ZIP",
        "func": "msg.payload = \"Processing ZIP file: \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 340,
        "wires": [
            [
                "6bb78dccbead9567"
            ]
        ]
    },
    {
        "id": "f8e34344796e21bc",
        "type": "switch",
        "z": "2ef72603fd857dbf",
        "name": "File Type",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.E01",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.zip",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.vhd",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": ".*\\.vhdx",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.vmdk",
                "vt": "str",
                "case": true
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 980,
        "y": 80,
        "wires": [
            [
                "883d44bc7af1d03c"
            ],
            [
                "5efe1fef3a8587d8"
            ],
            [
                "e20d24d3d2e0716c"
            ],
            [
                "c4b36f85e4d010fd"
            ],
            [
                "f83735497e838b6c"
            ]
        ]
    },
    {
        "id": "e20d24d3d2e0716c",
        "type": "link out",
        "z": "2ef72603fd857dbf",
        "name": "VHD Process",
        "mode": "link",
        "links": [
            "23e64aa548420a50"
        ],
        "x": 1225,
        "y": 60,
        "wires": []
    },
    {
        "id": "f83735497e838b6c",
        "type": "link out",
        "z": "2ef72603fd857dbf",
        "name": "VMDK Process",
        "mode": "link",
        "links": [
            "f7124b3b9e61600e"
        ],
        "x": 1225,
        "y": 100,
        "wires": []
    },
    {
        "id": "c4b36f85e4d010fd",
        "type": "link out",
        "z": "2ef72603fd857dbf",
        "name": "VHDX Process",
        "mode": "link",
        "links": [
            "d7086a1b806169c9"
        ],
        "x": 1225,
        "y": 140,
        "wires": []
    },
    {
        "id": "6df068ee63922100",
        "type": "watch-directory",
        "z": "2ef72603fd857dbf",
        "d": true,
        "folder": "/cases/processor/",
        "recursive": "1",
        "typeEvent": "create",
        "ignoreInitial": true,
        "ignoredFiles": "",
        "ignoredFilesType": "re",
        "name": "Watch for Triage Archives",
        "x": 230,
        "y": 220,
        "wires": [
            [
                "c7f0121773c86f07"
            ]
        ]
    },
    {
        "id": "613d886f077cbfbd",
        "type": "simple-queue",
        "z": "2ef72603fd857dbf",
        "name": "Queue Zips",
        "count": "1",
        "unique_check": "",
        "x": 750,
        "y": 420,
        "wires": [
            [
                "60235fc533980e53"
            ]
        ]
    },
    {
        "id": "60235fc533980e53",
        "type": "fs-ops-mkdir",
        "z": "2ef72603fd857dbf",
        "name": "Create Unzip Dir",
        "path": "filedir",
        "pathType": "msg",
        "dirname": "dirname",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "777",
        "fullpath": "dirname",
        "fullpathType": "msg",
        "x": 980,
        "y": 420,
        "wires": [
            [
                "e0c47dbf33f6c6ad"
            ]
        ]
    },
    {
        "id": "4b6ecb5fbd31729a",
        "type": "switch",
        "z": "2ef72603fd857dbf",
        "name": "",
        "property": "dirname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "/kape/",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "/collection/",
                "vt": "msg",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 620,
        "wires": [
            [
                "86e0c57a017aad7c"
            ],
            [
                "130a969519a652a0",
                "1841a511575b68d6"
            ]
        ]
    },
    {
        "id": "130a969519a652a0",
        "type": "function",
        "z": "2ef72603fd857dbf",
        "name": "VR Hayabusa Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.vr = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs/';\nmsg.hayabusa_job = msg.plasofname + '-hayabusa';\nmsg.hayabusa_out = '/cases/evtxproc/' + msg.hayabusa_job;\nmsg.hayabusa_exec =  'csv-timeline -d ' +msg.vr+ ' --RFC-3339 -o ' + msg.hayabusa_out + '.csv' + ' -p timesketch-verbose -U --no-wizard'\n//msg.hayabusa_ts = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.hayabusa_job + \" --sketch_id \" + \"1 \" + msg.hayabusa_out + '.csv';\nmsg.hayabusa_ts = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + this.uploadFile.name + \" --sketch_id \" + this.timesketchId + \" \" + this.uploadFile.name + '.csv'\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 720,
        "wires": [
            [
                "25fa591196e92466",
                "e1b45aa6458c2db9"
            ]
        ]
    },
    {
        "id": "1841a511575b68d6",
        "type": "debug",
        "z": "2ef72603fd857dbf",
        "name": "Switch Hayabusa Variable ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e1b45aa6458c2db9",
        "type": "debug",
        "z": "2ef72603fd857dbf",
        "name": "VR Hayabusa Processing",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1080,
        "wires": []
    },
    {
        "id": "48433fe0504f4806",
        "type": "debug",
        "z": "2ef72603fd857dbf",
        "name": "KAPE Hayabusa Processing",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 1120,
        "wires": []
    },
    {
        "id": "10e006ee1088e08f",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "2) Switch depending on filetype",
        "info": "",
        "x": 590,
        "y": 60,
        "wires": []
    },
    {
        "id": "ed63c92d202a389c",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "3) Zip File Flow",
        "info": "",
        "x": 1300,
        "y": 300,
        "wires": []
    },
    {
        "id": "a7b69209252ac9b5",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "4) Decompress Zip",
        "info": "",
        "x": 250,
        "y": 340,
        "wires": []
    },
    {
        "id": "455cb4e4cb857509",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "5) Queue of multiple zip files and create zip directory",
        "info": "",
        "x": 910,
        "y": 380,
        "wires": []
    },
    {
        "id": "e4f61ea491b12029",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "Velociraptor Zips Hayabusa specific config here",
        "info": "",
        "x": 420,
        "y": 680,
        "wires": []
    },
    {
        "id": "5206abe514bdde85",
        "type": "link in",
        "z": "2ef72603fd857dbf",
        "name": "Hayabusa Process Failed",
        "links": [
            "d1adc25ddc244ce4"
        ],
        "x": 1665,
        "y": 540,
        "wires": [
            [
                "613d886f077cbfbd",
                "3c4c176876b475b7",
                "32a1ee876ca4e11d"
            ]
        ]
    },
    {
        "id": "5c0d7a5443d05eb0",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "ADD BSTRINGS to extract all IOCS to files",
        "info": "",
        "x": 1620,
        "y": 180,
        "wires": []
    },
    {
        "id": "5733cebb859f5aaa",
        "type": "comment",
        "z": "2ef72603fd857dbf",
        "name": "ADD BSTRINGS to extract all IOCS to files",
        "info": "",
        "x": 1620,
        "y": 140,
        "wires": []
    },
    {
        "id": "a0adbba3e814ee87",
        "type": "function",
        "z": "2ef72603fd857dbf",
        "name": "SHA256 Extract Params",
        "func": "msg.sha256 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\nmsg.md5 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\nmsg.sha1 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 280,
        "wires": [
            [
                "3bf5b54cd7270e1d"
            ]
        ]
    },
    {
        "id": "3bf5b54cd7270e1d",
        "type": "exec",
        "z": "2ef72603fd857dbf",
        "command": "echo -n \"sha256 =  \" >> /cases/processor/hashes/hashes.txt && sha256sum",
        "addpay": "sha256",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "SHA256 Process",
        "x": 790,
        "y": 180,
        "wires": [
            [],
            [],
            [
                "cece4cc08f11ae34"
            ]
        ]
    },
    {
        "id": "cece4cc08f11ae34",
        "type": "exec",
        "z": "2ef72603fd857dbf",
        "command": "echo -n \"sha1 =  \" >> /cases/processor/hashes/hashes.txt && sha1sum",
        "addpay": "sha1",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "SHA1 Process",
        "x": 800,
        "y": 240,
        "wires": [
            [],
            [],
            [
                "37152805fd6db6c3"
            ]
        ]
    },
    {
        "id": "37152805fd6db6c3",
        "type": "exec",
        "z": "2ef72603fd857dbf",
        "command": "echo -n \"md5 = \" >> /cases/processor/hashes/hashes.txt && md5sum",
        "addpay": "md5",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "MD5 Process",
        "x": 800,
        "y": 300,
        "wires": [
            [],
            [],
            [
                "f8e34344796e21bc",
                "c7f0121773c86f07"
            ]
        ]
    },
    {
        "id": "c7f0121773c86f07",
        "type": "simple-queue",
        "z": "2ef72603fd857dbf",
        "name": "Queue files",
        "count": "1",
        "unique_check": "",
        "x": 270,
        "y": 280,
        "wires": [
            [
                "a0adbba3e814ee87"
            ]
        ]
    },
    {
        "id": "4bd707b0d5431bc4",
        "type": "ui_upload",
        "z": "0a2099f0976fac3e",
        "group": "6426525.5bfe1ac",
        "title": "",
        "accept": "",
        "name": "Large file",
        "order": 0,
        "width": 6,
        "height": 6,
        "chunk": "256",
        "transfer": "binary",
        "x": 440,
        "y": 420,
        "wires": [
            [
                "8a493fd910d3ec22"
            ]
        ]
    },
    {
        "id": "8a493fd910d3ec22",
        "type": "split",
        "z": "0a2099f0976fac3e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 650,
        "y": 420,
        "wires": [
            [
                "afcf503711c1ef72"
            ]
        ]
    },
    {
        "id": "fa5ae7d1ef221ac1",
        "type": "comment",
        "z": "0a2099f0976fac3e",
        "name": "Split stream by line",
        "info": "",
        "x": 650,
        "y": 260,
        "wires": []
    },
    {
        "id": "d128c781b4658663",
        "type": "file",
        "z": "0a2099f0976fac3e",
        "name": "Save File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "binary",
        "x": 1180,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "afcf503711c1ef72",
        "type": "function",
        "z": "0a2099f0976fac3e",
        "name": "buffer2string",
        "func": "msg.filename = msg.file.name;\nif (msg.fileType === 'Triage') {\n    msg.filepath = \"/cases/processor/\" + msg.filename;\n    msg.casesdir = \"/cases/processor/\";\n    msg.logfile = \"/cases/processor/logfile/logfile.txt\";\n    msg.homedir = \"/cases/processor/\"\n} else if (msg.fileType === 'Malware') {\n    msg.filepath = \"/cases/malware/\" + msg.filename;\n    msg.casesdir = \"/cases/malware/\";\n    msg.logfile = \"/cases/malware/logfile/logfile.txt\";\n    msg.homedir = \"/cases/malware/\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 420,
        "wires": [
            [
                "d128c781b4658663"
            ]
        ]
    },
    {
        "id": "645f72ff3879cc95",
        "type": "function",
        "z": "0a2099f0976fac3e",
        "name": "SHA256 Extract Params",
        "func": "let fileTypePrefix = msg.fileType === 'Malware' ? 'Malware' : 'Triage';\nmsg.command = `echo -n \"${fileTypePrefix} Uploaded File = ${msg.casesdir}${msg.filename}\" >> ${msg.logfile} && echo \"\" >> ${msg.logfile}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 500,
        "wires": [
            [
                "77a92c90880ca9b2"
            ]
        ]
    },
    {
        "id": "77a92c90880ca9b2",
        "type": "exec",
        "z": "0a2099f0976fac3e",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "LogFile Process",
        "x": 900,
        "y": 620,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "9918a1a69fb1c195",
        "type": "ui_dropdown",
        "z": "0a2099f0976fac3e",
        "name": "File Type",
        "label": "Select File Type",
        "tooltip": "",
        "place": "Select option",
        "group": "6426525.5bfe1ac",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Triage",
                "value": "Triage",
                "type": "str"
            },
            {
                "label": "Malware",
                "value": "Malware",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 440,
        "y": 220,
        "wires": [
            [
                "7119dc228a2de73e"
            ]
        ]
    },
    {
        "id": "7119dc228a2de73e",
        "type": "change",
        "z": "0a2099f0976fac3e",
        "name": "Set File Type",
        "rules": [
            {
                "t": "set",
                "p": "fileType",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "bee34b9df878d48c",
        "type": "ui_dropdown",
        "z": "0a2099f0976fac3e",
        "name": "Timesketch ID",
        "label": "Select Timesketch ID",
        "tooltip": "",
        "place": "Select option",
        "group": "6426525.5bfe1ac",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "1",
                "value": "1",
                "type": "str"
            },
            {
                "label": "2",
                "value": "2",
                "type": "str"
            },
            {
                "label": "3",
                "value": "3",
                "type": "str"
            },
            {
                "label": "4",
                "value": "4",
                "type": "str"
            },
            {
                "label": "5",
                "value": "5",
                "type": "str"
            },
            {
                "label": "6",
                "value": "6",
                "type": "str"
            },
            {
                "label": "7",
                "value": "7",
                "type": "str"
            },
            {
                "label": "8",
                "value": "8",
                "type": "str"
            },
            {
                "label": "9",
                "value": "9",
                "type": "str"
            },
            {
                "label": "10",
                "value": "10",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 440,
        "y": 340,
        "wires": [
            [
                "8b553cca9f159988"
            ]
        ]
    },
    {
        "id": "8b553cca9f159988",
        "type": "change",
        "z": "0a2099f0976fac3e",
        "name": "Set Timesketch ID",
        "rules": [
            {
                "t": "set",
                "p": "timesketchID",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "2e8c2daef4c0e674",
        "type": "join",
        "z": "0a2099f0976fac3e",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 990,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "66a3a03efb368439",
        "type": "switch",
        "z": "de1f8303de6271e1",
        "name": "File Type",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.exe",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.dll",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.js",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": ".*\\.doc",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.pdf",
                "vt": "str",
                "case": true
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 140,
        "y": 460,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "b2539705d750fe1a",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "Malware Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\nvar malware = msg.filename.toLowerCase();\n//var malware = msg.filename.split(\".\")[0].toLowerCase();\n\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newMalware = malware;\n\n// Assigning the new filename to msg.newMalware\nmsg.malware = newMalware;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 220,
        "wires": [
            [
                "b4a6b7935ea1e853"
            ]
        ]
    },
    {
        "id": "d17551740616596c",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "Process Malware File",
        "func": "msg.payload = \"Processing Malware file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "b2539705d750fe1a"
            ]
        ]
    },
    {
        "id": "b06e48bb4c5c6bef",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "",
        "addpay": "capa",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Capa Process",
        "x": 1640,
        "y": 440,
        "wires": [
            [
                "7a40e0f66059afed"
            ],
            [
                "7a40e0f66059afed"
            ],
            [
                "7a40e0f66059afed"
            ]
        ]
    },
    {
        "id": "fc61b69b39218a89",
        "type": "watch-directory",
        "z": "de1f8303de6271e1",
        "folder": "/cases/malware/",
        "recursive": "0",
        "typeEvent": "create",
        "ignoreInitial": true,
        "ignoredFiles": "",
        "ignoredFilesType": "re",
        "name": "Watch for Triage Archives",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "d17551740616596c"
            ]
        ]
    },
    {
        "id": "7a40e0f66059afed",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "ClamScan Analysis Params",
        "func": "var malwaredir = \"/cases/malware/\";\nvar malwareresults = \"/cases/malware/results/\";\n\n// Extract the filename from msg.malware\nvar malwarefilename = msg.malware.split('/').pop().replace(/\\.(exe|dll|bin)$/, \".txt\");\nvar malwaretxt = malwareresults + malwarefilename;\nmsg.malwarehash = malwaretxt\nmsg.clam = \"--quiet --verbose --infected -r -z -i --bell \" + msg.malware + \" --log=\" + malwaretxt;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 700,
        "wires": [
            [
                "056027a22276fbf0"
            ]
        ]
    },
    {
        "id": "056027a22276fbf0",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "clamscan",
        "addpay": "clam",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Capa Process",
        "x": 840,
        "y": 700,
        "wires": [
            [],
            [],
            [
                "b4a6b7935ea1e853"
            ]
        ]
    },
    {
        "id": "b4a6b7935ea1e853",
        "type": "simple-queue",
        "z": "de1f8303de6271e1",
        "name": "Queue Files",
        "count": "1",
        "unique_check": "",
        "x": 330,
        "y": 380,
        "wires": [
            [
                "e4bc0f98b5596271",
                "f3a0195659d80158"
            ]
        ]
    },
    {
        "id": "6b9fc033be5cee00",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "Capa Malware Analysis Params",
        "func": "var malwaredir = \"/cases/malware/\";\nvar malwareresults = \"/cases/malware/results/\";\n\n// Extract the filename from msg.malware\nvar malwarefilename = msg.malware.split('/').pop().replace(/\\.(exe|dll|bin)$/, \".txt\");\nvar malwaretxt = malwareresults + malwarefilename;\n\n// Construct the command with the correct paths\nmsg.capa = \"/opt/capa/./capa \" + msg.malware + \" >> \" + malwaretxt;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 240,
        "wires": [
            [
                "b06e48bb4c5c6bef"
            ]
        ]
    },
    {
        "id": "e4bc0f98b5596271",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "SHA256 Extract Params",
        "func": "var malwaredir = \"/cases/malware/\";\nvar malwareresults = \"/cases/malware/results/\";\n\n// Extract the filename from msg.malware\nvar malwarefilename = msg.malware.split('/').pop().replace(/\\.(exe|dll|bin)$/, \".txt\");\nvar malwaretxt = malwareresults + malwarefilename;\nmsg.malwarehash = malwaretxt\nmsg.sha256 = msg.malware + \" >> /cases/malware/results/sha256.txt\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 320,
        "wires": [
            [
                "a6830f5044ddbe2d"
            ]
        ]
    },
    {
        "id": "a6830f5044ddbe2d",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "sha256sum",
        "addpay": "sha256",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "SHA256 Process",
        "x": 970,
        "y": 300,
        "wires": [
            [],
            [],
            [
                "6b9fc033be5cee00"
            ]
        ]
    },
    {
        "id": "ad96ebc0d58fd6d6",
        "type": "comment",
        "z": "de1f8303de6271e1",
        "name": "Monitored Directory /cases/malware (Files)",
        "info": "",
        "x": 220,
        "y": 100,
        "wires": []
    },
    {
        "id": "f3a0195659d80158",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "SHA256 Extract Params",
        "func": "msg.sha256 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\nmsg.md5 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\nmsg.sha1 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 420,
        "wires": [
            [
                "39a44ea92a618e8e"
            ]
        ]
    },
    {
        "id": "39a44ea92a618e8e",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "echo -n \"sha256 =  \" >> /cases/processor/hashes/hashes.txt && sha256sum",
        "addpay": "sha256",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "SHA256 Process",
        "x": 990,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "2a5870ba32d3191c"
            ]
        ]
    },
    {
        "id": "2a5870ba32d3191c",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "echo -n \"sha1 =  \" >> /cases/processor/hashes/hashes.txt && sha1sum",
        "addpay": "sha1",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "SHA1 Process",
        "x": 1020,
        "y": 440,
        "wires": [
            [],
            [],
            [
                "947dac1935665bd0"
            ]
        ]
    },
    {
        "id": "947dac1935665bd0",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "echo -n \"md5 = \" >> /cases/processor/hashes/hashes.txt && md5sum",
        "addpay": "md5",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "MD5 Process",
        "x": 1040,
        "y": 520,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "59f759a24ccace97",
        "type": "comment",
        "z": "de1f8303de6271e1",
        "name": "Need to FIX THIS!!!!!",
        "info": "",
        "x": 690,
        "y": 380,
        "wires": []
    },
    {
        "id": "b9d259e13c746c96",
        "type": "exec",
        "z": "16e1f685b5141ca0",
        "command": "/opt/hayabusa/./hayabusa ",
        "addpay": "hayabusa_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Hayabusa Evtx Process",
        "x": 330,
        "y": 180,
        "wires": [
            [],
            [],
            [
                "a0fe1970279d85c2",
                "78a9326095511cb1"
            ]
        ]
    },
    {
        "id": "a0fe1970279d85c2",
        "type": "switch",
        "z": "16e1f685b5141ca0",
        "name": "Evtx Process Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 200,
        "wires": [
            [
                "fbde72bff9471e4f",
                "78a9326095511cb1"
            ],
            [
                "d1adc25ddc244ce4"
            ]
        ]
    },
    {
        "id": "fbde72bff9471e4f",
        "type": "exec",
        "z": "16e1f685b5141ca0",
        "command": "timesketch_importer",
        "addpay": "hayabusa_ts",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Hayabusa data",
        "x": 820,
        "y": 140,
        "wires": [
            [],
            [],
            [
                "9059f82eec759308"
            ]
        ]
    },
    {
        "id": "3477a8d40121de97",
        "type": "link in",
        "z": "16e1f685b5141ca0",
        "name": "Input Evtx Process",
        "links": [
            "25fa591196e92466"
        ],
        "x": 155,
        "y": 180,
        "wires": [
            [
                "b9d259e13c746c96"
            ]
        ]
    },
    {
        "id": "9059f82eec759308",
        "type": "switch",
        "z": "16e1f685b5141ca0",
        "name": "Hayabusa Out to Timesketch",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 160,
        "wires": [
            [
                "29479190332a8630"
            ],
            [
                "93dc3a642e3dae2e"
            ]
        ]
    },
    {
        "id": "d1adc25ddc244ce4",
        "type": "link out",
        "z": "16e1f685b5141ca0",
        "name": "Hayabusa Error Out",
        "mode": "link",
        "links": [
            "5206abe514bdde85"
        ],
        "x": 775,
        "y": 200,
        "wires": []
    },
    {
        "id": "93dc3a642e3dae2e",
        "type": "link out",
        "z": "16e1f685b5141ca0",
        "name": "Hayabusa to Timesketch Failure",
        "mode": "link",
        "links": [
            "37d048a42403a64d"
        ],
        "x": 1325,
        "y": 260,
        "wires": []
    },
    {
        "id": "edf2083c84c3604a",
        "type": "comment",
        "z": "16e1f685b5141ca0",
        "name": "Change Hayabusa Path here",
        "info": "",
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "78a9326095511cb1",
        "type": "debug",
        "z": "16e1f685b5141ca0",
        "name": "Hayabusa Processed Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 60,
        "wires": []
    },
    {
        "id": "700cc282f77b8359",
        "type": "debug",
        "z": "16e1f685b5141ca0",
        "name": "APTHunter Processed Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 760,
        "wires": []
    },
    {
        "id": "47cb57a21a7ae8a1",
        "type": "exec",
        "z": "16e1f685b5141ca0",
        "command": "python3 /opt/APTHunter/APT-Hunter.py",
        "addpay": "apthunter_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "APTHunter Evtx Process",
        "x": 890,
        "y": 940,
        "wires": [
            [],
            [],
            [
                "ad59496578b09adf",
                "700cc282f77b8359"
            ]
        ]
    },
    {
        "id": "ad59496578b09adf",
        "type": "switch",
        "z": "16e1f685b5141ca0",
        "d": true,
        "name": "Evtx Process Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1320,
        "y": 940,
        "wires": [
            [
                "e0ff5ce91a314877",
                "700cc282f77b8359"
            ],
            []
        ]
    },
    {
        "id": "e0ff5ce91a314877",
        "type": "exec",
        "z": "16e1f685b5141ca0",
        "command": "timesketch_importer",
        "addpay": "hayabusa_ts",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest APTHunter data",
        "x": 1180,
        "y": 840,
        "wires": [
            [],
            [],
            [
                "47fea4f971775bfc"
            ]
        ]
    },
    {
        "id": "47fea4f971775bfc",
        "type": "switch",
        "z": "16e1f685b5141ca0",
        "name": "APTHunter Out to Timesketch",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 840,
        "wires": [
            [],
            [
                "5bab52820bee8b41"
            ]
        ]
    },
    {
        "id": "28f90115cb37e656",
        "type": "function",
        "z": "16e1f685b5141ca0",
        "name": "KAPE APTHunter Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.kape = msg.dirname + '/C/Windows/System32/winevt/logs/';\nmsg.hayabusa_job = msg.plasofname + '-hayabusa';\nmsg.hayabusa_out = '/cases/evtxproc/' + msg.hayabusa_job;\nmsg.hayabusa_exec =  'csv-timeline -d ' +msg.kape+ ' --RFC-3339 -o ' + msg.hayabusa_out + '.csv' + ' -p timesketch-verbose -U --no-wizard'\nmsg.hayabusa_ts = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.hayabusa_job + \" --sketch_id \" + \"1 \" + msg.hayabusa_out + '.csv';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 780,
        "wires": [
            [
                "47cb57a21a7ae8a1"
            ]
        ]
    },
    {
        "id": "db9733cf75a8e0d3",
        "type": "function",
        "z": "16e1f685b5141ca0",
        "name": "VR APTHunter Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.collection = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs/';\nmsg.destination = '/cases/processor/host-triage';\nmsg.winevt = msg.destination +\"/\"+ msg.plasofname \n//msg.chainsaw_job = msg.plasofname + '-chainsaw';\n//msg.chainsaw_out = '/cases/evtxproc/chainsaw/';\nmsg.apthunter_exec = \"-p\" + msg.winevt + \" -o\" + \"Project1 -allreport\";\n//msg.apthunter_ts = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name chainsaw_antivirus\" + \" --sketch_id \" + \"1 \" + \"/cases/evtxproc/chainsaw/antivirus.csv\";\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 840,
        "wires": [
            [
                "bc8874b981abc505"
            ]
        ]
    },
    {
        "id": "a9a51b9291627368",
        "type": "switch",
        "z": "16e1f685b5141ca0",
        "name": "",
        "property": "dirname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "/kape/",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "/collection/",
                "vt": "msg",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 820,
        "wires": [
            [
                "28f90115cb37e656"
            ],
            [
                "db9733cf75a8e0d3"
            ]
        ]
    },
    {
        "id": "38eed49a68dbf5ea",
        "type": "debug",
        "z": "16e1f685b5141ca0",
        "name": "Chainsaw Processed Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 360,
        "wires": []
    },
    {
        "id": "b5110b57ed0e6ebd",
        "type": "exec",
        "z": "16e1f685b5141ca0",
        "command": "/opt/chainsaw/./chainsaw ",
        "addpay": "chainsaw_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Chainsaw Evtx Process",
        "x": 650,
        "y": 400,
        "wires": [
            [],
            [],
            [
                "be8478da346b3d39",
                "38eed49a68dbf5ea"
            ]
        ]
    },
    {
        "id": "be8478da346b3d39",
        "type": "switch",
        "z": "16e1f685b5141ca0",
        "name": "Evtx Process Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 940,
        "y": 460,
        "wires": [
            [
                "38eed49a68dbf5ea",
                "8f47d5b02a132cf8"
            ],
            []
        ]
    },
    {
        "id": "4a30c7b60aeb790e",
        "type": "switch",
        "z": "16e1f685b5141ca0",
        "name": "Chainsaw Out to Timesketch",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1400,
        "y": 380,
        "wires": [
            [
                "3490bf76b9561897"
            ],
            []
        ]
    },
    {
        "id": "463695bd5f515878",
        "type": "function",
        "z": "16e1f685b5141ca0",
        "name": "KAPE Chainsaw Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.kape = msg.dirname + '/C/Windows/System32/winevt/logs/';\nmsg.chainsaw_job = + msg.plasofname + '-chainsaw';\nmsg.chainsaw_dir = msg.plasofname;\nmsg.chainsaw_files = '/cases/evtxproc/chainsaw/' + msg.plasofname + '/';\nmsg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.chainsaw_dir;\n//msg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.plasofname ;\nmsg.chainsaw_exec = 'hunt -q ' + msg.kape + ' -s /opt/chainsaw/sigma/ --mapping /opt/chainsaw/mappings/sigma-event-logs-all.yml -r /opt/chainsaw/rules/ --csv --output ' + msg.chainsaw_out;\nmsg.chainsaw_ts1 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_antivirus\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"antivirus.csv\";\nmsg.chainsaw_ts2 = \"-u dfir -p admin --host http://127.0.0.1 ---timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rds_events_-_user_profile_disk\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"microsoft_rds_events_-_user_profile_disk.csv\";\nmsg.chainsaw_ts3 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-hainsaw_powershell_script.\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"powershell_script.csv\";\nmsg.chainsaw_ts4 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_rdp_events\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"rdp_events.csv\";\nmsg.chainsaw_ts5 = \"-u dfir -p admin --host http://127.0.0.1 ---timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts6 = \"-u dfir -p admin --host http://127.0.0.1 ---timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_sigma\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"sigma.csv\";\nmsg.chainsaw_ts7 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_account_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"account_tampering.csv\";\nmsg.chainsaw_ts8 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_applocker\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"applocker.csv\";\nmsg.chainsaw_ts9 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_credential_access\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"credential_access.csv\";\nmsg.chainsaw_ts10 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_defensive_evasion\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"defensive_evasion.csv\";\nmsg.chainsaw_ts11 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_lateral_movement\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"lateral_movement.csv\";\nmsg.chainsaw_ts12 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_log_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"log_tampering.csv\";\nmsg.chainsaw_ts13 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_login_attacks\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"login_attacks.csv\";\nmsg.chainsaw_ts14 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rasvpn_events\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"microsoft_rasvpn_events.csv\";\nmsg.chainsaw_ts15 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts16 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_tampering.csv\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 360,
        "wires": [
            [
                "b5110b57ed0e6ebd"
            ]
        ]
    },
    {
        "id": "29479190332a8630",
        "type": "switch",
        "z": "16e1f685b5141ca0",
        "name": "",
        "property": "dirname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "/kape/",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "/collection/",
                "vt": "msg",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 400,
        "wires": [
            [
                "463695bd5f515878"
            ],
            [
                "7fe8a5f75316cfc8"
            ]
        ]
    },
    {
        "id": "5bab52820bee8b41",
        "type": "link out",
        "z": "16e1f685b5141ca0",
        "name": "Hayabusa to Timesketch Out",
        "mode": "link",
        "links": [
            "d731fcd58dfc52dc"
        ],
        "x": 1645,
        "y": 840,
        "wires": []
    },
    {
        "id": "7fe8a5f75316cfc8",
        "type": "function",
        "z": "16e1f685b5141ca0",
        "name": "VR Chainsaw Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.vr = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs/';\nmsg.chainsaw_job = + msg.plasofname + '-chainsaw';\nmsg.chainsaw_dir = msg.plasofname;\nmsg.chainsaw_files = '/cases/evtxproc/chainsaw/' + msg.plasofname +'/';\nmsg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.chainsaw_dir;\n//msg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.plasofname ;\nmsg.chainsaw_exec = 'hunt -q ' + msg.vr + ' -s /opt/chainsaw/sigma/ --mapping /opt/chainsaw/mappings/sigma-event-logs-all.yml -r /opt/chainsaw/rules/ --csv --output ' + msg.chainsaw_out;\nmsg.chainsaw_ts1 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_antivirus\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"antivirus.csv\";\nmsg.chainsaw_ts2 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rds_events_-_user_profile_disk\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"microsoft_rds_events_-_user_profile_disk.csv\";\nmsg.chainsaw_ts3 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-hainsaw_powershell_script.\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"powershell_script.csv\";\nmsg.chainsaw_ts4 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_rdp_events\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"rdp_events.csv\";\nmsg.chainsaw_ts5 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts6 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_sigma\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"sigma.csv\";\nmsg.chainsaw_ts7 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_account_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"account_tampering.csv\";\nmsg.chainsaw_ts8 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_applocker\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"applocker.csv\";\nmsg.chainsaw_ts9 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_credential_access\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"credential_access.csv\";\nmsg.chainsaw_ts10 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_defensive_evasion\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"defensive_evasion.csv\";\nmsg.chainsaw_ts11 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_lateral_movement\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"lateral_movement.csv\";\nmsg.chainsaw_ts12 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_log_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"log_tampering.csv\";\nmsg.chainsaw_ts13 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_login_attacks\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"login_attacks.csv\";\nmsg.chainsaw_ts14 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rasvpn_events\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"microsoft_rasvpn_events.csv\";\nmsg.chainsaw_ts15 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts16 = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_tampering\" + \" --sketch_id \" + \"1 \" + msg.chainsaw_files + \"service_tampering.csv\";\n\nreturn msg;\n\n\n// I MAY HAVE TO SPLIT THIS UP INTO Different nodes/functions",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 460,
        "wires": [
            [
                "6e6399086c7246f6"
            ]
        ]
    },
    {
        "id": "6e6399086c7246f6",
        "type": "exec",
        "z": "16e1f685b5141ca0",
        "command": "/opt/chainsaw/./chainsaw ",
        "addpay": "chainsaw_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Chainsaw Evtx Process",
        "x": 630,
        "y": 480,
        "wires": [
            [],
            [],
            [
                "be8478da346b3d39"
            ]
        ]
    },
    {
        "id": "8f47d5b02a132cf8",
        "type": "link out",
        "z": "16e1f685b5141ca0",
        "name": "Chainsaw Process",
        "mode": "link",
        "links": [
            "a8a370357488b800",
            "2bc9d95ca802f03e"
        ],
        "x": 1105,
        "y": 540,
        "wires": []
    },
    {
        "id": "2bc9d95ca802f03e",
        "type": "link in",
        "z": "16e1f685b5141ca0",
        "name": "Output Chainsaw Process",
        "links": [
            "8f47d5b02a132cf8",
            "1b3d5967be2bbeb8"
        ],
        "x": 1195,
        "y": 440,
        "wires": [
            [
                "4a30c7b60aeb790e"
            ]
        ]
    },
    {
        "id": "51e3d8e2ee141eeb",
        "type": "pythonshell in",
        "z": "16e1f685b5141ca0",
        "name": "APTHunter",
        "pyfile": "/opt/APTHunter/APT-Hunter.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 910,
        "y": 1180,
        "wires": [
            [
                "3f8d5d37076d4634"
            ]
        ]
    },
    {
        "id": "bc8874b981abc505",
        "type": "fs-ops-dir",
        "z": "16e1f685b5141ca0",
        "name": "List Files",
        "path": "collection",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 420,
        "y": 1060,
        "wires": [
            [
                "c622cead71d778a8"
            ]
        ]
    },
    {
        "id": "c622cead71d778a8",
        "type": "split",
        "z": "16e1f685b5141ca0",
        "name": "Split Files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 1060,
        "wires": [
            [
                "032130e2af4f3cad"
            ]
        ]
    },
    {
        "id": "e3220f5a84779887",
        "type": "fs-ops-copy",
        "z": "16e1f685b5141ca0",
        "name": "Copy File",
        "sourcePath": "collection",
        "sourcePathType": "msg",
        "sourceFilename": "payload",
        "sourceFilenameType": "msg",
        "destPath": "destination",
        "destPathType": "msg",
        "destFilename": "payload",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": false,
        "x": 1060,
        "y": 1060,
        "wires": [
            [
                "da865da2e94c42c4"
            ]
        ]
    },
    {
        "id": "3f8d5d37076d4634",
        "type": "debug",
        "z": "16e1f685b5141ca0",
        "name": "Debug Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1140,
        "y": 1180,
        "wires": []
    },
    {
        "id": "032130e2af4f3cad",
        "type": "fs-ops-mkdir",
        "z": "16e1f685b5141ca0",
        "name": "",
        "path": "destination",
        "pathType": "msg",
        "dirname": "plasofname",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "777",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 880,
        "y": 1060,
        "wires": [
            [
                "e3220f5a84779887"
            ]
        ]
    },
    {
        "id": "da865da2e94c42c4",
        "type": "fs-ops-move",
        "z": "16e1f685b5141ca0",
        "name": "",
        "sourcePath": "destination",
        "sourcePathType": "msg",
        "sourceFilename": "payload",
        "sourceFilenameType": "msg",
        "destPath": "winevt",
        "destPathType": "msg",
        "destFilename": "payload",
        "destFilenameType": "msg",
        "link": false,
        "x": 1240,
        "y": 1060,
        "wires": [
            [
                "47cb57a21a7ae8a1"
            ]
        ]
    },
    {
        "id": "788f0aa305cffcba",
        "type": "function",
        "z": "16e1f685b5141ca0",
        "name": "APTHunter payload Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.collection = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs/';\nmsg.destination = '/cases/processor/host-triage';\nmsg.winevt = msg.destination +\"/\"+ msg.plasofname \nmsg.payload = \"-p\" + msg.winevt +  \"-o Project1 -allreport\";\n//msg.apthunter_ts = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name chainsaw_antivirus\" + \" --sketch_id \" + \"1 \" + \"/cases/evtxproc/chainsaw/antivirus.csv\";\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "51e3d8e2ee141eeb"
            ]
        ]
    },
    {
        "id": "d8a27c8dfc6323be",
        "type": "comment",
        "z": "16e1f685b5141ca0",
        "name": "Notes on Python Execution and File relocation",
        "info": "",
        "x": 830,
        "y": 640,
        "wires": []
    },
    {
        "id": "3490bf76b9561897",
        "type": "link out",
        "z": "16e1f685b5141ca0",
        "name": "Out to Hayabusa Process",
        "mode": "link",
        "links": [
            "d731fcd58dfc52dc"
        ],
        "x": 1615,
        "y": 460,
        "wires": []
    },
    {
        "id": "a8a370357488b800",
        "type": "link in",
        "z": "6e13988923128d2e",
        "name": "Input Chainsaw Process",
        "links": [
            "8f47d5b02a132cf8"
        ],
        "x": 375,
        "y": 200,
        "wires": [
            [
                "0fc9cfb2647b4ea1"
            ]
        ]
    },
    {
        "id": "0fc9cfb2647b4ea1",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts1",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 200,
        "wires": [
            [
                "47256559279e1437"
            ],
            [
                "47256559279e1437"
            ],
            [
                "6811e5ee53562008",
                "47256559279e1437"
            ]
        ]
    },
    {
        "id": "6811e5ee53562008",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts2",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "3380ac24cd729c8d"
            ]
        ]
    },
    {
        "id": "3380ac24cd729c8d",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts3",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "c9dfe1b2a97cc335"
            ]
        ]
    },
    {
        "id": "c9dfe1b2a97cc335",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts4",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "8ae44222fac857d9"
            ]
        ]
    },
    {
        "id": "8ae44222fac857d9",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts5",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 440,
        "wires": [
            [],
            [],
            [
                "555edaa77417df0c"
            ]
        ]
    },
    {
        "id": "555edaa77417df0c",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts6",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 500,
        "wires": [
            [],
            [],
            [
                "86c729f8de34f9e1"
            ]
        ]
    },
    {
        "id": "86c729f8de34f9e1",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts7",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 200,
        "wires": [
            [],
            [],
            [
                "07661aa530e6e731"
            ]
        ]
    },
    {
        "id": "07661aa530e6e731",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts8",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "e1b708593e35d831"
            ]
        ]
    },
    {
        "id": "e1b708593e35d831",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts9",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "96be38e2ee590f2b"
            ]
        ]
    },
    {
        "id": "96be38e2ee590f2b",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts10",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "80020e237909b345"
            ]
        ]
    },
    {
        "id": "80020e237909b345",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts11",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 440,
        "wires": [
            [],
            [],
            [
                "6fe252ef01a464e0"
            ]
        ]
    },
    {
        "id": "6fe252ef01a464e0",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts12",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 200,
        "wires": [
            [],
            [],
            [
                "fa81bdf440e5e75f"
            ]
        ]
    },
    {
        "id": "fa81bdf440e5e75f",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts13",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "3e975e6ea24a7597"
            ]
        ]
    },
    {
        "id": "3e975e6ea24a7597",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts14",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "4c3c56afe34e2fa4"
            ]
        ]
    },
    {
        "id": "4c3c56afe34e2fa4",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts15",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "c9a7eba5081c3fe9"
            ]
        ]
    },
    {
        "id": "c9a7eba5081c3fe9",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts16",
        "append": "",
        "useSpawn": "false",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 440,
        "wires": [
            [],
            [
                "1b3d5967be2bbeb8"
            ],
            [
                "1b3d5967be2bbeb8"
            ]
        ]
    },
    {
        "id": "1b3d5967be2bbeb8",
        "type": "link out",
        "z": "6e13988923128d2e",
        "name": "Output Chainsaw Process",
        "mode": "link",
        "links": [
            "2bc9d95ca802f03e"
        ],
        "x": 1355,
        "y": 480,
        "wires": []
    },
    {
        "id": "47256559279e1437",
        "type": "debug",
        "z": "6e13988923128d2e",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 620,
        "wires": []
    },
    {
        "id": "77ea6b536861ca00",
        "type": "link in",
        "z": "2424275587f107c0",
        "name": "E01 Process",
        "links": [
            "883d44bc7af1d03c"
        ],
        "x": 165,
        "y": 80,
        "wires": [
            [
                "0194b356e3490966"
            ]
        ]
    },
    {
        "id": "b9eaaf7189a0361c",
        "type": "exec",
        "z": "2424275587f107c0",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 1010,
        "y": 140,
        "wires": [
            [],
            [],
            [
                "b64f1cee1ae45d6f"
            ]
        ]
    },
    {
        "id": "05d21bda868d60e7",
        "type": "comment",
        "z": "2424275587f107c0",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 670,
        "y": 100,
        "wires": []
    },
    {
        "id": "c5f732cb388c6c3f",
        "type": "switch",
        "z": "2424275587f107c0",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 360,
        "wires": [
            [
                "2f06feaa51dae097"
            ],
            []
        ]
    },
    {
        "id": "0194b356e3490966",
        "type": "function",
        "z": "2424275587f107c0",
        "name": "Process E01",
        "func": "msg.payload = \"Processing E01 file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "678d31b75f804890"
            ]
        ]
    },
    {
        "id": "c6b64f1986a1e1f9",
        "type": "exec",
        "z": "2424275587f107c0",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 470,
        "y": 460,
        "wires": [
            [],
            [],
            [
                "91fad55f103ae87a"
            ]
        ]
    },
    {
        "id": "91fad55f103ae87a",
        "type": "switch",
        "z": "2424275587f107c0",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 460,
        "wires": [
            [],
            [
                "0c3e1c2916ad7b72"
            ]
        ]
    },
    {
        "id": "0c3e1c2916ad7b72",
        "type": "debug",
        "z": "2424275587f107c0",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 460,
        "wires": []
    },
    {
        "id": "678d31b75f804890",
        "type": "function",
        "z": "2424275587f107c0",
        "name": "E01 Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\n//var plasoname = msg.filename.toLowerCase();\nvar plasoname = msg.filename.split(\".\")[0].toLowerCase();\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasofname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "367e9c4628b9030e"
            ]
        ]
    },
    {
        "id": "367e9c4628b9030e",
        "type": "function",
        "z": "2424275587f107c0",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "var plasodir = \"/cases/processor/\";\nvar plasofname = msg.plasoname.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\nmsg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + plasofname + msg.tstamp + \".plaso\" + \" \" + msg.filename;\nreturn msg;\n\n//var plasodir = \"/cases/plaso/\";\n//var plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\n//msg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\n//return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            [
                "b9eaaf7189a0361c"
            ]
        ]
    },
    {
        "id": "2f06feaa51dae097",
        "type": "function",
        "z": "2424275587f107c0",
        "name": "Timesketch CLI params",
        "func": "//var plasoname = msg.plasoname\n//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\n//msg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.filename + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + plasofullpath;\n//return msg;\n\nvar plasofullpath = msg.plasoname.replace(\"/cases/processor/\", \"/cases/plaso/\") + msg.tstamp + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + plasofullpath + \"-triage\" + \" --sketch_id \" + \"1\" + \" \" + plasofullpath;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "c6b64f1986a1e1f9"
            ]
        ]
    },
    {
        "id": "b64f1cee1ae45d6f",
        "type": "function",
        "z": "2424275587f107c0",
        "name": "Log2timeline psort - plaso to csv params",
        "func": "var plasodir = \"/cases/processor/\";\nvar plasofname = msg.plasoname.replace('processor', 'plaso');\nvar plasocsv = msg.plasoname.replace(\"/cases/processor/\", \"/cases/plaso/\") + msg.tstamp + \".plaso\";\n//var storageFilePath = plasoname + \".plaso\";\nmsg.psort = \"psort.py -o dynamic -w \" + plasofname + msg.tstamp + \".csv\" + \" \" + plasocsv;\nreturn msg;\n\n//var plasodir = \"/cases/plaso/\n//var plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\n//msg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\n//return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 260,
        "wires": [
            [
                "780452a00d48ac56"
            ]
        ]
    },
    {
        "id": "780452a00d48ac56",
        "type": "exec",
        "z": "2424275587f107c0",
        "command": "",
        "addpay": "psort",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline psort Process",
        "x": 690,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "c5f732cb388c6c3f"
            ]
        ]
    },
    {
        "id": "23e64aa548420a50",
        "type": "link in",
        "z": "6f38a6ed621b13e3",
        "name": "VHD Process",
        "links": [
            "e20d24d3d2e0716c"
        ],
        "x": 75,
        "y": 80,
        "wires": [
            [
                "11e2998d071f8652"
            ]
        ]
    },
    {
        "id": "e73a221bb6baa603",
        "type": "exec",
        "z": "6f38a6ed621b13e3",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 1020,
        "y": 160,
        "wires": [
            [],
            [],
            [
                "186bebc64e017bdb",
                "27908163507f6395"
            ]
        ]
    },
    {
        "id": "3f198556512b698c",
        "type": "comment",
        "z": "6f38a6ed621b13e3",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 680,
        "y": 120,
        "wires": []
    },
    {
        "id": "186bebc64e017bdb",
        "type": "switch",
        "z": "6f38a6ed621b13e3",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 460,
        "wires": [
            [
                "fae56219e82db0a4"
            ],
            []
        ]
    },
    {
        "id": "6f00b09ddb0a71dc",
        "type": "exec",
        "z": "6f38a6ed621b13e3",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 400,
        "y": 560,
        "wires": [
            [],
            [],
            [
                "28fdf7af8fb74410",
                "21d8b7c659eb2ee7"
            ]
        ]
    },
    {
        "id": "28fdf7af8fb74410",
        "type": "switch",
        "z": "6f38a6ed621b13e3",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 560,
        "wires": [
            [],
            [
                "c6b56d545933c41f",
                "5753ea311d5970ae"
            ]
        ]
    },
    {
        "id": "c6b56d545933c41f",
        "type": "debug",
        "z": "6f38a6ed621b13e3",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 560,
        "wires": []
    },
    {
        "id": "91def8d7ee2a0a6c",
        "type": "function",
        "z": "6f38a6ed621b13e3",
        "name": "VHD Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\n//var plasoname = msg.filename.toLowerCase();\nvar plasoname = msg.filename.split(\".\")[0].toLowerCase();\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasofname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [
            [
                "9a65f66c35174d3c"
            ]
        ]
    },
    {
        "id": "9a65f66c35174d3c",
        "type": "function",
        "z": "6f38a6ed621b13e3",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "var plasodir = \"/cases/processor/\";\nvar plasofname = msg.plasoname.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\nmsg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + plasofname + msg.tstamp + \".plaso\" + \" \" + msg.filename;\nreturn msg;\n\n//var plasodir = \"/cases/plaso/\";\n//var plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\n//msg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\n//return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "e73a221bb6baa603",
                "cf22f20ae2347ca4"
            ]
        ]
    },
    {
        "id": "fae56219e82db0a4",
        "type": "function",
        "z": "6f38a6ed621b13e3",
        "name": "Timesketch CLI params",
        "func": "//var plasoname = msg.plasoname\n//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\n//msg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.filename + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + plasofullpath;\n//return msg;\n\nvar plasofullpath = msg.plasoname.replace(\"/cases/processor/\", \"/cases/plaso/\") + msg.tstamp + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + plasofullpath + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + plasofullpath;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 480,
        "wires": [
            [
                "6f00b09ddb0a71dc",
                "a65e057a0c8c307f"
            ]
        ]
    },
    {
        "id": "6e65f1d758e7fb19",
        "type": "debug",
        "z": "6f38a6ed621b13e3",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 300,
        "wires": []
    },
    {
        "id": "cf22f20ae2347ca4",
        "type": "debug",
        "z": "6f38a6ed621b13e3",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 380,
        "wires": []
    },
    {
        "id": "27908163507f6395",
        "type": "debug",
        "z": "6f38a6ed621b13e3",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 360,
        "wires": []
    },
    {
        "id": "8945cb4e8cf89011",
        "type": "function",
        "z": "6f38a6ed621b13e3",
        "d": true,
        "name": "VHD Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\nvar plasoname = msg.file.split(\".\")[0];\nvar filename = plasofname.toLowerCase();\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\nvar plasofname = filename + msg.tstamp + \"Z\";\nmsg.filename = plasoname.toLowerCase();\nmsg.plasoname = msg.filename\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "9a65f66c35174d3c"
            ]
        ]
    },
    {
        "id": "a65e057a0c8c307f",
        "type": "debug",
        "z": "6f38a6ed621b13e3",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 680,
        "wires": []
    },
    {
        "id": "21d8b7c659eb2ee7",
        "type": "debug",
        "z": "6f38a6ed621b13e3",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 680,
        "wires": []
    },
    {
        "id": "5753ea311d5970ae",
        "type": "debug",
        "z": "6f38a6ed621b13e3",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 680,
        "wires": []
    },
    {
        "id": "11e2998d071f8652",
        "type": "function",
        "z": "6f38a6ed621b13e3",
        "name": "Process VHD",
        "func": "msg.payload = \"Processing VHD file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 180,
        "wires": [
            [
                "91def8d7ee2a0a6c",
                "8945cb4e8cf89011"
            ]
        ]
    },
    {
        "id": "f7124b3b9e61600e",
        "type": "link in",
        "z": "c589f114e349d156",
        "name": "VMDK Process",
        "links": [
            "f83735497e838b6c"
        ],
        "x": 45,
        "y": 80,
        "wires": [
            [
                "db6401868b610a82"
            ]
        ]
    },
    {
        "id": "f76585c84295ae12",
        "type": "exec",
        "z": "c589f114e349d156",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 900,
        "y": 160,
        "wires": [
            [],
            [],
            [
                "2578b33e422f2ca7"
            ]
        ]
    },
    {
        "id": "d94a7012c5bc9242",
        "type": "comment",
        "z": "c589f114e349d156",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 620,
        "y": 100,
        "wires": []
    },
    {
        "id": "2578b33e422f2ca7",
        "type": "switch",
        "z": "c589f114e349d156",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 220,
        "wires": [
            [],
            [
                "238e71d755ee276f"
            ]
        ]
    },
    {
        "id": "db6401868b610a82",
        "type": "function",
        "z": "c589f114e349d156",
        "name": "Process VMDK",
        "func": "msg.payload = \"Processing VMDK file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 160,
        "wires": [
            [
                "f731be49efa57dc7"
            ]
        ]
    },
    {
        "id": "e6d237e8a4f1c942",
        "type": "exec",
        "z": "c589f114e349d156",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 300,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "ed7a4860feddbc9f"
            ]
        ]
    },
    {
        "id": "ed7a4860feddbc9f",
        "type": "switch",
        "z": "c589f114e349d156",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 320,
        "wires": [
            [],
            [
                "fb6559b7fc7e4c55"
            ]
        ]
    },
    {
        "id": "fb6559b7fc7e4c55",
        "type": "debug",
        "z": "c589f114e349d156",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 320,
        "wires": []
    },
    {
        "id": "f731be49efa57dc7",
        "type": "function",
        "z": "c589f114e349d156",
        "name": "VMDK Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.dirfile;\n\n// Setting up vars to handle archive decompress operations\nvar plasoname = msg.filename.toLowerCase();\n\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasoname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "b3d5f044618dd46d"
            ]
        ]
    },
    {
        "id": "b3d5f044618dd46d",
        "type": "function",
        "z": "c589f114e349d156",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "//var plasodir = \"/cases/plaso/\";\nvar plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\nmsg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 160,
        "wires": [
            [
                "f76585c84295ae12"
            ]
        ]
    },
    {
        "id": "238e71d755ee276f",
        "type": "function",
        "z": "c589f114e349d156",
        "name": "Timesketch CLI params",
        "func": "//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.plasoname + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + msg.plasoname + \".plaso\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            [
                "e6d237e8a4f1c942"
            ]
        ]
    },
    {
        "id": "d7086a1b806169c9",
        "type": "link in",
        "z": "2b4f98517827515e",
        "name": "VHDX Process",
        "links": [
            "c4b36f85e4d010fd"
        ],
        "x": 225,
        "y": 100,
        "wires": [
            [
                "2e392658d7de406b"
            ]
        ]
    },
    {
        "id": "c869494e20b6cff1",
        "type": "exec",
        "z": "2b4f98517827515e",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 940,
        "y": 180,
        "wires": [
            [],
            [],
            [
                "59ade3242979c43f"
            ]
        ]
    },
    {
        "id": "49084e326f8a4b6d",
        "type": "comment",
        "z": "2b4f98517827515e",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 660,
        "y": 120,
        "wires": []
    },
    {
        "id": "59ade3242979c43f",
        "type": "switch",
        "z": "2b4f98517827515e",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 240,
        "wires": [
            [],
            [
                "55676968b7970c50"
            ]
        ]
    },
    {
        "id": "2e392658d7de406b",
        "type": "function",
        "z": "2b4f98517827515e",
        "name": "Process VHDX",
        "func": "msg.payload = \"Processing VHDX file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 180,
        "wires": [
            [
                "f353848b0fd8f366"
            ]
        ]
    },
    {
        "id": "1a31ef6b7cdd4d9e",
        "type": "exec",
        "z": "2b4f98517827515e",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 340,
        "y": 340,
        "wires": [
            [],
            [],
            [
                "657b4770a1975d65"
            ]
        ]
    },
    {
        "id": "657b4770a1975d65",
        "type": "switch",
        "z": "2b4f98517827515e",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 340,
        "wires": [
            [],
            [
                "9b1d11dcccd07efa"
            ]
        ]
    },
    {
        "id": "9b1d11dcccd07efa",
        "type": "debug",
        "z": "2b4f98517827515e",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "f353848b0fd8f366",
        "type": "function",
        "z": "2b4f98517827515e",
        "name": "VHDX Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.dirfile;\n\n// Setting up vars to handle archive decompress operations\nvar plasoname = msg.filename.toLowerCase();\n\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasoname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "771bfab6a0795433"
            ]
        ]
    },
    {
        "id": "771bfab6a0795433",
        "type": "function",
        "z": "2b4f98517827515e",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "//var plasodir = \"/cases/plaso/\";\nvar plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\nmsg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "c869494e20b6cff1"
            ]
        ]
    },
    {
        "id": "55676968b7970c50",
        "type": "function",
        "z": "2b4f98517827515e",
        "name": "Timesketch CLI params",
        "func": "//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.plasoname + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + msg.plasoname + \".plaso\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "1a31ef6b7cdd4d9e"
            ]
        ]
    },
    {
        "id": "f9b451080b6b8d7c",
        "type": "switch",
        "z": "e2ac7280594bc90c",
        "name": "Archive Type Detection",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.zip",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.7z",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.rar",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.tar.(gz|bz2)",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "ca700182e8bb0ee3"
            ],
            [
                "d08d0eb1f0b3d33d"
            ],
            [
                "bba9ad0691c8b1ba"
            ],
            [
                "0243c08d02790b6b"
            ],
            [
                "33ef42f725a15d15"
            ]
        ]
    },
    {
        "id": "71fd33dba37a5198",
        "type": "link in",
        "z": "e2ac7280594bc90c",
        "name": "Identify Archive Type",
        "links": [
            "cef77458885dcb6e"
        ],
        "x": 115,
        "y": 160,
        "wires": [
            [
                "f9b451080b6b8d7c"
            ]
        ]
    },
    {
        "id": "33ef42f725a15d15",
        "type": "debug",
        "z": "e2ac7280594bc90c",
        "name": "Unsupported Archive Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 320,
        "wires": []
    },
    {
        "id": "ca700182e8bb0ee3",
        "type": "exec",
        "z": "e2ac7280594bc90c",
        "command": "unzip  -t",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "Zip Integrity Check",
        "x": 530,
        "y": 80,
        "wires": [
            [],
            [],
            [
                "ccbb91e72f800f8b"
            ]
        ]
    },
    {
        "id": "ccbb91e72f800f8b",
        "type": "switch",
        "z": "e2ac7280594bc90c",
        "name": "Integrity Check Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 820,
        "y": 140,
        "wires": [
            [
                "bda59d5847d25ee6"
            ],
            [
                "5fe09dfc97550b15"
            ]
        ]
    },
    {
        "id": "5fe09dfc97550b15",
        "type": "debug",
        "z": "e2ac7280594bc90c",
        "name": "Archive Integrity Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 180,
        "wires": []
    },
    {
        "id": "d08d0eb1f0b3d33d",
        "type": "exec",
        "z": "e2ac7280594bc90c",
        "command": "7z t",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "7z Integrity Check",
        "x": 530,
        "y": 140,
        "wires": [
            [],
            [],
            [
                "ccbb91e72f800f8b"
            ]
        ]
    },
    {
        "id": "0243c08d02790b6b",
        "type": "exec",
        "z": "e2ac7280594bc90c",
        "command": "tar -tf",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "Tar Gz or Bz2 Integrity Check",
        "x": 560,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "ccbb91e72f800f8b"
            ]
        ]
    },
    {
        "id": "bda59d5847d25ee6",
        "type": "link out",
        "z": "e2ac7280594bc90c",
        "name": "Integrity Check Passed",
        "mode": "link",
        "links": [
            "0363012d291d78d5"
        ],
        "x": 1055,
        "y": 100,
        "wires": []
    },
    {
        "id": "bba9ad0691c8b1ba",
        "type": "exec",
        "z": "e2ac7280594bc90c",
        "command": "unrar t",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "WinRAR Integrity Check",
        "x": 550,
        "y": 200,
        "wires": [
            [],
            [],
            [
                "ccbb91e72f800f8b"
            ]
        ]
    },
    {
        "id": "2ed0369bbc38ebe9",
        "type": "link in",
        "z": "e0e8620b48c94115",
        "name": "DecompressIn",
        "links": [
            "e0c47dbf33f6c6ad"
        ],
        "x": 215,
        "y": 160,
        "wires": [
            [
                "9d6e67337148df89"
            ]
        ]
    },
    {
        "id": "9d6e67337148df89",
        "type": "switch",
        "z": "e0e8620b48c94115",
        "name": "Decompress Archive",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.zip",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.7z",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.rar",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.tar.gz",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.tar.bz2",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 400,
        "y": 160,
        "wires": [
            [
                "de1e7de2546271c0"
            ],
            [
                "50210e2a1ca3b7a3"
            ],
            [
                "cb972665c95c82e0"
            ],
            [
                "40131e8f68c287e6"
            ],
            [
                "bd63f7bbf5f39f4c"
            ],
            [
                "255a26d8215bb808"
            ]
        ]
    },
    {
        "id": "255a26d8215bb808",
        "type": "debug",
        "z": "e0e8620b48c94115",
        "name": "Unsupported File Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 340,
        "wires": []
    },
    {
        "id": "de1e7de2546271c0",
        "type": "exec",
        "z": "e0e8620b48c94115",
        "command": "unzip",
        "addpay": "unzipcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Unzip Decompress",
        "x": 650,
        "y": 40,
        "wires": [
            [],
            [],
            [
                "03eb45897eb13de7"
            ]
        ]
    },
    {
        "id": "50210e2a1ca3b7a3",
        "type": "exec",
        "z": "e0e8620b48c94115",
        "command": "7z",
        "addpay": "sevzipcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "7zip Decompress",
        "x": 650,
        "y": 100,
        "wires": [
            [],
            [],
            [
                "03eb45897eb13de7"
            ]
        ]
    },
    {
        "id": "40131e8f68c287e6",
        "type": "exec",
        "z": "e0e8620b48c94115",
        "command": "tar",
        "addpay": "targzcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "TarGzip Decompress",
        "x": 660,
        "y": 220,
        "wires": [
            [],
            [],
            [
                "03eb45897eb13de7"
            ]
        ]
    },
    {
        "id": "03eb45897eb13de7",
        "type": "link out",
        "z": "e0e8620b48c94115",
        "name": "Decompress Status Out",
        "mode": "link",
        "links": [
            "d02f224c16f5b49e"
        ],
        "x": 955,
        "y": 100,
        "wires": []
    },
    {
        "id": "cb972665c95c82e0",
        "type": "exec",
        "z": "e0e8620b48c94115",
        "command": "unrar",
        "addpay": "unrarcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "WinRAR Decompress",
        "x": 660,
        "y": 160,
        "wires": [
            [],
            [],
            [
                "03eb45897eb13de7"
            ]
        ]
    },
    {
        "id": "bd63f7bbf5f39f4c",
        "type": "exec",
        "z": "e0e8620b48c94115",
        "command": "tar",
        "addpay": "tarbz2cli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "TarBzip2 Decompress",
        "x": 660,
        "y": 280,
        "wires": [
            [],
            [],
            [
                "03eb45897eb13de7"
            ]
        ]
    },
    {
        "id": "d2a429ef6d4b3530",
        "type": "inject",
        "z": "19719f64cd3e2b14",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 94,
        "y": 245,
        "wires": [
            [
                "80683ce89a3c1fc6",
                "d846ec818d269583",
                "89758527ccc508bf",
                "8a8526ec3f4ec8db",
                "328aa6ce6554a167"
            ]
        ]
    },
    {
        "id": "397fbc4952e7764b",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "msg.payload = msg.payload.loadavg[0];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 333,
        "y": 105,
        "wires": [
            [
                "72ee3ef70252b9e6"
            ]
        ]
    },
    {
        "id": "360faf219cde49de",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "msg.payload = msg.payload.loadavg[1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 334,
        "y": 143,
        "wires": [
            [
                "228e01849f4d0897"
            ]
        ]
    },
    {
        "id": "e99f0d48d25542d8",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "msg.payload = msg.payload.loadavg[2];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 333,
        "y": 186,
        "wires": [
            [
                "f2d82f719f88a4e3"
            ]
        ]
    },
    {
        "id": "72ee3ef70252b9e6",
        "type": "ui_gauge",
        "z": "19719f64cd3e2b14",
        "name": "CPU Load 1",
        "group": "e0d4dcde7626ef90",
        "order": 1,
        "width": "0",
        "height": "0",
        "gtype": "gage",
        "title": "1 Minute",
        "label": "load",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "4",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 501,
        "y": 104,
        "wires": []
    },
    {
        "id": "228e01849f4d0897",
        "type": "ui_gauge",
        "z": "19719f64cd3e2b14",
        "name": "CPU Load 2",
        "group": "e0d4dcde7626ef90",
        "order": 2,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "5 Minutes",
        "label": "load",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "4",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 501,
        "y": 145,
        "wires": []
    },
    {
        "id": "f2d82f719f88a4e3",
        "type": "ui_gauge",
        "z": "19719f64cd3e2b14",
        "name": "CPU Load 3",
        "group": "e0d4dcde7626ef90",
        "order": 4,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "15 Minutes",
        "label": "load",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "4",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "x": 499,
        "y": 187,
        "wires": []
    },
    {
        "id": "6d5b3a89be406608",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "msg.payload = msg.payload.memusage;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 116,
        "y": 699,
        "wires": [
            [
                "87f9e9fce76437c8"
            ]
        ]
    },
    {
        "id": "87f9e9fce76437c8",
        "type": "ui_gauge",
        "z": "19719f64cd3e2b14",
        "name": "Memory Usage",
        "group": "5ff0b34d73fe7838",
        "order": 1,
        "width": "0",
        "height": "0",
        "gtype": "gage",
        "title": "1 Minute",
        "label": "Usage",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "x": 300,
        "y": 703,
        "wires": []
    },
    {
        "id": "e5bb1845533c37f4",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "function formatBytes(bytes,decimals) {\n   if(bytes === 0) return '0 Byte';\n   var k = 1000; // or 1024 for binary\n   var dm = decimals + 1 || 3;\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n   var i = Math.floor(Math.log(bytes) / Math.log(k));\n   return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.payload = formatBytes(msg.payload.totalmem);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 118,
        "y": 742,
        "wires": [
            [
                "cbfdc9898b6f750a"
            ]
        ]
    },
    {
        "id": "d8ec137461d6a902",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "function formatBytes(bytes,decimals) {\n   if(bytes === 0) return '0 Byte';\n   var k = 1000; // or 1024 for binary\n   var dm = decimals + 1 || 3;\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n   var i = Math.floor(Math.log(bytes) / Math.log(k));\n   return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.payload = formatBytes(msg.payload.freemem);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 116,
        "y": 788,
        "wires": [
            [
                "0ea08c82b372eb30"
            ]
        ]
    },
    {
        "id": "cbfdc9898b6f750a",
        "type": "ui_text",
        "z": "19719f64cd3e2b14",
        "group": "5ff0b34d73fe7838",
        "order": 2,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Total Memory",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 299,
        "y": 746,
        "wires": []
    },
    {
        "id": "0ea08c82b372eb30",
        "type": "ui_text",
        "z": "19719f64cd3e2b14",
        "group": "5ff0b34d73fe7838",
        "order": 3,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Free Memory",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 303,
        "y": 789,
        "wires": []
    },
    {
        "id": "7fc81c56a2af3911",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "function timeConversion(millisec) {\n\n    var seconds = (millisec / 1000).toFixed(1);\n\n    var minutes = (millisec / (1000 * 60)).toFixed(1);\n\n    var hours = (millisec / (1000 * 60 * 60)).toFixed(1);\n\n    var days = (millisec / (1000 * 60 * 60 * 24)).toFixed(1);\n\n    if (seconds < 60) {\n        return seconds + \" Sec\";\n    } else if (minutes < 60) {\n        return minutes + \" Min\";\n    } else if (hours < 24) {\n        return hours + \" Hrs\";\n    } else {\n        return days + \" Days\"\n    }\n}\n\nmsg.payload = timeConversion(msg.payload.uptime * 1000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 406,
        "y": 353,
        "wires": [
            [
                "b1b52bccf145104d"
            ]
        ]
    },
    {
        "id": "b1b52bccf145104d",
        "type": "ui_text",
        "z": "19719f64cd3e2b14",
        "group": "919f51838b52e21a",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Uptime",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 561,
        "y": 352,
        "wires": []
    },
    {
        "id": "df6e21a17e0774b1",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "msg.payload = msg.payload.hostname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 405,
        "y": 390,
        "wires": [
            [
                "f341a5361390421e"
            ]
        ]
    },
    {
        "id": "f341a5361390421e",
        "type": "ui_text",
        "z": "19719f64cd3e2b14",
        "group": "919f51838b52e21a",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Hostname",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 573,
        "y": 392,
        "wires": []
    },
    {
        "id": "96a6b5b94888a4cf",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "msg.payload = msg.payload.platform;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 407,
        "y": 428,
        "wires": [
            [
                "bce18e6976171f8f"
            ]
        ]
    },
    {
        "id": "bce18e6976171f8f",
        "type": "ui_text",
        "z": "19719f64cd3e2b14",
        "group": "919f51838b52e21a",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Platform",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 569,
        "y": 431,
        "wires": []
    },
    {
        "id": "81906b0890028846",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "msg.payload = msg.payload.arch;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 408,
        "y": 467,
        "wires": [
            [
                "706cfa05c319d44d"
            ]
        ]
    },
    {
        "id": "706cfa05c319d44d",
        "type": "ui_text",
        "z": "19719f64cd3e2b14",
        "group": "919f51838b52e21a",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Arch",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 557,
        "y": 471,
        "wires": []
    },
    {
        "id": "cced1ab3fafdc6bb",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "msg.payload = msg.payload.release;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 409,
        "y": 503,
        "wires": [
            [
                "0768634ddaf82509"
            ]
        ]
    },
    {
        "id": "0768634ddaf82509",
        "type": "ui_text",
        "z": "19719f64cd3e2b14",
        "group": "919f51838b52e21a",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Release",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 569,
        "y": 509,
        "wires": []
    },
    {
        "id": "4819fcee3c08ec90",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "msg.payload = msg.payload.cpus[0].model;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 408,
        "y": 544,
        "wires": [
            [
                "239f6d77cb7c5b3a",
                "81f5b006830286cb",
                "0a091417fbb5b7af",
                "508a4ba74c53f365"
            ]
        ]
    },
    {
        "id": "239f6d77cb7c5b3a",
        "type": "ui_text",
        "z": "19719f64cd3e2b14",
        "group": "919f51838b52e21a",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "CPU 1",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 560,
        "y": 552,
        "wires": []
    },
    {
        "id": "81f5b006830286cb",
        "type": "ui_text",
        "z": "19719f64cd3e2b14",
        "group": "919f51838b52e21a",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "CPU 2",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 562,
        "y": 591,
        "wires": []
    },
    {
        "id": "0a091417fbb5b7af",
        "type": "ui_text",
        "z": "19719f64cd3e2b14",
        "group": "919f51838b52e21a",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "CPU 3",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 564,
        "y": 632,
        "wires": []
    },
    {
        "id": "508a4ba74c53f365",
        "type": "ui_text",
        "z": "19719f64cd3e2b14",
        "group": "919f51838b52e21a",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "CPU 4",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 566,
        "y": 672,
        "wires": []
    },
    {
        "id": "a116440b58648cc6",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "msg.payload = msg.payload.loadavg[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 338,
        "y": 229,
        "wires": [
            [
                "c2eea3d4b3514ef5"
            ]
        ]
    },
    {
        "id": "c2eea3d4b3514ef5",
        "type": "ui_chart",
        "z": "19719f64cd3e2b14",
        "name": "CPU Load - Historical",
        "group": "e0d4dcde7626ef90",
        "order": 0,
        "width": "0",
        "height": "0",
        "label": "24 Hours",
        "chartType": "line",
        "legend": "false",
        "xformat": "%H:%M:%S",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderUnit": "86400",
        "outputs": 2,
        "x": 530,
        "y": 229,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "856255ec17d1af2f",
        "type": "function",
        "z": "19719f64cd3e2b14",
        "name": "",
        "func": "msg.payload = msg.payload.memusage;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 113,
        "y": 660,
        "wires": [
            [
                "db87c9a496d54b86"
            ]
        ]
    },
    {
        "id": "db87c9a496d54b86",
        "type": "ui_chart",
        "z": "19719f64cd3e2b14",
        "name": "Memory - 24 Hours",
        "group": "5ff0b34d73fe7838",
        "order": 0,
        "width": "0",
        "height": "0",
        "label": "24 Hours",
        "chartType": "line",
        "legend": "false",
        "xformat": "%H:%M:%S",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 311,
        "y": 663,
        "wires": [
            []
        ]
    },
    {
        "id": "973d26828f1520cd",
        "type": "comment",
        "z": "19719f64cd3e2b14",
        "name": "CPU Load",
        "info": "",
        "x": 488,
        "y": 57,
        "wires": []
    },
    {
        "id": "fe4369c61818e136",
        "type": "comment",
        "z": "19719f64cd3e2b14",
        "name": "Memory Usage",
        "info": "",
        "x": 296,
        "y": 613,
        "wires": []
    },
    {
        "id": "1829dcfdb322c275",
        "type": "comment",
        "z": "19719f64cd3e2b14",
        "name": "System Information",
        "info": "",
        "x": 587,
        "y": 302,
        "wires": []
    },
    {
        "id": "80683ce89a3c1fc6",
        "type": "OS",
        "z": "19719f64cd3e2b14",
        "name": "",
        "x": 234,
        "y": 398,
        "wires": [
            [
                "df6e21a17e0774b1",
                "96a6b5b94888a4cf",
                "81906b0890028846",
                "cced1ab3fafdc6bb"
            ]
        ]
    },
    {
        "id": "d846ec818d269583",
        "type": "Uptime",
        "z": "19719f64cd3e2b14",
        "name": "",
        "x": 245,
        "y": 353,
        "wires": [
            [
                "7fc81c56a2af3911"
            ]
        ]
    },
    {
        "id": "89758527ccc508bf",
        "type": "CPUs",
        "z": "19719f64cd3e2b14",
        "name": "",
        "x": 234,
        "y": 443,
        "wires": [
            [
                "4819fcee3c08ec90"
            ]
        ]
    },
    {
        "id": "8a8526ec3f4ec8db",
        "type": "Loadavg",
        "z": "19719f64cd3e2b14",
        "name": "",
        "x": 171,
        "y": 165,
        "wires": [
            [
                "397fbc4952e7764b",
                "360faf219cde49de",
                "e99f0d48d25542d8",
                "a116440b58648cc6"
            ]
        ]
    },
    {
        "id": "328aa6ce6554a167",
        "type": "Memory",
        "z": "19719f64cd3e2b14",
        "name": "",
        "x": 111,
        "y": 531,
        "wires": [
            [
                "6d5b3a89be406608",
                "e5bb1845533c37f4",
                "d8ec137461d6a902",
                "856255ec17d1af2f"
            ]
        ]
    },
    {
        "id": "7e15b6ca3b537387",
        "type": "ui-template",
        "z": "a71f2aab07aaa34c",
        "g": "156d2c9c2338ddd3",
        "group": "8b040dd7e14d5a19",
        "page": "",
        "ui": "",
        "name": "UPLOAD",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<v-file-input show-size multiple chips :rules=\"rules\" accept=\".csv\"\n    variant=\"underlined\" label=\"File input\" v-on:change=\"uploadFile\" v-model=\"value\"\n    active-color=\"primary\" @update:modelValue=\"send({payload: value})\" />\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 460,
        "y": 400,
        "wires": [
            [
                "3b066a4d3b509ad3"
            ]
        ]
    },
    {
        "id": "3b066a4d3b509ad3",
        "type": "change",
        "z": "a71f2aab07aaa34c",
        "g": "156d2c9c2338ddd3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 400,
        "wires": [
            [
                "8ca9ca907634bf1b"
            ]
        ]
    },
    {
        "id": "8ca9ca907634bf1b",
        "type": "function",
        "z": "a71f2aab07aaa34c",
        "g": "156d2c9c2338ddd3",
        "name": "Convert Hex to String",
        "func": "const hexBuffer = msg.payload;\n\n// Convert the hex buffer to a Buffer object\nconst buffer = Buffer.from(hexBuffer, 'hex');\n\n// Convert the Buffer to a string\nconst string = buffer.toString();\n\n// Assign the string to msg.payload for further processing\nmsg.payload = string;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 400,
        "wires": [
            [
                "6e9c3aea3b691f0b"
            ]
        ]
    },
    {
        "id": "6e9c3aea3b691f0b",
        "type": "csv",
        "z": "a71f2aab07aaa34c",
        "g": "156d2c9c2338ddd3",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "1",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 990,
        "y": 400,
        "wires": [
            [
                "c6eb6117b9515961"
            ]
        ]
    },
    {
        "id": "b35577a87aeeca51",
        "type": "ui-table",
        "z": "a71f2aab07aaa34c",
        "g": "156d2c9c2338ddd3",
        "group": "8b040dd7e14d5a19",
        "name": "",
        "label": "text",
        "order": 3,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "autocols": true,
        "columns": [],
        "x": 1270,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c54758da97910bad",
        "type": "ui-button",
        "z": "a71f2aab07aaa34c",
        "g": "156d2c9c2338ddd3",
        "group": "8b040dd7e14d5a19",
        "name": "",
        "label": "Send to ....",
        "order": 1,
        "width": 0,
        "height": 0,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "CSV",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 470,
        "y": 440,
        "wires": [
            [
                "1e3de643c9014f89"
            ]
        ]
    },
    {
        "id": "c6eb6117b9515961",
        "type": "change",
        "z": "a71f2aab07aaa34c",
        "g": "156d2c9c2338ddd3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CSV",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 400,
        "wires": [
            [
                "b35577a87aeeca51"
            ]
        ]
    },
    {
        "id": "f50e94f35879cae1",
        "type": "debug",
        "z": "a71f2aab07aaa34c",
        "g": "156d2c9c2338ddd3",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 440,
        "wires": []
    },
    {
        "id": "1e3de643c9014f89",
        "type": "change",
        "z": "a71f2aab07aaa34c",
        "g": "156d2c9c2338ddd3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "CSV",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 440,
        "wires": [
            [
                "f50e94f35879cae1"
            ]
        ]
    },
    {
        "id": "7c30fb48.99cd2c",
        "type": "http in",
        "z": "5276120499639caa",
        "name": "",
        "url": "/simple",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 400,
        "y": 220,
        "wires": [
            [
                "3153fbd3.203a64"
            ]
        ]
    },
    {
        "id": "3153fbd3.203a64",
        "type": "template",
        "z": "5276120499639caa",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h1>Upload a file here:</h1>\n\n<form action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"myFile\" />\n    <input type=\"submit\" value=\"Submit\">\n</form>",
        "output": "str",
        "x": 740,
        "y": 220,
        "wires": [
            [
                "737e44d2.373a64"
            ]
        ]
    },
    {
        "id": "737e44d2.373a64",
        "type": "http response",
        "z": "5276120499639caa",
        "name": "",
        "x": 880,
        "y": 220,
        "wires": []
    },
    {
        "id": "4a7eded4.56598",
        "type": "http response",
        "z": "5276120499639caa",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 840,
        "y": 580,
        "wires": []
    },
    {
        "id": "46e01eea.4a46a",
        "type": "comment",
        "z": "5276120499639caa",
        "name": "Simple",
        "info": "",
        "x": 380,
        "y": 180,
        "wires": []
    },
    {
        "id": "72e223ba.672874",
        "type": "template",
        "z": "5276120499639caa",
        "name": "dropzone.js",
        "field": "dropzonejs",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "\n/*\n *\n * More info at [www.dropzonejs.com](http://www.dropzonejs.com)\n *\n * Copyright (c) 2012, Matias Meno\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\n(function() {\n  var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,\n    __slice = [].slice,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  noop = function() {};\n\n  Emitter = (function() {\n    function Emitter() {}\n\n    Emitter.prototype.addEventListener = Emitter.prototype.on;\n\n    Emitter.prototype.on = function(event, fn) {\n      this._callbacks = this._callbacks || {};\n      if (!this._callbacks[event]) {\n        this._callbacks[event] = [];\n      }\n      this._callbacks[event].push(fn);\n      return this;\n    };\n\n    Emitter.prototype.emit = function() {\n      var args, callback, callbacks, event, _i, _len;\n      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      this._callbacks = this._callbacks || {};\n      callbacks = this._callbacks[event];\n      if (callbacks) {\n        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {\n          callback = callbacks[_i];\n          callback.apply(this, args);\n        }\n      }\n      return this;\n    };\n\n    Emitter.prototype.removeListener = Emitter.prototype.off;\n\n    Emitter.prototype.removeAllListeners = Emitter.prototype.off;\n\n    Emitter.prototype.removeEventListener = Emitter.prototype.off;\n\n    Emitter.prototype.off = function(event, fn) {\n      var callback, callbacks, i, _i, _len;\n      if (!this._callbacks || arguments.length === 0) {\n        this._callbacks = {};\n        return this;\n      }\n      callbacks = this._callbacks[event];\n      if (!callbacks) {\n        return this;\n      }\n      if (arguments.length === 1) {\n        delete this._callbacks[event];\n        return this;\n      }\n      for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {\n        callback = callbacks[i];\n        if (callback === fn) {\n          callbacks.splice(i, 1);\n          break;\n        }\n      }\n      return this;\n    };\n\n    return Emitter;\n\n  })();\n\n  Dropzone = (function(_super) {\n    var extend, resolveOption;\n\n    __extends(Dropzone, _super);\n\n    Dropzone.prototype.Emitter = Emitter;\n\n\n    /*\n    This is a list of all available events you can register on a dropzone object.\n    \n    You can register an event handler like this:\n    \n        dropzone.on(\"dragEnter\", function() { });\n     */\n\n    Dropzone.prototype.events = [\"drop\", \"dragstart\", \"dragend\", \"dragenter\", \"dragover\", \"dragleave\", \"addedfile\", \"addedfiles\", \"removedfile\", \"thumbnail\", \"error\", \"errormultiple\", \"processing\", \"processingmultiple\", \"uploadprogress\", \"totaluploadprogress\", \"sending\", \"sendingmultiple\", \"success\", \"successmultiple\", \"canceled\", \"canceledmultiple\", \"complete\", \"completemultiple\", \"reset\", \"maxfilesexceeded\", \"maxfilesreached\", \"queuecomplete\"];\n\n    Dropzone.prototype.defaultOptions = {\n      url: null,\n      method: \"post\",\n      withCredentials: false,\n      parallelUploads: 2,\n      uploadMultiple: false,\n      maxFilesize: 256,\n      paramName: \"file\",\n      createImageThumbnails: true,\n      maxThumbnailFilesize: 10,\n      thumbnailWidth: 120,\n      thumbnailHeight: 120,\n      filesizeBase: 1000,\n      maxFiles: null,\n      params: {},\n      clickable: true,\n      ignoreHiddenFiles: true,\n      acceptedFiles: null,\n      acceptedMimeTypes: null,\n      autoProcessQueue: true,\n      autoQueue: true,\n      addRemoveLinks: false,\n      previewsContainer: null,\n      hiddenInputContainer: \"body\",\n      capture: null,\n      renameFilename: null,\n      dictDefaultMessage: \"Drop files here to upload\",\n      dictFallbackMessage: \"Your browser does not support drag'n'drop file uploads.\",\n      dictFallbackText: \"Please use the fallback form below to upload your files like in the olden days.\",\n      dictFileTooBig: \"File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.\",\n      dictInvalidFileType: \"You can't upload files of this type.\",\n      dictResponseError: \"Server responded with {{statusCode}} code.\",\n      dictCancelUpload: \"Cancel upload\",\n      dictCancelUploadConfirmation: \"Are you sure you want to cancel this upload?\",\n      dictRemoveFile: \"Remove file\",\n      dictRemoveFileConfirmation: null,\n      dictMaxFilesExceeded: \"You can not upload any more files.\",\n      accept: function(file, done) {\n        return done();\n      },\n      init: function() {\n        return noop;\n      },\n      forceFallback: false,\n      fallback: function() {\n        var child, messageElement, span, _i, _len, _ref;\n        this.element.className = \"\" + this.element.className + \" dz-browser-not-supported\";\n        _ref = this.element.getElementsByTagName(\"div\");\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          child = _ref[_i];\n          if (/(^| )dz-message($| )/.test(child.className)) {\n            messageElement = child;\n            child.className = \"dz-message\";\n            continue;\n          }\n        }\n        if (!messageElement) {\n          messageElement = Dropzone.createElement(\"<div class=\\\"dz-message\\\"><span></span></div>\");\n          this.element.appendChild(messageElement);\n        }\n        span = messageElement.getElementsByTagName(\"span\")[0];\n        if (span) {\n          if (span.textContent != null) {\n            span.textContent = this.options.dictFallbackMessage;\n          } else if (span.innerText != null) {\n            span.innerText = this.options.dictFallbackMessage;\n          }\n        }\n        return this.element.appendChild(this.getFallbackForm());\n      },\n      resize: function(file) {\n        var info, srcRatio, trgRatio;\n        info = {\n          srcX: 0,\n          srcY: 0,\n          srcWidth: file.width,\n          srcHeight: file.height\n        };\n        srcRatio = file.width / file.height;\n        info.optWidth = this.options.thumbnailWidth;\n        info.optHeight = this.options.thumbnailHeight;\n        if ((info.optWidth == null) && (info.optHeight == null)) {\n          info.optWidth = info.srcWidth;\n          info.optHeight = info.srcHeight;\n        } else if (info.optWidth == null) {\n          info.optWidth = srcRatio * info.optHeight;\n        } else if (info.optHeight == null) {\n          info.optHeight = (1 / srcRatio) * info.optWidth;\n        }\n        trgRatio = info.optWidth / info.optHeight;\n        if (file.height < info.optHeight || file.width < info.optWidth) {\n          info.trgHeight = info.srcHeight;\n          info.trgWidth = info.srcWidth;\n        } else {\n          if (srcRatio > trgRatio) {\n            info.srcHeight = file.height;\n            info.srcWidth = info.srcHeight * trgRatio;\n          } else {\n            info.srcWidth = file.width;\n            info.srcHeight = info.srcWidth / trgRatio;\n          }\n        }\n        info.srcX = (file.width - info.srcWidth) / 2;\n        info.srcY = (file.height - info.srcHeight) / 2;\n        return info;\n      },\n\n      /*\n      Those functions register themselves to the events on init and handle all\n      the user interface specific stuff. Overwriting them won't break the upload\n      but can break the way it's displayed.\n      You can overwrite them if you don't like the default behavior. If you just\n      want to add an additional event handler, register it on the dropzone object\n      and don't overwrite those options.\n       */\n      drop: function(e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n      },\n      dragstart: noop,\n      dragend: function(e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n      },\n      dragenter: function(e) {\n        return this.element.classList.add(\"dz-drag-hover\");\n      },\n      dragover: function(e) {\n        return this.element.classList.add(\"dz-drag-hover\");\n      },\n      dragleave: function(e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n      },\n      paste: noop,\n      reset: function() {\n        return this.element.classList.remove(\"dz-started\");\n      },\n      addedfile: function(file) {\n        var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;\n        if (this.element === this.previewsContainer) {\n          this.element.classList.add(\"dz-started\");\n        }\n        if (this.previewsContainer) {\n          file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());\n          file.previewTemplate = file.previewElement;\n          this.previewsContainer.appendChild(file.previewElement);\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-name]\");\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            node = _ref[_i];\n            node.textContent = this._renameFilename(file.name);\n          }\n          _ref1 = file.previewElement.querySelectorAll(\"[data-dz-size]\");\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            node = _ref1[_j];\n            node.innerHTML = this.filesize(file.size);\n          }\n          if (this.options.addRemoveLinks) {\n            file._removeLink = Dropzone.createElement(\"<a class=\\\"dz-remove\\\" href=\\\"javascript:undefined;\\\" data-dz-remove>\" + this.options.dictRemoveFile + \"</a>\");\n            file.previewElement.appendChild(file._removeLink);\n          }\n          removeFileEvent = (function(_this) {\n            return function(e) {\n              e.preventDefault();\n              e.stopPropagation();\n              if (file.status === Dropzone.UPLOADING) {\n                return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {\n                  return _this.removeFile(file);\n                });\n              } else {\n                if (_this.options.dictRemoveFileConfirmation) {\n                  return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {\n                    return _this.removeFile(file);\n                  });\n                } else {\n                  return _this.removeFile(file);\n                }\n              }\n            };\n          })(this);\n          _ref2 = file.previewElement.querySelectorAll(\"[data-dz-remove]\");\n          _results = [];\n          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n            removeLink = _ref2[_k];\n            _results.push(removeLink.addEventListener(\"click\", removeFileEvent));\n          }\n          return _results;\n        }\n      },\n      removedfile: function(file) {\n        var _ref;\n        if (file.previewElement) {\n          if ((_ref = file.previewElement) != null) {\n            _ref.parentNode.removeChild(file.previewElement);\n          }\n        }\n        return this._updateMaxFilesReachedClass();\n      },\n      thumbnail: function(file, dataUrl) {\n        var thumbnailElement, _i, _len, _ref;\n        if (file.previewElement) {\n          file.previewElement.classList.remove(\"dz-file-preview\");\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-thumbnail]\");\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            thumbnailElement = _ref[_i];\n            thumbnailElement.alt = file.name;\n            thumbnailElement.src = dataUrl;\n          }\n          return setTimeout(((function(_this) {\n            return function() {\n              return file.previewElement.classList.add(\"dz-image-preview\");\n            };\n          })(this)), 1);\n        }\n      },\n      error: function(file, message) {\n        var node, _i, _len, _ref, _results;\n        if (file.previewElement) {\n          file.previewElement.classList.add(\"dz-error\");\n          if (typeof message !== \"String\" && message.error) {\n            message = message.error;\n          }\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-errormessage]\");\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            node = _ref[_i];\n            _results.push(node.textContent = message);\n          }\n          return _results;\n        }\n      },\n      errormultiple: noop,\n      processing: function(file) {\n        if (file.previewElement) {\n          file.previewElement.classList.add(\"dz-processing\");\n          if (file._removeLink) {\n            return file._removeLink.textContent = this.options.dictCancelUpload;\n          }\n        }\n      },\n      processingmultiple: noop,\n      uploadprogress: function(file, progress, bytesSent) {\n        var node, _i, _len, _ref, _results;\n        if (file.previewElement) {\n          _ref = file.previewElement.querySelectorAll(\"[data-dz-uploadprogress]\");\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            node = _ref[_i];\n            if (node.nodeName === 'PROGRESS') {\n              _results.push(node.value = progress);\n            } else {\n              _results.push(node.style.width = \"\" + progress + \"%\");\n            }\n          }\n          return _results;\n        }\n      },\n      totaluploadprogress: noop,\n      sending: noop,\n      sendingmultiple: noop,\n      success: function(file) {\n        if (file.previewElement) {\n          return file.previewElement.classList.add(\"dz-success\");\n        }\n      },\n      successmultiple: noop,\n      canceled: function(file) {\n        return this.emit(\"error\", file, \"Upload canceled.\");\n      },\n      canceledmultiple: noop,\n      complete: function(file) {\n        if (file._removeLink) {\n          file._removeLink.textContent = this.options.dictRemoveFile;\n        }\n        if (file.previewElement) {\n          return file.previewElement.classList.add(\"dz-complete\");\n        }\n      },\n      completemultiple: noop,\n      maxfilesexceeded: noop,\n      maxfilesreached: noop,\n      queuecomplete: noop,\n      addedfiles: noop,\n      previewTemplate: \"<div class=\\\"dz-preview dz-file-preview\\\">\\n  <div class=\\\"dz-image\\\"><img data-dz-thumbnail /></div>\\n  <div class=\\\"dz-details\\\">\\n    <div class=\\\"dz-size\\\"><span data-dz-size></span></div>\\n    <div class=\\\"dz-filename\\\"><span data-dz-name></span></div>\\n  </div>\\n  <div class=\\\"dz-progress\\\"><span class=\\\"dz-upload\\\" data-dz-uploadprogress></span></div>\\n  <div class=\\\"dz-error-message\\\"><span data-dz-errormessage></span></div>\\n  <div class=\\\"dz-success-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Check</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <path d=\\\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" stroke-opacity=\\\"0.198794158\\\" stroke=\\\"#747474\\\" fill-opacity=\\\"0.816519475\\\" fill=\\\"#FFFFFF\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n      </g>\\n    </svg>\\n  </div>\\n  <div class=\\\"dz-error-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Error</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <g id=\\\"Check-+-Oval-2\\\" sketch:type=\\\"MSLayerGroup\\\" stroke=\\\"#747474\\\" stroke-opacity=\\\"0.198794158\\\" fill=\\\"#FFFFFF\\\" fill-opacity=\\\"0.816519475\\\">\\n          <path d=\\\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n        </g>\\n      </g>\\n    </svg>\\n  </div>\\n</div>\"\n    };\n\n    extend = function() {\n      var key, object, objects, target, val, _i, _len;\n      target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      for (_i = 0, _len = objects.length; _i < _len; _i++) {\n        object = objects[_i];\n        for (key in object) {\n          val = object[key];\n          target[key] = val;\n        }\n      }\n      return target;\n    };\n\n    function Dropzone(element, options) {\n      var elementOptions, fallback, _ref;\n      this.element = element;\n      this.version = Dropzone.version;\n      this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\\n*/g, \"\");\n      this.clickableElements = [];\n      this.listeners = [];\n      this.files = [];\n      if (typeof this.element === \"string\") {\n        this.element = document.querySelector(this.element);\n      }\n      if (!(this.element && (this.element.nodeType != null))) {\n        throw new Error(\"Invalid dropzone element.\");\n      }\n      if (this.element.dropzone) {\n        throw new Error(\"Dropzone already attached.\");\n      }\n      Dropzone.instances.push(this);\n      this.element.dropzone = this;\n      elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};\n      this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});\n      if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {\n        return this.options.fallback.call(this);\n      }\n      if (this.options.url == null) {\n        this.options.url = this.element.getAttribute(\"action\");\n      }\n      if (!this.options.url) {\n        throw new Error(\"No URL provided.\");\n      }\n      if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {\n        throw new Error(\"You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.\");\n      }\n      if (this.options.acceptedMimeTypes) {\n        this.options.acceptedFiles = this.options.acceptedMimeTypes;\n        delete this.options.acceptedMimeTypes;\n      }\n      this.options.method = this.options.method.toUpperCase();\n      if ((fallback = this.getExistingFallback()) && fallback.parentNode) {\n        fallback.parentNode.removeChild(fallback);\n      }\n      if (this.options.previewsContainer !== false) {\n        if (this.options.previewsContainer) {\n          this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, \"previewsContainer\");\n        } else {\n          this.previewsContainer = this.element;\n        }\n      }\n      if (this.options.clickable) {\n        if (this.options.clickable === true) {\n          this.clickableElements = [this.element];\n        } else {\n          this.clickableElements = Dropzone.getElements(this.options.clickable, \"clickable\");\n        }\n      }\n      this.init();\n    }\n\n    Dropzone.prototype.getAcceptedFiles = function() {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.accepted) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.getRejectedFiles = function() {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (!file.accepted) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.getFilesWithStatus = function(status) {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.status === status) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.getQueuedFiles = function() {\n      return this.getFilesWithStatus(Dropzone.QUEUED);\n    };\n\n    Dropzone.prototype.getUploadingFiles = function() {\n      return this.getFilesWithStatus(Dropzone.UPLOADING);\n    };\n\n    Dropzone.prototype.getAddedFiles = function() {\n      return this.getFilesWithStatus(Dropzone.ADDED);\n    };\n\n    Dropzone.prototype.getActiveFiles = function() {\n      var file, _i, _len, _ref, _results;\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {\n          _results.push(file);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.init = function() {\n      var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;\n      if (this.element.tagName === \"form\") {\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n      }\n      if (this.element.classList.contains(\"dropzone\") && !this.element.querySelector(\".dz-message\")) {\n        this.element.appendChild(Dropzone.createElement(\"<div class=\\\"dz-default dz-message\\\"><span>\" + this.options.dictDefaultMessage + \"</span></div>\"));\n      }\n      if (this.clickableElements.length) {\n        setupHiddenFileInput = (function(_this) {\n          return function() {\n            if (_this.hiddenFileInput) {\n              _this.hiddenFileInput.parentNode.removeChild(_this.hiddenFileInput);\n            }\n            _this.hiddenFileInput = document.createElement(\"input\");\n            _this.hiddenFileInput.setAttribute(\"type\", \"file\");\n            if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {\n              _this.hiddenFileInput.setAttribute(\"multiple\", \"multiple\");\n            }\n            _this.hiddenFileInput.className = \"dz-hidden-input\";\n            if (_this.options.acceptedFiles != null) {\n              _this.hiddenFileInput.setAttribute(\"accept\", _this.options.acceptedFiles);\n            }\n            if (_this.options.capture != null) {\n              _this.hiddenFileInput.setAttribute(\"capture\", _this.options.capture);\n            }\n            _this.hiddenFileInput.style.visibility = \"hidden\";\n            _this.hiddenFileInput.style.position = \"absolute\";\n            _this.hiddenFileInput.style.top = \"0\";\n            _this.hiddenFileInput.style.left = \"0\";\n            _this.hiddenFileInput.style.height = \"0\";\n            _this.hiddenFileInput.style.width = \"0\";\n            document.querySelector(_this.options.hiddenInputContainer).appendChild(_this.hiddenFileInput);\n            return _this.hiddenFileInput.addEventListener(\"change\", function() {\n              var file, files, _i, _len;\n              files = _this.hiddenFileInput.files;\n              if (files.length) {\n                for (_i = 0, _len = files.length; _i < _len; _i++) {\n                  file = files[_i];\n                  _this.addFile(file);\n                }\n              }\n              _this.emit(\"addedfiles\", files);\n              return setupHiddenFileInput();\n            });\n          };\n        })(this);\n        setupHiddenFileInput();\n      }\n      this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;\n      _ref1 = this.events;\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        eventName = _ref1[_i];\n        this.on(eventName, this.options[eventName]);\n      }\n      this.on(\"uploadprogress\", (function(_this) {\n        return function() {\n          return _this.updateTotalUploadProgress();\n        };\n      })(this));\n      this.on(\"removedfile\", (function(_this) {\n        return function() {\n          return _this.updateTotalUploadProgress();\n        };\n      })(this));\n      this.on(\"canceled\", (function(_this) {\n        return function(file) {\n          return _this.emit(\"complete\", file);\n        };\n      })(this));\n      this.on(\"complete\", (function(_this) {\n        return function(file) {\n          if (_this.getAddedFiles().length === 0 && _this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {\n            return setTimeout((function() {\n              return _this.emit(\"queuecomplete\");\n            }), 0);\n          }\n        };\n      })(this));\n      noPropagation = function(e) {\n        e.stopPropagation();\n        if (e.preventDefault) {\n          return e.preventDefault();\n        } else {\n          return e.returnValue = false;\n        }\n      };\n      this.listeners = [\n        {\n          element: this.element,\n          events: {\n            \"dragstart\": (function(_this) {\n              return function(e) {\n                return _this.emit(\"dragstart\", e);\n              };\n            })(this),\n            \"dragenter\": (function(_this) {\n              return function(e) {\n                noPropagation(e);\n                return _this.emit(\"dragenter\", e);\n              };\n            })(this),\n            \"dragover\": (function(_this) {\n              return function(e) {\n                var efct;\n                try {\n                  efct = e.dataTransfer.effectAllowed;\n                } catch (_error) {}\n                e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';\n                noPropagation(e);\n                return _this.emit(\"dragover\", e);\n              };\n            })(this),\n            \"dragleave\": (function(_this) {\n              return function(e) {\n                return _this.emit(\"dragleave\", e);\n              };\n            })(this),\n            \"drop\": (function(_this) {\n              return function(e) {\n                noPropagation(e);\n                return _this.drop(e);\n              };\n            })(this),\n            \"dragend\": (function(_this) {\n              return function(e) {\n                return _this.emit(\"dragend\", e);\n              };\n            })(this)\n          }\n        }\n      ];\n      this.clickableElements.forEach((function(_this) {\n        return function(clickableElement) {\n          return _this.listeners.push({\n            element: clickableElement,\n            events: {\n              \"click\": function(evt) {\n                if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(\".dz-message\")))) {\n                  _this.hiddenFileInput.click();\n                }\n                return true;\n              }\n            }\n          });\n        };\n      })(this));\n      this.enable();\n      return this.options.init.call(this);\n    };\n\n    Dropzone.prototype.destroy = function() {\n      var _ref;\n      this.disable();\n      this.removeAllFiles(true);\n      if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {\n        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);\n        this.hiddenFileInput = null;\n      }\n      delete this.element.dropzone;\n      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);\n    };\n\n    Dropzone.prototype.updateTotalUploadProgress = function() {\n      var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;\n      totalBytesSent = 0;\n      totalBytes = 0;\n      activeFiles = this.getActiveFiles();\n      if (activeFiles.length) {\n        _ref = this.getActiveFiles();\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          file = _ref[_i];\n          totalBytesSent += file.upload.bytesSent;\n          totalBytes += file.upload.total;\n        }\n        totalUploadProgress = 100 * totalBytesSent / totalBytes;\n      } else {\n        totalUploadProgress = 100;\n      }\n      return this.emit(\"totaluploadprogress\", totalUploadProgress, totalBytes, totalBytesSent);\n    };\n\n    Dropzone.prototype._getParamName = function(n) {\n      if (typeof this.options.paramName === \"function\") {\n        return this.options.paramName(n);\n      } else {\n        return \"\" + this.options.paramName + (this.options.uploadMultiple ? \"[\" + n + \"]\" : \"\");\n      }\n    };\n\n    Dropzone.prototype._renameFilename = function(name) {\n      if (typeof this.options.renameFilename !== \"function\") {\n        return name;\n      }\n      return this.options.renameFilename(name);\n    };\n\n    Dropzone.prototype.getFallbackForm = function() {\n      var existingFallback, fields, fieldsString, form;\n      if (existingFallback = this.getExistingFallback()) {\n        return existingFallback;\n      }\n      fieldsString = \"<div class=\\\"dz-fallback\\\">\";\n      if (this.options.dictFallbackText) {\n        fieldsString += \"<p>\" + this.options.dictFallbackText + \"</p>\";\n      }\n      fieldsString += \"<input type=\\\"file\\\" name=\\\"\" + (this._getParamName(0)) + \"\\\" \" + (this.options.uploadMultiple ? 'multiple=\"multiple\"' : void 0) + \" /><input type=\\\"submit\\\" value=\\\"Upload!\\\"></div>\";\n      fields = Dropzone.createElement(fieldsString);\n      if (this.element.tagName !== \"FORM\") {\n        form = Dropzone.createElement(\"<form action=\\\"\" + this.options.url + \"\\\" enctype=\\\"multipart/form-data\\\" method=\\\"\" + this.options.method + \"\\\"></form>\");\n        form.appendChild(fields);\n      } else {\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n        this.element.setAttribute(\"method\", this.options.method);\n      }\n      return form != null ? form : fields;\n    };\n\n    Dropzone.prototype.getExistingFallback = function() {\n      var fallback, getFallback, tagName, _i, _len, _ref;\n      getFallback = function(elements) {\n        var el, _i, _len;\n        for (_i = 0, _len = elements.length; _i < _len; _i++) {\n          el = elements[_i];\n          if (/(^| )fallback($| )/.test(el.className)) {\n            return el;\n          }\n        }\n      };\n      _ref = [\"div\", \"form\"];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        tagName = _ref[_i];\n        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {\n          return fallback;\n        }\n      }\n    };\n\n    Dropzone.prototype.setupEventListeners = function() {\n      var elementListeners, event, listener, _i, _len, _ref, _results;\n      _ref = this.listeners;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elementListeners = _ref[_i];\n        _results.push((function() {\n          var _ref1, _results1;\n          _ref1 = elementListeners.events;\n          _results1 = [];\n          for (event in _ref1) {\n            listener = _ref1[event];\n            _results1.push(elementListeners.element.addEventListener(event, listener, false));\n          }\n          return _results1;\n        })());\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.removeEventListeners = function() {\n      var elementListeners, event, listener, _i, _len, _ref, _results;\n      _ref = this.listeners;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elementListeners = _ref[_i];\n        _results.push((function() {\n          var _ref1, _results1;\n          _ref1 = elementListeners.events;\n          _results1 = [];\n          for (event in _ref1) {\n            listener = _ref1[event];\n            _results1.push(elementListeners.element.removeEventListener(event, listener, false));\n          }\n          return _results1;\n        })());\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.disable = function() {\n      var file, _i, _len, _ref, _results;\n      this.clickableElements.forEach(function(element) {\n        return element.classList.remove(\"dz-clickable\");\n      });\n      this.removeEventListeners();\n      _ref = this.files;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        _results.push(this.cancelUpload(file));\n      }\n      return _results;\n    };\n\n    Dropzone.prototype.enable = function() {\n      this.clickableElements.forEach(function(element) {\n        return element.classList.add(\"dz-clickable\");\n      });\n      return this.setupEventListeners();\n    };\n\n    Dropzone.prototype.filesize = function(size) {\n      var cutoff, i, selectedSize, selectedUnit, unit, units, _i, _len;\n      selectedSize = 0;\n      selectedUnit = \"b\";\n      if (size > 0) {\n        units = ['TB', 'GB', 'MB', 'KB', 'b'];\n        for (i = _i = 0, _len = units.length; _i < _len; i = ++_i) {\n          unit = units[i];\n          cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;\n          if (size >= cutoff) {\n            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);\n            selectedUnit = unit;\n            break;\n          }\n        }\n        selectedSize = Math.round(10 * selectedSize) / 10;\n      }\n      return \"<strong>\" + selectedSize + \"</strong> \" + selectedUnit;\n    };\n\n    Dropzone.prototype._updateMaxFilesReachedClass = function() {\n      if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {\n        if (this.getAcceptedFiles().length === this.options.maxFiles) {\n          this.emit('maxfilesreached', this.files);\n        }\n        return this.element.classList.add(\"dz-max-files-reached\");\n      } else {\n        return this.element.classList.remove(\"dz-max-files-reached\");\n      }\n    };\n\n    Dropzone.prototype.drop = function(e) {\n      var files, items;\n      if (!e.dataTransfer) {\n        return;\n      }\n      this.emit(\"drop\", e);\n      files = e.dataTransfer.files;\n      this.emit(\"addedfiles\", files);\n      if (files.length) {\n        items = e.dataTransfer.items;\n        if (items && items.length && (items[0].webkitGetAsEntry != null)) {\n          this._addFilesFromItems(items);\n        } else {\n          this.handleFiles(files);\n        }\n      }\n    };\n\n    Dropzone.prototype.paste = function(e) {\n      var items, _ref;\n      if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {\n        return;\n      }\n      this.emit(\"paste\", e);\n      items = e.clipboardData.items;\n      if (items.length) {\n        return this._addFilesFromItems(items);\n      }\n    };\n\n    Dropzone.prototype.handleFiles = function(files) {\n      var file, _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        _results.push(this.addFile(file));\n      }\n      return _results;\n    };\n\n    Dropzone.prototype._addFilesFromItems = function(items) {\n      var entry, item, _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = items.length; _i < _len; _i++) {\n        item = items[_i];\n        if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {\n          if (entry.isFile) {\n            _results.push(this.addFile(item.getAsFile()));\n          } else if (entry.isDirectory) {\n            _results.push(this._addFilesFromDirectory(entry, entry.name));\n          } else {\n            _results.push(void 0);\n          }\n        } else if (item.getAsFile != null) {\n          if ((item.kind == null) || item.kind === \"file\") {\n            _results.push(this.addFile(item.getAsFile()));\n          } else {\n            _results.push(void 0);\n          }\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n\n    Dropzone.prototype._addFilesFromDirectory = function(directory, path) {\n      var dirReader, errorHandler, readEntries;\n      dirReader = directory.createReader();\n      errorHandler = function(error) {\n        return typeof console !== \"undefined\" && console !== null ? typeof console.log === \"function\" ? console.log(error) : void 0 : void 0;\n      };\n      readEntries = (function(_this) {\n        return function() {\n          return dirReader.readEntries(function(entries) {\n            var entry, _i, _len;\n            if (entries.length > 0) {\n              for (_i = 0, _len = entries.length; _i < _len; _i++) {\n                entry = entries[_i];\n                if (entry.isFile) {\n                  entry.file(function(file) {\n                    if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {\n                      return;\n                    }\n                    file.fullPath = \"\" + path + \"/\" + file.name;\n                    return _this.addFile(file);\n                  });\n                } else if (entry.isDirectory) {\n                  _this._addFilesFromDirectory(entry, \"\" + path + \"/\" + entry.name);\n                }\n              }\n              readEntries();\n            }\n            return null;\n          }, errorHandler);\n        };\n      })(this);\n      return readEntries();\n    };\n\n    Dropzone.prototype.accept = function(file, done) {\n      if (file.size > this.options.maxFilesize * 1024 * 1024) {\n        return done(this.options.dictFileTooBig.replace(\"{{filesize}}\", Math.round(file.size / 1024 / 10.24) / 100).replace(\"{{maxFilesize}}\", this.options.maxFilesize));\n      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {\n        return done(this.options.dictInvalidFileType);\n      } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {\n        done(this.options.dictMaxFilesExceeded.replace(\"{{maxFiles}}\", this.options.maxFiles));\n        return this.emit(\"maxfilesexceeded\", file);\n      } else {\n        return this.options.accept.call(this, file, done);\n      }\n    };\n\n    Dropzone.prototype.addFile = function(file) {\n      file.upload = {\n        progress: 0,\n        total: file.size,\n        bytesSent: 0\n      };\n      this.files.push(file);\n      file.status = Dropzone.ADDED;\n      this.emit(\"addedfile\", file);\n      this._enqueueThumbnail(file);\n      return this.accept(file, (function(_this) {\n        return function(error) {\n          if (error) {\n            file.accepted = false;\n            _this._errorProcessing([file], error);\n          } else {\n            file.accepted = true;\n            if (_this.options.autoQueue) {\n              _this.enqueueFile(file);\n            }\n          }\n          return _this._updateMaxFilesReachedClass();\n        };\n      })(this));\n    };\n\n    Dropzone.prototype.enqueueFiles = function(files) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        this.enqueueFile(file);\n      }\n      return null;\n    };\n\n    Dropzone.prototype.enqueueFile = function(file) {\n      if (file.status === Dropzone.ADDED && file.accepted === true) {\n        file.status = Dropzone.QUEUED;\n        if (this.options.autoProcessQueue) {\n          return setTimeout(((function(_this) {\n            return function() {\n              return _this.processQueue();\n            };\n          })(this)), 0);\n        }\n      } else {\n        throw new Error(\"This file can't be queued because it has already been processed or was rejected.\");\n      }\n    };\n\n    Dropzone.prototype._thumbnailQueue = [];\n\n    Dropzone.prototype._processingThumbnail = false;\n\n    Dropzone.prototype._enqueueThumbnail = function(file) {\n      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {\n        this._thumbnailQueue.push(file);\n        return setTimeout(((function(_this) {\n          return function() {\n            return _this._processThumbnailQueue();\n          };\n        })(this)), 0);\n      }\n    };\n\n    Dropzone.prototype._processThumbnailQueue = function() {\n      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {\n        return;\n      }\n      this._processingThumbnail = true;\n      return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {\n        return function() {\n          _this._processingThumbnail = false;\n          return _this._processThumbnailQueue();\n        };\n      })(this));\n    };\n\n    Dropzone.prototype.removeFile = function(file) {\n      if (file.status === Dropzone.UPLOADING) {\n        this.cancelUpload(file);\n      }\n      this.files = without(this.files, file);\n      this.emit(\"removedfile\", file);\n      if (this.files.length === 0) {\n        return this.emit(\"reset\");\n      }\n    };\n\n    Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {\n      var file, _i, _len, _ref;\n      if (cancelIfNecessary == null) {\n        cancelIfNecessary = false;\n      }\n      _ref = this.files.slice();\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        file = _ref[_i];\n        if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {\n          this.removeFile(file);\n        }\n      }\n      return null;\n    };\n\n    Dropzone.prototype.createThumbnail = function(file, callback) {\n      var fileReader;\n      fileReader = new FileReader;\n      fileReader.onload = (function(_this) {\n        return function() {\n          if (file.type === \"image/svg+xml\") {\n            _this.emit(\"thumbnail\", file, fileReader.result);\n            if (callback != null) {\n              callback();\n            }\n            return;\n          }\n          return _this.createThumbnailFromUrl(file, fileReader.result, callback);\n        };\n      })(this);\n      return fileReader.readAsDataURL(file);\n    };\n\n    Dropzone.prototype.createThumbnailFromUrl = function(file, imageUrl, callback, crossOrigin) {\n      var img;\n      img = document.createElement(\"img\");\n      if (crossOrigin) {\n        img.crossOrigin = crossOrigin;\n      }\n      img.onload = (function(_this) {\n        return function() {\n          var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;\n          file.width = img.width;\n          file.height = img.height;\n          resizeInfo = _this.options.resize.call(_this, file);\n          if (resizeInfo.trgWidth == null) {\n            resizeInfo.trgWidth = resizeInfo.optWidth;\n          }\n          if (resizeInfo.trgHeight == null) {\n            resizeInfo.trgHeight = resizeInfo.optHeight;\n          }\n          canvas = document.createElement(\"canvas\");\n          ctx = canvas.getContext(\"2d\");\n          canvas.width = resizeInfo.trgWidth;\n          canvas.height = resizeInfo.trgHeight;\n          drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);\n          thumbnail = canvas.toDataURL(\"image/png\");\n          _this.emit(\"thumbnail\", file, thumbnail);\n          if (callback != null) {\n            return callback();\n          }\n        };\n      })(this);\n      if (callback != null) {\n        img.onerror = callback;\n      }\n      return img.src = imageUrl;\n    };\n\n    Dropzone.prototype.processQueue = function() {\n      var i, parallelUploads, processingLength, queuedFiles;\n      parallelUploads = this.options.parallelUploads;\n      processingLength = this.getUploadingFiles().length;\n      i = processingLength;\n      if (processingLength >= parallelUploads) {\n        return;\n      }\n      queuedFiles = this.getQueuedFiles();\n      if (!(queuedFiles.length > 0)) {\n        return;\n      }\n      if (this.options.uploadMultiple) {\n        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));\n      } else {\n        while (i < parallelUploads) {\n          if (!queuedFiles.length) {\n            return;\n          }\n          this.processFile(queuedFiles.shift());\n          i++;\n        }\n      }\n    };\n\n    Dropzone.prototype.processFile = function(file) {\n      return this.processFiles([file]);\n    };\n\n    Dropzone.prototype.processFiles = function(files) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.processing = true;\n        file.status = Dropzone.UPLOADING;\n        this.emit(\"processing\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"processingmultiple\", files);\n      }\n      return this.uploadFiles(files);\n    };\n\n    Dropzone.prototype._getFilesWithXhr = function(xhr) {\n      var file, files;\n      return files = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.files;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          file = _ref[_i];\n          if (file.xhr === xhr) {\n            _results.push(file);\n          }\n        }\n        return _results;\n      }).call(this);\n    };\n\n    Dropzone.prototype.cancelUpload = function(file) {\n      var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;\n      if (file.status === Dropzone.UPLOADING) {\n        groupedFiles = this._getFilesWithXhr(file.xhr);\n        for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {\n          groupedFile = groupedFiles[_i];\n          groupedFile.status = Dropzone.CANCELED;\n        }\n        file.xhr.abort();\n        for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {\n          groupedFile = groupedFiles[_j];\n          this.emit(\"canceled\", groupedFile);\n        }\n        if (this.options.uploadMultiple) {\n          this.emit(\"canceledmultiple\", groupedFiles);\n        }\n      } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {\n        file.status = Dropzone.CANCELED;\n        this.emit(\"canceled\", file);\n        if (this.options.uploadMultiple) {\n          this.emit(\"canceledmultiple\", [file]);\n        }\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    };\n\n    resolveOption = function() {\n      var args, option;\n      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      if (typeof option === 'function') {\n        return option.apply(this, args);\n      }\n      return option;\n    };\n\n    Dropzone.prototype.uploadFile = function(file) {\n      return this.uploadFiles([file]);\n    };\n\n    Dropzone.prototype.uploadFiles = function(files) {\n      var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;\n      xhr = new XMLHttpRequest();\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.xhr = xhr;\n      }\n      method = resolveOption(this.options.method, files);\n      url = resolveOption(this.options.url, files);\n      xhr.open(method, url, true);\n      xhr.withCredentials = !!this.options.withCredentials;\n      response = null;\n      handleError = (function(_this) {\n        return function() {\n          var _j, _len1, _results;\n          _results = [];\n          for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\n            file = files[_j];\n            _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace(\"{{statusCode}}\", xhr.status), xhr));\n          }\n          return _results;\n        };\n      })(this);\n      updateProgress = (function(_this) {\n        return function(e) {\n          var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;\n          if (e != null) {\n            progress = 100 * e.loaded / e.total;\n            for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\n              file = files[_j];\n              file.upload = {\n                progress: progress,\n                total: e.total,\n                bytesSent: e.loaded\n              };\n            }\n          } else {\n            allFilesFinished = true;\n            progress = 100;\n            for (_k = 0, _len2 = files.length; _k < _len2; _k++) {\n              file = files[_k];\n              if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {\n                allFilesFinished = false;\n              }\n              file.upload.progress = progress;\n              file.upload.bytesSent = file.upload.total;\n            }\n            if (allFilesFinished) {\n              return;\n            }\n          }\n          _results = [];\n          for (_l = 0, _len3 = files.length; _l < _len3; _l++) {\n            file = files[_l];\n            _results.push(_this.emit(\"uploadprogress\", file, progress, file.upload.bytesSent));\n          }\n          return _results;\n        };\n      })(this);\n      xhr.onload = (function(_this) {\n        return function(e) {\n          var _ref;\n          if (files[0].status === Dropzone.CANCELED) {\n            return;\n          }\n          if (xhr.readyState !== 4) {\n            return;\n          }\n          response = xhr.responseText;\n          if (xhr.getResponseHeader(\"content-type\") && ~xhr.getResponseHeader(\"content-type\").indexOf(\"application/json\")) {\n            try {\n              response = JSON.parse(response);\n            } catch (_error) {\n              e = _error;\n              response = \"Invalid JSON response from server.\";\n            }\n          }\n          updateProgress();\n          if (!((200 <= (_ref = xhr.status) && _ref < 300))) {\n            return handleError();\n          } else {\n            return _this._finished(files, response, e);\n          }\n        };\n      })(this);\n      xhr.onerror = (function(_this) {\n        return function() {\n          if (files[0].status === Dropzone.CANCELED) {\n            return;\n          }\n          return handleError();\n        };\n      })(this);\n      progressObj = (_ref = xhr.upload) != null ? _ref : xhr;\n      progressObj.onprogress = updateProgress;\n      headers = {\n        \"Accept\": \"application/json\",\n        \"Cache-Control\": \"no-cache\",\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      };\n      if (this.options.headers) {\n        extend(headers, this.options.headers);\n      }\n      for (headerName in headers) {\n        headerValue = headers[headerName];\n        if (headerValue) {\n          xhr.setRequestHeader(headerName, headerValue);\n        }\n      }\n      formData = new FormData();\n      if (this.options.params) {\n        _ref1 = this.options.params;\n        for (key in _ref1) {\n          value = _ref1[key];\n          formData.append(key, value);\n        }\n      }\n      for (_j = 0, _len1 = files.length; _j < _len1; _j++) {\n        file = files[_j];\n        this.emit(\"sending\", file, xhr, formData);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"sendingmultiple\", files, xhr, formData);\n      }\n      if (this.element.tagName === \"FORM\") {\n        _ref2 = this.element.querySelectorAll(\"input, textarea, select, button\");\n        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n          input = _ref2[_k];\n          inputName = input.getAttribute(\"name\");\n          inputType = input.getAttribute(\"type\");\n          if (input.tagName === \"SELECT\" && input.hasAttribute(\"multiple\")) {\n            _ref3 = input.options;\n            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {\n              option = _ref3[_l];\n              if (option.selected) {\n                formData.append(inputName, option.value);\n              }\n            }\n          } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== \"checkbox\" && _ref4 !== \"radio\") || input.checked) {\n            formData.append(inputName, input.value);\n          }\n        }\n      }\n      for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {\n        formData.append(this._getParamName(i), files[i], this._renameFilename(files[i].name));\n      }\n      return this.submitRequest(xhr, formData, files);\n    };\n\n    Dropzone.prototype.submitRequest = function(xhr, formData, files) {\n      return xhr.send(formData);\n    };\n\n    Dropzone.prototype._finished = function(files, responseText, e) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.status = Dropzone.SUCCESS;\n        this.emit(\"success\", file, responseText, e);\n        this.emit(\"complete\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"successmultiple\", files, responseText, e);\n        this.emit(\"completemultiple\", files);\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    };\n\n    Dropzone.prototype._errorProcessing = function(files, message, xhr) {\n      var file, _i, _len;\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        file.status = Dropzone.ERROR;\n        this.emit(\"error\", file, message, xhr);\n        this.emit(\"complete\", file);\n      }\n      if (this.options.uploadMultiple) {\n        this.emit(\"errormultiple\", files, message, xhr);\n        this.emit(\"completemultiple\", files);\n      }\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    };\n\n    return Dropzone;\n\n  })(Emitter);\n\n  Dropzone.version = \"4.3.0\";\n\n  Dropzone.options = {};\n\n  Dropzone.optionsForElement = function(element) {\n    if (element.getAttribute(\"id\")) {\n      return Dropzone.options[camelize(element.getAttribute(\"id\"))];\n    } else {\n      return void 0;\n    }\n  };\n\n  Dropzone.instances = [];\n\n  Dropzone.forElement = function(element) {\n    if (typeof element === \"string\") {\n      element = document.querySelector(element);\n    }\n    if ((element != null ? element.dropzone : void 0) == null) {\n      throw new Error(\"No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.\");\n    }\n    return element.dropzone;\n  };\n\n  Dropzone.autoDiscover = true;\n\n  Dropzone.discover = function() {\n    var checkElements, dropzone, dropzones, _i, _len, _results;\n    if (document.querySelectorAll) {\n      dropzones = document.querySelectorAll(\".dropzone\");\n    } else {\n      dropzones = [];\n      checkElements = function(elements) {\n        var el, _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = elements.length; _i < _len; _i++) {\n          el = elements[_i];\n          if (/(^| )dropzone($| )/.test(el.className)) {\n            _results.push(dropzones.push(el));\n          } else {\n            _results.push(void 0);\n          }\n        }\n        return _results;\n      };\n      checkElements(document.getElementsByTagName(\"div\"));\n      checkElements(document.getElementsByTagName(\"form\"));\n    }\n    _results = [];\n    for (_i = 0, _len = dropzones.length; _i < _len; _i++) {\n      dropzone = dropzones[_i];\n      if (Dropzone.optionsForElement(dropzone) !== false) {\n        _results.push(new Dropzone(dropzone));\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  };\n\n  Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\\/12/i];\n\n  Dropzone.isBrowserSupported = function() {\n    var capableBrowser, regex, _i, _len, _ref;\n    capableBrowser = true;\n    if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {\n      if (!(\"classList\" in document.createElement(\"a\"))) {\n        capableBrowser = false;\n      } else {\n        _ref = Dropzone.blacklistedBrowsers;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          regex = _ref[_i];\n          if (regex.test(navigator.userAgent)) {\n            capableBrowser = false;\n            continue;\n          }\n        }\n      }\n    } else {\n      capableBrowser = false;\n    }\n    return capableBrowser;\n  };\n\n  without = function(list, rejectedItem) {\n    var item, _i, _len, _results;\n    _results = [];\n    for (_i = 0, _len = list.length; _i < _len; _i++) {\n      item = list[_i];\n      if (item !== rejectedItem) {\n        _results.push(item);\n      }\n    }\n    return _results;\n  };\n\n  camelize = function(str) {\n    return str.replace(/[\\-_](\\w)/g, function(match) {\n      return match.charAt(1).toUpperCase();\n    });\n  };\n\n  Dropzone.createElement = function(string) {\n    var div;\n    div = document.createElement(\"div\");\n    div.innerHTML = string;\n    return div.childNodes[0];\n  };\n\n  Dropzone.elementInside = function(element, container) {\n    if (element === container) {\n      return true;\n    }\n    while (element = element.parentNode) {\n      if (element === container) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  Dropzone.getElement = function(el, name) {\n    var element;\n    if (typeof el === \"string\") {\n      element = document.querySelector(el);\n    } else if (el.nodeType != null) {\n      element = el;\n    }\n    if (element == null) {\n      throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector or a plain HTML element.\");\n    }\n    return element;\n  };\n\n  Dropzone.getElements = function(els, name) {\n    var e, el, elements, _i, _j, _len, _len1, _ref;\n    if (els instanceof Array) {\n      elements = [];\n      try {\n        for (_i = 0, _len = els.length; _i < _len; _i++) {\n          el = els[_i];\n          elements.push(this.getElement(el, name));\n        }\n      } catch (_error) {\n        e = _error;\n        elements = null;\n      }\n    } else if (typeof els === \"string\") {\n      elements = [];\n      _ref = document.querySelectorAll(els);\n      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n        el = _ref[_j];\n        elements.push(el);\n      }\n    } else if (els.nodeType != null) {\n      elements = [els];\n    }\n    if (!((elements != null) && elements.length)) {\n      throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector, a plain HTML element or a list of those.\");\n    }\n    return elements;\n  };\n\n  Dropzone.confirm = function(question, accepted, rejected) {\n    if (window.confirm(question)) {\n      return accepted();\n    } else if (rejected != null) {\n      return rejected();\n    }\n  };\n\n  Dropzone.isValidFile = function(file, acceptedFiles) {\n    var baseMimeType, mimeType, validType, _i, _len;\n    if (!acceptedFiles) {\n      return true;\n    }\n    acceptedFiles = acceptedFiles.split(\",\");\n    mimeType = file.type;\n    baseMimeType = mimeType.replace(/\\/.*$/, \"\");\n    for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {\n      validType = acceptedFiles[_i];\n      validType = validType.trim();\n      if (validType.charAt(0) === \".\") {\n        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {\n          return true;\n        }\n      } else if (/\\/\\*$/.test(validType)) {\n        if (baseMimeType === validType.replace(/\\/.*$/, \"\")) {\n          return true;\n        }\n      } else {\n        if (mimeType === validType) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  if (typeof jQuery !== \"undefined\" && jQuery !== null) {\n    jQuery.fn.dropzone = function(options) {\n      return this.each(function() {\n        return new Dropzone(this, options);\n      });\n    };\n  }\n\n  if (typeof module !== \"undefined\" && module !== null) {\n    module.exports = Dropzone;\n  } else {\n    window.Dropzone = Dropzone;\n  }\n\n  Dropzone.ADDED = \"added\";\n\n  Dropzone.QUEUED = \"queued\";\n\n  Dropzone.ACCEPTED = Dropzone.QUEUED;\n\n  Dropzone.UPLOADING = \"uploading\";\n\n  Dropzone.PROCESSING = Dropzone.UPLOADING;\n\n  Dropzone.CANCELED = \"canceled\";\n\n  Dropzone.ERROR = \"error\";\n\n  Dropzone.SUCCESS = \"success\";\n\n\n  /*\n  \n  Bugfix for iOS 6 and 7\n  Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios\n  based on the work of https://github.com/stomita/ios-imagefile-megapixel\n   */\n\n  detectVerticalSquash = function(img) {\n    var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;\n    iw = img.naturalWidth;\n    ih = img.naturalHeight;\n    canvas = document.createElement(\"canvas\");\n    canvas.width = 1;\n    canvas.height = ih;\n    ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(img, 0, 0);\n    data = ctx.getImageData(0, 0, 1, ih).data;\n    sy = 0;\n    ey = ih;\n    py = ih;\n    while (py > sy) {\n      alpha = data[(py - 1) * 4 + 3];\n      if (alpha === 0) {\n        ey = py;\n      } else {\n        sy = py;\n      }\n      py = (ey + sy) >> 1;\n    }\n    ratio = py / ih;\n    if (ratio === 0) {\n      return 1;\n    } else {\n      return ratio;\n    }\n  };\n\n  drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var vertSquashRatio;\n    vertSquashRatio = detectVerticalSquash(img);\n    return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\n  };\n\n\n  /*\n   * contentloaded.js\n   *\n   * Author: Diego Perini (diego.perini at gmail.com)\n   * Summary: cross-browser wrapper for DOMContentLoaded\n   * Updated: 20101020\n   * License: MIT\n   * Version: 1.2\n   *\n   * URL:\n   * http://javascript.nwbox.com/ContentLoaded/\n   * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE\n   */\n\n  contentLoaded = function(win, fn) {\n    var add, doc, done, init, poll, pre, rem, root, top;\n    done = false;\n    top = true;\n    doc = win.document;\n    root = doc.documentElement;\n    add = (doc.addEventListener ? \"addEventListener\" : \"attachEvent\");\n    rem = (doc.addEventListener ? \"removeEventListener\" : \"detachEvent\");\n    pre = (doc.addEventListener ? \"\" : \"on\");\n    init = function(e) {\n      if (e.type === \"readystatechange\" && doc.readyState !== \"complete\") {\n        return;\n      }\n      (e.type === \"load\" ? win : doc)[rem](pre + e.type, init, false);\n      if (!done && (done = true)) {\n        return fn.call(win, e.type || e);\n      }\n    };\n    poll = function() {\n      var e;\n      try {\n        root.doScroll(\"left\");\n      } catch (_error) {\n        e = _error;\n        setTimeout(poll, 50);\n        return;\n      }\n      return init(\"poll\");\n    };\n    if (doc.readyState !== \"complete\") {\n      if (doc.createEventObject && root.doScroll) {\n        try {\n          top = !win.frameElement;\n        } catch (_error) {}\n        if (top) {\n          poll();\n        }\n      }\n      doc[add](pre + \"DOMContentLoaded\", init, false);\n      doc[add](pre + \"readystatechange\", init, false);\n      return win[add](pre + \"load\", init, false);\n    }\n  };\n\n  Dropzone._autoDiscoverFunction = function() {\n    if (Dropzone.autoDiscover) {\n      return Dropzone.discover();\n    }\n  };\n\n  contentLoaded(window, Dropzone._autoDiscoverFunction);\n\n}).call(this);",
        "output": "str",
        "x": 640,
        "y": 520,
        "wires": [
            [
                "4c2a0101.2130d"
            ]
        ]
    },
    {
        "id": "721c9d99.0d0064",
        "type": "http in",
        "z": "5276120499639caa",
        "name": "",
        "url": "/complex",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 400,
        "y": 520,
        "wires": [
            [
                "72e223ba.672874"
            ]
        ]
    },
    {
        "id": "5c63bf7.aba48c",
        "type": "template",
        "z": "5276120499639caa",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<script>\n    {{{dropzonejs}}}\n</script>\n<style>\n    {{{css}}}\n</style>\n\n<script>\n    // \"myAwesomeDropzone\" is the camelized version of the HTML element's ID\n    Dropzone.options.myDropzone = {\n      paramName: \"myFile\", // The name that will be used to transfer the file\n      maxFilesize: 2, // MB\n      accept: function(file, done) {\n        if (file.name == \"justinbieber.jpg\") {\n          done(\"Naha, you don't.\");\n        }\n        else { done(); }\n      }\n    };\n</script>\n\n<h1>Upload a file here:</h1>\n\n<form action=\"/uploadpretty\" class=\"dropzone\" method=\"post\" enctype=\"multipart/form-data\" id=\"my-dropzone\">\n  <div class=\"fallback\">\n    <input name=\"myFile\" type=\"file\" />\n    <input type=\"submit\" value=\"Submit\">\n  </div>\n</form>",
        "output": "str",
        "x": 960,
        "y": 520,
        "wires": [
            [
                "a8d1613b.9a0478"
            ]
        ]
    },
    {
        "id": "a8d1613b.9a0478",
        "type": "http response",
        "z": "5276120499639caa",
        "name": "",
        "x": 1120,
        "y": 520,
        "wires": []
    },
    {
        "id": "7d8e179a.283e4",
        "type": "http response",
        "z": "5276120499639caa",
        "name": "",
        "x": 990,
        "y": 280,
        "wires": []
    },
    {
        "id": "4c2a0101.2130d",
        "type": "template",
        "z": "5276120499639caa",
        "name": "css",
        "field": "css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "/*\n * The MIT License\n * Copyright (c) 2012 Matias Meno <m@tias.me>\n */\n@-webkit-keyframes passing-through {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30%, 70% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); }\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(-40px);\n    -moz-transform: translateY(-40px);\n    -ms-transform: translateY(-40px);\n    -o-transform: translateY(-40px);\n    transform: translateY(-40px); } }\n@-moz-keyframes passing-through {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30%, 70% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); }\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(-40px);\n    -moz-transform: translateY(-40px);\n    -ms-transform: translateY(-40px);\n    -o-transform: translateY(-40px);\n    transform: translateY(-40px); } }\n@keyframes passing-through {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30%, 70% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); }\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(-40px);\n    -moz-transform: translateY(-40px);\n    -ms-transform: translateY(-40px);\n    -o-transform: translateY(-40px);\n    transform: translateY(-40px); } }\n@-webkit-keyframes slide-in {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); } }\n@-moz-keyframes slide-in {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); } }\n@keyframes slide-in {\n  0% {\n    opacity: 0;\n    -webkit-transform: translateY(40px);\n    -moz-transform: translateY(40px);\n    -ms-transform: translateY(40px);\n    -o-transform: translateY(40px);\n    transform: translateY(40px); }\n  30% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    -moz-transform: translateY(0px);\n    -ms-transform: translateY(0px);\n    -o-transform: translateY(0px);\n    transform: translateY(0px); } }\n@-webkit-keyframes pulse {\n  0% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); }\n  10% {\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    transform: scale(1.1); }\n  20% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); } }\n@-moz-keyframes pulse {\n  0% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); }\n  10% {\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    transform: scale(1.1); }\n  20% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); } }\n@keyframes pulse {\n  0% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); }\n  10% {\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    transform: scale(1.1); }\n  20% {\n    -webkit-transform: scale(1);\n    -moz-transform: scale(1);\n    -ms-transform: scale(1);\n    -o-transform: scale(1);\n    transform: scale(1); } }\n.dropzone, .dropzone * {\n  box-sizing: border-box; }\n\n.dropzone {\n  min-height: 150px;\n  border: 2px solid rgba(0, 0, 0, 0.3);\n  background: white;\n  padding: 20px 20px; }\n  .dropzone.dz-clickable {\n    cursor: pointer; }\n    .dropzone.dz-clickable * {\n      cursor: default; }\n    .dropzone.dz-clickable .dz-message, .dropzone.dz-clickable .dz-message * {\n      cursor: pointer; }\n  .dropzone.dz-started .dz-message {\n    display: none; }\n  .dropzone.dz-drag-hover {\n    border-style: solid; }\n    .dropzone.dz-drag-hover .dz-message {\n      opacity: 0.5; }\n  .dropzone .dz-message {\n    text-align: center;\n    margin: 2em 0; }\n  .dropzone .dz-preview {\n    position: relative;\n    display: inline-block;\n    vertical-align: top;\n    margin: 16px;\n    min-height: 100px; }\n    .dropzone .dz-preview:hover {\n      z-index: 1000; }\n      .dropzone .dz-preview:hover .dz-details {\n        opacity: 1; }\n    .dropzone .dz-preview.dz-file-preview .dz-image {\n      border-radius: 20px;\n      background: #999;\n      background: linear-gradient(to bottom, #eee, #ddd); }\n    .dropzone .dz-preview.dz-file-preview .dz-details {\n      opacity: 1; }\n    .dropzone .dz-preview.dz-image-preview {\n      background: white; }\n      .dropzone .dz-preview.dz-image-preview .dz-details {\n        -webkit-transition: opacity 0.2s linear;\n        -moz-transition: opacity 0.2s linear;\n        -ms-transition: opacity 0.2s linear;\n        -o-transition: opacity 0.2s linear;\n        transition: opacity 0.2s linear; }\n    .dropzone .dz-preview .dz-remove {\n      font-size: 14px;\n      text-align: center;\n      display: block;\n      cursor: pointer;\n      border: none; }\n      .dropzone .dz-preview .dz-remove:hover {\n        text-decoration: underline; }\n    .dropzone .dz-preview:hover .dz-details {\n      opacity: 1; }\n    .dropzone .dz-preview .dz-details {\n      z-index: 20;\n      position: absolute;\n      top: 0;\n      left: 0;\n      opacity: 0;\n      font-size: 13px;\n      min-width: 100%;\n      max-width: 100%;\n      padding: 2em 1em;\n      text-align: center;\n      color: rgba(0, 0, 0, 0.9);\n      line-height: 150%; }\n      .dropzone .dz-preview .dz-details .dz-size {\n        margin-bottom: 1em;\n        font-size: 16px; }\n      .dropzone .dz-preview .dz-details .dz-filename {\n        white-space: nowrap; }\n        .dropzone .dz-preview .dz-details .dz-filename:hover span {\n          border: 1px solid rgba(200, 200, 200, 0.8);\n          background-color: rgba(255, 255, 255, 0.8); }\n        .dropzone .dz-preview .dz-details .dz-filename:not(:hover) {\n          overflow: hidden;\n          text-overflow: ellipsis; }\n          .dropzone .dz-preview .dz-details .dz-filename:not(:hover) span {\n            border: 1px solid transparent; }\n      .dropzone .dz-preview .dz-details .dz-filename span, .dropzone .dz-preview .dz-details .dz-size span {\n        background-color: rgba(255, 255, 255, 0.4);\n        padding: 0 0.4em;\n        border-radius: 3px; }\n    .dropzone .dz-preview:hover .dz-image img {\n      -webkit-transform: scale(1.05, 1.05);\n      -moz-transform: scale(1.05, 1.05);\n      -ms-transform: scale(1.05, 1.05);\n      -o-transform: scale(1.05, 1.05);\n      transform: scale(1.05, 1.05);\n      -webkit-filter: blur(8px);\n      filter: blur(8px); }\n    .dropzone .dz-preview .dz-image {\n      border-radius: 20px;\n      overflow: hidden;\n      width: 120px;\n      height: 120px;\n      position: relative;\n      display: block;\n      z-index: 10; }\n      .dropzone .dz-preview .dz-image img {\n        display: block; }\n    .dropzone .dz-preview.dz-success .dz-success-mark {\n      -webkit-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -moz-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -ms-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -o-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);\n      animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1); }\n    .dropzone .dz-preview.dz-error .dz-error-mark {\n      opacity: 1;\n      -webkit-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -moz-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -ms-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      -o-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);\n      animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1); }\n    .dropzone .dz-preview .dz-success-mark, .dropzone .dz-preview .dz-error-mark {\n      pointer-events: none;\n      opacity: 0;\n      z-index: 500;\n      position: absolute;\n      display: block;\n      top: 50%;\n      left: 50%;\n      margin-left: -27px;\n      margin-top: -27px; }\n      .dropzone .dz-preview .dz-success-mark svg, .dropzone .dz-preview .dz-error-mark svg {\n        display: block;\n        width: 54px;\n        height: 54px; }\n    .dropzone .dz-preview.dz-processing .dz-progress {\n      opacity: 1;\n      -webkit-transition: all 0.2s linear;\n      -moz-transition: all 0.2s linear;\n      -ms-transition: all 0.2s linear;\n      -o-transition: all 0.2s linear;\n      transition: all 0.2s linear; }\n    .dropzone .dz-preview.dz-complete .dz-progress {\n      opacity: 0;\n      -webkit-transition: opacity 0.4s ease-in;\n      -moz-transition: opacity 0.4s ease-in;\n      -ms-transition: opacity 0.4s ease-in;\n      -o-transition: opacity 0.4s ease-in;\n      transition: opacity 0.4s ease-in; }\n    .dropzone .dz-preview:not(.dz-processing) .dz-progress {\n      -webkit-animation: pulse 6s ease infinite;\n      -moz-animation: pulse 6s ease infinite;\n      -ms-animation: pulse 6s ease infinite;\n      -o-animation: pulse 6s ease infinite;\n      animation: pulse 6s ease infinite; }\n    .dropzone .dz-preview .dz-progress {\n      opacity: 1;\n      z-index: 1000;\n      pointer-events: none;\n      position: absolute;\n      height: 16px;\n      left: 50%;\n      top: 50%;\n      margin-top: -8px;\n      width: 80px;\n      margin-left: -40px;\n      background: rgba(255, 255, 255, 0.9);\n      -webkit-transform: scale(1);\n      border-radius: 8px;\n      overflow: hidden; }\n      .dropzone .dz-preview .dz-progress .dz-upload {\n        background: #333;\n        background: linear-gradient(to bottom, #666, #444);\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        width: 0;\n        -webkit-transition: width 300ms ease-in-out;\n        -moz-transition: width 300ms ease-in-out;\n        -ms-transition: width 300ms ease-in-out;\n        -o-transition: width 300ms ease-in-out;\n        transition: width 300ms ease-in-out; }\n    .dropzone .dz-preview.dz-error .dz-error-message {\n      display: block; }\n    .dropzone .dz-preview.dz-error:hover .dz-error-message {\n      opacity: 1;\n      pointer-events: auto; }\n    .dropzone .dz-preview .dz-error-message {\n      pointer-events: none;\n      z-index: 1000;\n      position: absolute;\n      display: block;\n      display: none;\n      opacity: 0;\n      -webkit-transition: opacity 0.3s ease;\n      -moz-transition: opacity 0.3s ease;\n      -ms-transition: opacity 0.3s ease;\n      -o-transition: opacity 0.3s ease;\n      transition: opacity 0.3s ease;\n      border-radius: 8px;\n      font-size: 13px;\n      top: 130px;\n      left: -10px;\n      width: 140px;\n      background: #be2626;\n      background: linear-gradient(to bottom, #be2626, #a92222);\n      padding: 0.5em 1.2em;\n      color: white; }\n      .dropzone .dz-preview .dz-error-message:after {\n        content: '';\n        position: absolute;\n        top: -6px;\n        left: 64px;\n        width: 0;\n        height: 0;\n        border-left: 6px solid transparent;\n        border-right: 6px solid transparent;\n        border-bottom: 6px solid #be2626; }",
        "output": "str",
        "x": 820,
        "y": 520,
        "wires": [
            [
                "5c63bf7.aba48c"
            ]
        ]
    },
    {
        "id": "efe92067.f84b28",
        "type": "http in",
        "z": "5276120499639caa",
        "name": "",
        "url": "/uploadpretty",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 420,
        "y": 580,
        "wires": [
            [
                "4a7eded4.56598",
                "df0237a0.3141f8"
            ]
        ]
    },
    {
        "id": "25859a94.7d9976",
        "type": "http in",
        "z": "5276120499639caa",
        "name": "",
        "url": "/upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 400,
        "y": 280,
        "wires": [
            [
                "d7e5df8b.97a4e8"
            ]
        ]
    },
    {
        "id": "e1643981.20d7c8",
        "type": "template",
        "z": "5276120499639caa",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<p></p>File {{name}} uploaded !</p>\n\n<h2>Contents:</h2>\n\n<pre>\n{{{payload}}}\n</pre>",
        "output": "str",
        "x": 830,
        "y": 280,
        "wires": [
            [
                "7d8e179a.283e4"
            ]
        ]
    },
    {
        "id": "d7e5df8b.97a4e8",
        "type": "function",
        "z": "5276120499639caa",
        "name": "toBase64",
        "func": "msg.name = msg.req.files[0].originalname;\n\nif (msg.req.files[0].mimetype.includes('image')) {\n    msg.payload = `<img src=\"data:image/gif;base64,${msg.req.files[0].buffer.toString('base64')}\">`;\n} else {\n    msg.payload = msg.req.files[0].buffer.toString();\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 340,
        "wires": [
            [
                "e1643981.20d7c8"
            ]
        ]
    },
    {
        "id": "b493c450.18d678",
        "type": "comment",
        "z": "5276120499639caa",
        "name": "Complex",
        "info": "",
        "x": 390,
        "y": 480,
        "wires": []
    },
    {
        "id": "df0237a0.3141f8",
        "type": "debug",
        "z": "5276120499639caa",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "req.files",
        "x": 648,
        "y": 637,
        "wires": []
    },
    {
        "id": "bc3d5db58a170c07",
        "type": "debug",
        "z": "c93069501e1f9f90",
        "name": "debug 365",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 280,
        "wires": []
    },
    {
        "id": "5c2e2fc8cb43974c",
        "type": "function",
        "z": "c93069501e1f9f90",
        "name": "buffer2string",
        "func": "const fs = require('fs');\nconst path = require('path');\n\nlet dir = '/home/ubuntu/';\nif (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, { recursive: true });\n}\n\nmsg.filename = path.join(dir, msg.file.name);\nif (msg.file.fileType === 'Triage') {\n    msg.filepath = \"/cases/processor/\" + msg.file.name;\n    msg.casesdir = \"/cases/processor/\";\n    msg.logfile = \"/cases/processor/logfile/logfile.txt\";\n} else if (msg.file.fileType === 'Malware') {\n    msg.filepath = \"/cases/malware/\" + msg.file.name;\n    msg.casesdir = \"/cases/malware/\";\n    msg.logfile = \"/cases/malware/logfile/logfile.txt\";\n}\nmsg.homedir = \"/home/ubuntu/\"\nmsg.parts = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "7ed243339a31c1cf"
            ]
        ]
    },
    {
        "id": "7ed243339a31c1cf",
        "type": "file",
        "z": "c93069501e1f9f90",
        "name": "Save Chunk",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "binary",
        "x": 950,
        "y": 280,
        "wires": [
            [
                "69104189c6f6a38a",
                "bc3d5db58a170c07"
            ]
        ]
    },
    {
        "id": "bbfc07b7e8486b6f",
        "type": "comment",
        "z": "c93069501e1f9f90",
        "name": "Report for Logfile ",
        "info": "",
        "x": 680,
        "y": 120,
        "wires": []
    },
    {
        "id": "69104189c6f6a38a",
        "type": "fs-ops-move",
        "z": "c93069501e1f9f90",
        "name": "",
        "sourcePath": "/home/ubuntu/temp",
        "sourcePathType": "str",
        "sourceFilename": "filename",
        "sourceFilenameType": "msg",
        "destPath": "casesdir",
        "destPathType": "msg",
        "destFilename": "filename",
        "destFilenameType": "msg",
        "link": false,
        "x": 640,
        "y": 500,
        "wires": [
            [
                "8d09060641932bef"
            ]
        ]
    },
    {
        "id": "8d09060641932bef",
        "type": "function",
        "z": "c93069501e1f9f90",
        "name": "SHA256 Extract Params",
        "func": "let fileTypePrefix = msg.file.fileType === 'Malware' ? 'Malware' : 'Triage';\nmsg.command = `echo -n \"${fileTypePrefix} Uploaded File = ${msg.casesdir}${msg.filename}\" >> ${msg.logfile} && echo \"\" >> ${msg.logfile}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 540,
        "wires": [
            [
                "8124094acf4dc7a7"
            ]
        ]
    },
    {
        "id": "8124094acf4dc7a7",
        "type": "exec",
        "z": "c93069501e1f9f90",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "LogFile Process",
        "x": 1340,
        "y": 540,
        "wires": [
            [
                "1204309aad006213"
            ],
            [
                "1204309aad006213"
            ],
            [
                "1204309aad006213"
            ]
        ]
    },
    {
        "id": "1204309aad006213",
        "type": "debug",
        "z": "c93069501e1f9f90",
        "name": "debug 368",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 400,
        "wires": []
    },
    {
        "id": "2b467bd566c3996a",
        "type": "ui-template",
        "z": "c93069501e1f9f90",
        "group": "f90a248ea69daed4",
        "page": "",
        "ui": "",
        "name": "Binary File Upload",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-card width=\"1000\" height=\"700\" raised color=\"white\">\n        <v-card-title>Upload Triage / Image file for processing</v-card-title>\n        <br>\n        <v-card-text>\n            <v-file-input label=\"Click here to select a file\" show-size v-model=\"uploadFile\"></v-file-input>\n            <v-select v-model=\"fileType\" :items=\"['Triage', 'Malware']\" label=\"Select file type\"></v-select>\n            <v-select v-model=\"timesketchId\" :items=\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\" label=\"Select Timesketch ID\"></v-select>\n            <div>Progress: {{ progress }} bytes loaded</div>\n        </v-card-text>\n        <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn right @click=\"startUpload\">Upload File</v-btn>\n        </v-card-actions>\n    </v-card>\n</template>\n\n\n<script>\n    export default {\n        data() {\n            return {\n                uploadFile: null,\n                fileType: null,\n                timesketchId: null,\n                progress: 0\n            }\n        },\n        methods: {\n            startUpload() {\n                if (!this.uploadFile || !this.fileType || !this.timesketchId) {\n                    return;\n                } else {\n                    const reader = new FileReader();\n                    reader.readAsArrayBuffer(this.uploadFile);\n                    reader.onload = () => {\n                        this.send({topic:\"upload\", payload: reader.result, file:{name: this.uploadFile.name, size: this.uploadFile.size, type: this.uploadFile.type, fileType: this.fileType, timesketchId: this.timesketchId }  });\n                    }\n                    reader.onprogress = (data) => {\n                        this.progress = data.loaded;\n                    }\n                }\n            }\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 230,
        "y": 280,
        "wires": [
            [
                "e3a1325cf77f41a7"
            ]
        ]
    },
    {
        "id": "9b1f6330c30da690",
        "type": "ui-template",
        "z": "c93069501e1f9f90",
        "d": true,
        "group": "e5e7f2966d8565e9",
        "page": "",
        "ui": "",
        "name": "Binary File Upload",
        "order": 4,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-card width=\"1000\" height=\"700\" raised color=\"white\">\n        <v-card-title>Upload Triage / Image file for processing</v-card-title>\n        <br>\n        <v-card-text>\n            <v-file-input label=\"Click here to select a file\" show-size v-model=\"uploadFile\"></v-file-input>\n            <v-select v-model=\"fileType\" :items=\"['Triage', 'Malware']\" label=\"Select file type\"></v-select>\n            <div>Progress: {{ progress }} bytes loaded</div>\n        </v-card-text>\n        <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn right @click=\"startUpload\">Upload File</v-btn>\n        </v-card-actions>\n    </v-card>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                uploadFile: null,\n                fileType: null,\n                progress: 0\n            }\n        },\n        methods: {\n            startUpload() {\n                if (!this.uploadFile || !this.fileType) {\n                    return;\n                } else {\n                    const reader = new FileReader();\n                    reader.readAsArrayBuffer(this.uploadFile);\n                    reader.onload = () => {\n                        this.send({topic:\"upload\", payload: reader.result, file:{name: this.uploadFile.name, size: this.uploadFile.size, type: this.uploadFile.type, fileType: this.fileType }  });\n                    }\n                    reader.onprogress = (data) => {\n                        this.progress = data.loaded;\n                    }\n                }\n            }\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 310,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e3a1325cf77f41a7",
        "type": "split",
        "z": "c93069501e1f9f90",
        "name": "Split Buffer",
        "splt": "1024",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "5c2e2fc8cb43974c"
            ]
        ]
    },
    {
        "id": "12e5b620d3ebf731",
        "type": "debug",
        "z": "b099e26ff6cc45c6",
        "name": "debug 365",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 280,
        "wires": []
    },
    {
        "id": "721d2360aae011d5",
        "type": "function",
        "z": "b099e26ff6cc45c6",
        "name": "Set Filenames",
        "func": "let dir = '/home/ubuntu/temp';\nmsg.filename = dir + '/' + msg.file.name;\nif (msg.file.fileType === 'Triage') {\n    msg.filepath = '/cases/processor/' + msg.file.name;\n    msg.casesdir = '/cases/processor/';\n    msg.logfile = '/cases/processor/logfile/logfile.txt';\n} else if (msg.file.fileType === 'Malware') {\n    msg.filepath = '/cases/malware/' + msg.file.name;\n    msg.casesdir = '/cases/malware/';\n    msg.logfile = '/cases/malware/logfile/logfile.txt';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 260,
        "wires": [
            [
                "ab94c594bbf4a075"
            ]
        ]
    },
    {
        "id": "206bd3413f6d7dcf",
        "type": "file in",
        "z": "b099e26ff6cc45c6",
        "name": "Save Chunk",
        "filename": "filename",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "binary",
        "allProps": false,
        "x": 950,
        "y": 280,
        "wires": [
            [
                "12e5b620d3ebf731"
            ]
        ]
    },
    {
        "id": "601f59d39a3093a3",
        "type": "comment",
        "z": "b099e26ff6cc45c6",
        "name": "Report for Logfile ",
        "info": "",
        "x": 680,
        "y": 120,
        "wires": []
    },
    {
        "id": "f5f3f2bc88f3679e",
        "type": "fs-ops-move",
        "z": "b099e26ff6cc45c6",
        "name": "Move File",
        "sourcePath": "/home/ubuntu/temp",
        "sourcePathType": "str",
        "sourceFilename": "file.name",
        "sourceFilenameType": "msg",
        "destPath": "casesdir",
        "destPathType": "msg",
        "destFilename": "file.name",
        "destFilenameType": "msg",
        "link": false,
        "x": 680,
        "y": 500,
        "wires": [
            [
                "1e072fcd5073ac33"
            ]
        ]
    },
    {
        "id": "1e072fcd5073ac33",
        "type": "function",
        "z": "b099e26ff6cc45c6",
        "name": "SHA256 Extract Params",
        "func": "let fileTypePrefix = msg.file.fileType === 'Malware' ? 'Malware' : 'Triage';\nmsg.command = `echo -n \"${fileTypePrefix} Uploaded File = ${msg.casesdir}${msg.file.name}\" >> ${msg.logfile} && echo \"\" >> ${msg.logfile}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 540,
        "wires": [
            [
                "1a8a17ecb59a54a9"
            ]
        ]
    },
    {
        "id": "1a8a17ecb59a54a9",
        "type": "exec",
        "z": "b099e26ff6cc45c6",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "LogFile Process",
        "x": 1340,
        "y": 540,
        "wires": [
            [
                "862389da0124bfd5"
            ],
            [
                "862389da0124bfd5"
            ],
            [
                "862389da0124bfd5"
            ]
        ]
    },
    {
        "id": "862389da0124bfd5",
        "type": "debug",
        "z": "b099e26ff6cc45c6",
        "name": "debug 368",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 400,
        "wires": []
    },
    {
        "id": "cf7294fb7856a49a",
        "type": "ui-template",
        "z": "b099e26ff6cc45c6",
        "group": "f90a248ea69daed4",
        "page": "",
        "ui": "",
        "name": "Binary File Upload",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-card width=\"1000\" height=\"700\" raised color=\"white\">\n        <v-card-title>Upload Triage / Image file for processing</v-card-title>\n        <br>\n        <v-card-text>\n            <v-file-input label=\"Click here to select a file\" show-size v-model=\"uploadFile\"></v-file-input>\n            <v-select v-model=\"fileType\" :items=\"['Triage', 'Malware']\" label=\"Select file type\"></v-select>\n            <v-select v-model=\"timesketchId\" :items=\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\" label=\"Select Timesketch ID\"></v-select>\n            <div>Progress: {{ progress }} bytes loaded</div>\n        </v-card-text>\n        <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn right @click=\"startUpload\">Upload File</v-btn>\n        </v-card-actions>\n    </v-card>\n</template>\n\n\n<script>\n    export default {\n        data() {\n            return {\n                uploadFile: null,\n                fileType: null,\n                timesketchId: null,\n                progress: 0\n            }\n        },\n        methods: {\n            startUpload() {\n                if (!this.uploadFile || !this.fileType || !this.timesketchId) {\n                    return;\n                } else {\n                    const reader = new FileReader();\n                    reader.readAsArrayBuffer(this.uploadFile);\n                    reader.onload = () => {\n                        this.send({topic:\"upload\", payload: reader.result, file:{name: this.uploadFile.name, size: this.uploadFile.size, type: this.uploadFile.type, fileType: this.fileType, timesketchId: this.timesketchId }  });\n                    }\n                    reader.onprogress = (data) => {\n                        this.progress = data.loaded;\n                    }\n                }\n            }\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 230,
        "y": 280,
        "wires": [
            [
                "ab94c594bbf4a075"
            ]
        ]
    },
    {
        "id": "fed3429105f55151",
        "type": "ui-template",
        "z": "b099e26ff6cc45c6",
        "d": true,
        "group": "e5e7f2966d8565e9",
        "page": "",
        "ui": "",
        "name": "Binary File Upload",
        "order": 4,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-card width=\"1000\" height=\"700\" raised color=\"white\">\n        <v-card-title>Upload Triage / Image file for processing</v-card-title>\n        <br>\n        <v-card-text>\n            <v-file-input label=\"Click here to select a file\" show-size v-model=\"uploadFile\"></v-file-input>\n            <v-select v-model=\"fileType\" :items=\"['Triage', 'Malware']\" label=\"Select file type\"></v-select>\n            <div>Progress: {{ progress }} bytes loaded</div>\n        </v-card-text>\n        <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn right @click=\"startUpload\">Upload File</v-btn>\n        </v-card-actions>\n    </v-card>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                uploadFile: null,\n                fileType: null,\n                progress: 0\n            }\n        },\n        methods: {\n            startUpload() {\n                if (!this.uploadFile || !this.fileType) {\n                    return;\n                } else {\n                    const reader = new FileReader();\n                    reader.readAsArrayBuffer(this.uploadFile);\n                    reader.onload = () => {\n                        this.send({topic:\"upload\", payload: reader.result, file:{name: this.uploadFile.name, size: this.uploadFile.size, type: this.uploadFile.type, fileType: this.fileType }  });\n                    }\n                    reader.onprogress = (data) => {\n                        this.progress = data.loaded;\n                    }\n                }\n            }\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 310,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "ab94c594bbf4a075",
        "type": "split",
        "z": "b099e26ff6cc45c6",
        "name": "Split Buffer",
        "splt": "1024",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "721d2360aae011d5"
            ]
        ]
    },
    {
        "id": "cbc612bd37283fcb",
        "type": "join",
        "z": "b099e26ff6cc45c6",
        "name": "Join Chunks",
        "mode": "auto",
        "build": "buffer",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 770,
        "y": 360,
        "wires": [
            [
                "206bd3413f6d7dcf",
                "f5f3f2bc88f3679e"
            ]
        ]
    },
    {
        "id": "1c4ce5cf1cf68e09",
        "type": "debug",
        "z": "305ce45000422aed",
        "name": "debug 365",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 280,
        "wires": []
    },
    {
        "id": "bdecd2f3104b4693",
        "type": "function",
        "z": "305ce45000422aed",
        "name": "Set Filenames",
        "func": "let dir = '/home/ubuntu/temp';\nmsg.filename = dir + '/' + msg.file.name;\nif (msg.file.fileType === 'Triage') {\n    msg.filepath = '/cases/processor/' + msg.file.name;\n    msg.casesdir = '/cases/processor/';\n    msg.logfile = '/cases/processor/logfile/logfile.txt';\n} else if (msg.file.fileType === 'Malware') {\n    msg.filepath = '/cases/malware/' + msg.file.name;\n    msg.casesdir = '/cases/malware/';\n    msg.logfile = '/cases/malware/logfile/logfile.txt';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 280,
        "wires": [
            [
                "3b5dc6d6fd6a2979"
            ]
        ]
    },
    {
        "id": "2f66effc7528c7cc",
        "type": "file",
        "z": "305ce45000422aed",
        "name": "Save Chunk",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "binary",
        "x": 950,
        "y": 280,
        "wires": [
            [
                "1c4ce5cf1cf68e09"
            ]
        ]
    },
    {
        "id": "e12190c89a908178",
        "type": "comment",
        "z": "305ce45000422aed",
        "name": "Report for Logfile ",
        "info": "",
        "x": 680,
        "y": 120,
        "wires": []
    },
    {
        "id": "a01faa5152650ba9",
        "type": "fs-ops-move",
        "z": "305ce45000422aed",
        "name": "Move File",
        "sourcePath": "/home/ubuntu/temp",
        "sourcePathType": "str",
        "sourceFilename": "file.name",
        "sourceFilenameType": "msg",
        "destPath": "casesdir",
        "destPathType": "msg",
        "destFilename": "file.name",
        "destFilenameType": "msg",
        "link": false,
        "x": 680,
        "y": 500,
        "wires": [
            [
                "7fc782b7ede33c26"
            ]
        ]
    },
    {
        "id": "7fc782b7ede33c26",
        "type": "function",
        "z": "305ce45000422aed",
        "name": "SHA256 Extract Params",
        "func": "let fileTypePrefix = msg.file.fileType === 'Malware' ? 'Malware' : 'Triage';\nmsg.command = `echo -n \"${fileTypePrefix} Uploaded File = ${msg.casesdir}${msg.file.name}\" >> ${msg.logfile} && echo \"\" >> ${msg.logfile}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 540,
        "wires": [
            [
                "127b9e1954a8e93c"
            ]
        ]
    },
    {
        "id": "127b9e1954a8e93c",
        "type": "exec",
        "z": "305ce45000422aed",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "LogFile Process",
        "x": 1340,
        "y": 540,
        "wires": [
            [
                "a3b475602268475c"
            ],
            [
                "a3b475602268475c"
            ],
            [
                "a3b475602268475c"
            ]
        ]
    },
    {
        "id": "a3b475602268475c",
        "type": "debug",
        "z": "305ce45000422aed",
        "name": "debug 368",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 400,
        "wires": []
    },
    {
        "id": "6c6faf694cc34325",
        "type": "ui-template",
        "z": "305ce45000422aed",
        "group": "f90a248ea69daed4",
        "page": "",
        "ui": "",
        "name": "Binary File Upload",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-card width=\"1000\" height=\"700\" raised color=\"white\">\n        <v-card-title>Upload Triage / Image file for processing</v-card-title>\n        <br>\n        <v-card-text>\n            <v-file-input label=\"Click here to select a file\" show-size v-model=\"uploadFile\"></v-file-input>\n            <v-select v-model=\"fileType\" :items=\"['Triage', 'Malware']\" label=\"Select file type\"></v-select>\n            <v-select v-model=\"timesketchId\" :items=\"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\" label=\"Select Timesketch ID\"></v-select>\n            <div>Progress: {{ progress }} bytes loaded</div>\n        </v-card-text>\n        <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn right @click=\"startUpload\">Upload File</v-btn>\n        </v-card-actions>\n    </v-card>\n</template>\n\n\n<script>\n    export default {\n        data() {\n            return {\n                uploadFile: null,\n                fileType: null,\n                timesketchId: null,\n                progress: 0\n            }\n        },\n        methods: {\n            startUpload() {\n                if (!this.uploadFile || !this.fileType || !this.timesketchId) {\n                    return;\n                } else {\n                    const reader = new FileReader();\n                    reader.readAsArrayBuffer(this.uploadFile);\n                    reader.onload = () => {\n                        this.send({topic:\"upload\", payload: reader.result, file:{name: this.uploadFile.name, size: this.uploadFile.size, type: this.uploadFile.type, fileType: this.fileType, timesketchId: this.timesketchId }  });\n                    }\n                    reader.onprogress = (data) => {\n                        this.progress = data.loaded;\n                    }\n                }\n            }\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 230,
        "y": 280,
        "wires": [
            [
                "3b5dc6d6fd6a2979"
            ]
        ]
    },
    {
        "id": "c8eb0fbb68fdb35d",
        "type": "ui-template",
        "z": "305ce45000422aed",
        "d": true,
        "group": "e5e7f2966d8565e9",
        "page": "",
        "ui": "",
        "name": "Binary File Upload",
        "order": 4,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-card width=\"1000\" height=\"700\" raised color=\"white\">\n        <v-card-title>Upload Triage / Image file for processing</v-card-title>\n        <br>\n        <v-card-text>\n            <v-file-input label=\"Click here to select a file\" show-size v-model=\"uploadFile\"></v-file-input>\n            <v-select v-model=\"fileType\" :items=\"['Triage', 'Malware']\" label=\"Select file type\"></v-select>\n            <div>Progress: {{ progress }} bytes loaded</div>\n        </v-card-text>\n        <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn right @click=\"startUpload\">Upload File</v-btn>\n        </v-card-actions>\n    </v-card>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                uploadFile: null,\n                fileType: null,\n                progress: 0\n            }\n        },\n        methods: {\n            startUpload() {\n                if (!this.uploadFile || !this.fileType) {\n                    return;\n                } else {\n                    const reader = new FileReader();\n                    reader.readAsArrayBuffer(this.uploadFile);\n                    reader.onload = () => {\n                        this.send({topic:\"upload\", payload: reader.result, file:{name: this.uploadFile.name, size: this.uploadFile.size, type: this.uploadFile.type, fileType: this.fileType }  });\n                    }\n                    reader.onprogress = (data) => {\n                        this.progress = data.loaded;\n                    }\n                }\n            }\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 310,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3b5dc6d6fd6a2979",
        "type": "split",
        "z": "305ce45000422aed",
        "name": "Split Buffer",
        "splt": "1024",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "bdecd2f3104b4693"
            ]
        ]
    },
    {
        "id": "02852b882ba5a365",
        "type": "join",
        "z": "305ce45000422aed",
        "name": "Join Chunks",
        "mode": "auto",
        "build": "buffer",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 780,
        "y": 400,
        "wires": [
            [
                "2f66effc7528c7cc"
            ]
        ]
    }
]